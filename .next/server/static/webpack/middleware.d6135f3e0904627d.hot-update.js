"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./node_modules/@clerk/backend/dist/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@clerk/backend/dist/esm/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllowlistIdentifier: () => (/* binding */ AllowlistIdentifier),\n/* harmony export */   AuthStatus: () => (/* binding */ AuthStatus),\n/* harmony export */   Clerk: () => (/* binding */ Clerk),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   DeletedObject: () => (/* binding */ DeletedObject),\n/* harmony export */   Email: () => (/* binding */ Email),\n/* harmony export */   EmailAddress: () => (/* binding */ EmailAddress),\n/* harmony export */   ExternalAccount: () => (/* binding */ ExternalAccount),\n/* harmony export */   IdentificationLink: () => (/* binding */ IdentificationLink),\n/* harmony export */   Invitation: () => (/* binding */ Invitation),\n/* harmony export */   OauthAccessToken: () => (/* binding */ OauthAccessToken),\n/* harmony export */   ObjectType: () => (/* binding */ ObjectType),\n/* harmony export */   Organization: () => (/* binding */ Organization),\n/* harmony export */   OrganizationInvitation: () => (/* binding */ OrganizationInvitation),\n/* harmony export */   OrganizationMembership: () => (/* binding */ OrganizationMembership),\n/* harmony export */   OrganizationMembershipPublicUserData: () => (/* binding */ OrganizationMembershipPublicUserData),\n/* harmony export */   PhoneNumber: () => (/* binding */ PhoneNumber),\n/* harmony export */   RedirectUrl: () => (/* binding */ RedirectUrl),\n/* harmony export */   SMSMessage: () => (/* binding */ SMSMessage),\n/* harmony export */   Session: () => (/* binding */ Session),\n/* harmony export */   SignInToken: () => (/* binding */ SignInToken),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   User: () => (/* binding */ User),\n/* harmony export */   Verification: () => (/* binding */ Verification),\n/* harmony export */   buildRequestUrl: () => (/* binding */ buildRequestUrl),\n/* harmony export */   constants: () => (/* binding */ constants),\n/* harmony export */   createAuthenticateRequest: () => (/* binding */ createAuthenticateRequest),\n/* harmony export */   createIsomorphicRequest: () => (/* binding */ createIsomorphicRequest),\n/* harmony export */   debugRequestState: () => (/* binding */ debugRequestState),\n/* harmony export */   decodeJwt: () => (/* binding */ decodeJwt),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   hasValidSignature: () => (/* binding */ hasValidSignature),\n/* harmony export */   loadInterstitialFromLocal: () => (/* binding */ loadInterstitialFromLocal),\n/* harmony export */   makeAuthObjectSerializable: () => (/* binding */ makeAuthObjectSerializable),\n/* harmony export */   prunePrivateMetadata: () => (/* binding */ prunePrivateMetadata),\n/* harmony export */   redirect: () => (/* binding */ redirect),\n/* harmony export */   sanitizeAuthObject: () => (/* binding */ sanitizeAuthObject),\n/* harmony export */   signJwt: () => (/* binding */ signJwt),\n/* harmony export */   signedInAuthObject: () => (/* binding */ signedInAuthObject),\n/* harmony export */   signedOutAuthObject: () => (/* binding */ signedOutAuthObject),\n/* harmony export */   verifyJwt: () => (/* binding */ verifyJwt),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken)\n/* harmony export */ });\n/* harmony import */ var _clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/shared/deprecated */ \"(middleware)/./node_modules/@clerk/shared/dist/deprecated.mjs\");\n/* harmony import */ var _clerk_shared_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @clerk/shared/url */ \"(middleware)/./node_modules/@clerk/shared/dist/url.mjs\");\n/* harmony import */ var _clerk_shared_callWithRetry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @clerk/shared/callWithRetry */ \"(middleware)/./node_modules/@clerk/shared/dist/callWithRetry.mjs\");\n/* harmony import */ var _clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @clerk/shared/keys */ \"(middleware)/./node_modules/@clerk/shared/dist/keys.mjs\");\n/* harmony import */ var _clerk_shared_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @clerk/shared/error */ \"(middleware)/./node_modules/@clerk/shared/dist/error.mjs\");\n/* harmony import */ var _crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! #crypto */ \"(middleware)/./node_modules/@clerk/backend/dist/runtime/browser/crypto.mjs\");\n/* harmony import */ var _fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! #fetch */ \"(middleware)/./node_modules/@clerk/backend/dist/runtime/browser/fetch.mjs\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! deepmerge */ \"(middleware)/./node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(deepmerge__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var snakecase_keys__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! snakecase-keys */ \"(middleware)/./node_modules/snakecase-keys/index.js\");\n/* harmony import */ var snakecase_keys__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(snakecase_keys__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! cookie */ \"(middleware)/./node_modules/cookie/index.js\");\n/* harmony import */ var _clerk_shared_isomorphicAtob__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @clerk/shared/isomorphicAtob */ \"(middleware)/./node_modules/@clerk/shared/dist/isomorphicAtob.mjs\");\n// src/index.ts\n\n// src/api/endpoints/AbstractApi.ts\nvar AbstractAPI = class {\n    constructor(request){\n        this.request = request;\n    }\n    requireId(id) {\n        if (!id) {\n            throw new Error(\"A valid resource ID is required.\");\n        }\n    }\n};\n// src/util/path.ts\nvar SEPARATOR = \"/\";\nvar MULTIPLE_SEPARATOR_REGEX = new RegExp(SEPARATOR + \"{1,}\", \"g\");\nfunction joinPaths(...args) {\n    return args.filter((p)=>p).join(SEPARATOR).replace(MULTIPLE_SEPARATOR_REGEX, SEPARATOR);\n}\n// src/api/endpoints/AllowlistIdentifierApi.ts\nvar basePath = \"/allowlist_identifiers\";\nvar AllowlistIdentifierAPI = class extends AbstractAPI {\n    async getAllowlistIdentifierList() {\n        return this.request({\n            method: \"GET\",\n            path: basePath\n        });\n    }\n    async createAllowlistIdentifier(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath,\n            bodyParams: params\n        });\n    }\n    async deleteAllowlistIdentifier(allowlistIdentifierId) {\n        this.requireId(allowlistIdentifierId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath, allowlistIdentifierId)\n        });\n    }\n};\n// src/api/endpoints/ClientApi.ts\nvar basePath2 = \"/clients\";\nvar ClientAPI = class extends AbstractAPI {\n    async getClientList() {\n        return this.request({\n            method: \"GET\",\n            path: basePath2\n        });\n    }\n    async getClient(clientId) {\n        this.requireId(clientId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath2, clientId)\n        });\n    }\n    verifyClient(token) {\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath2, \"verify\"),\n            bodyParams: {\n                token\n            }\n        });\n    }\n};\n// src/api/endpoints/DomainApi.ts\nvar basePath3 = \"/domains\";\nvar DomainAPI = class extends AbstractAPI {\n    async deleteDomain(id) {\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath3, id)\n        });\n    }\n};\n// src/api/endpoints/EmailAddressApi.ts\nvar basePath4 = \"/email_addresses\";\nvar EmailAddressAPI = class extends AbstractAPI {\n    async getEmailAddress(emailAddressId) {\n        this.requireId(emailAddressId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath4, emailAddressId)\n        });\n    }\n    async createEmailAddress(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath4,\n            bodyParams: params\n        });\n    }\n    async updateEmailAddress(emailAddressId, params = {}) {\n        this.requireId(emailAddressId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath4, emailAddressId),\n            bodyParams: params\n        });\n    }\n    async deleteEmailAddress(emailAddressId) {\n        this.requireId(emailAddressId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath4, emailAddressId)\n        });\n    }\n};\n// src/api/endpoints/EmailApi.ts\n\nvar basePath5 = \"/emails\";\nvar EmailAPI = class extends AbstractAPI {\n    /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */ async createEmail(params) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"EmailAPI.createEmail\", \"This endpoint is no longer available and the function will be removed in the next major version.\");\n        return this.request({\n            method: \"POST\",\n            path: basePath5,\n            bodyParams: params\n        });\n    }\n};\n// src/util/shared.ts\n\n\n\n\n\n\nvar errorThrower = (0,_clerk_shared_error__WEBPACK_IMPORTED_MODULE_4__.buildErrorThrower)({\n    packageName: \"@clerk/backend\"\n});\nvar { isDevOrStagingUrl } = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.createDevOrStagingUrlCache)();\n// src/api/endpoints/InterstitialApi.ts\nvar InterstitialAPI = class extends AbstractAPI {\n    async getInterstitial() {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"getInterstitial()\", 'Switch to `Clerk(...).localInterstitial(...)` from `import { Clerk } from \"@clerk/backend\"`.');\n        return this.request({\n            path: \"internal/interstitial\",\n            method: \"GET\",\n            headerParams: {\n                \"Content-Type\": \"text/html\"\n            }\n        });\n    }\n};\n// src/api/endpoints/InvitationApi.ts\nvar basePath6 = \"/invitations\";\nvar InvitationAPI = class extends AbstractAPI {\n    async getInvitationList(params = {}) {\n        return this.request({\n            method: \"GET\",\n            path: basePath6,\n            queryParams: params\n        });\n    }\n    async createInvitation(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath6,\n            bodyParams: params\n        });\n    }\n    async revokeInvitation(invitationId) {\n        this.requireId(invitationId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath6, invitationId, \"revoke\")\n        });\n    }\n};\n// src/api/endpoints/OrganizationApi.ts\n\n// src/runtime/index.ts\n\n\nvar { RuntimeFetch, RuntimeAbortController, RuntimeBlob, RuntimeFormData, RuntimeHeaders, RuntimeRequest, RuntimeResponse } = _fetch__WEBPACK_IMPORTED_MODULE_6__;\nvar globalFetch = RuntimeFetch.bind(globalThis);\nvar runtime = {\n    crypto: _crypto__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    fetch: globalFetch,\n    AbortController: RuntimeAbortController,\n    Blob: RuntimeBlob,\n    FormData: RuntimeFormData,\n    Headers: RuntimeHeaders,\n    Request: RuntimeRequest,\n    Response: RuntimeResponse\n};\nvar runtime_default = runtime;\n// src/api/endpoints/OrganizationApi.ts\nvar basePath7 = \"/organizations\";\nvar OrganizationAPI = class extends AbstractAPI {\n    async getOrganizationList(params) {\n        return this.request({\n            method: \"GET\",\n            path: basePath7,\n            queryParams: params\n        });\n    }\n    async createOrganization(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath7,\n            bodyParams: params\n        });\n    }\n    async getOrganization(params) {\n        const organizationIdOrSlug = \"organizationId\" in params ? params.organizationId : params.slug;\n        this.requireId(organizationIdOrSlug);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath7, organizationIdOrSlug)\n        });\n    }\n    async updateOrganization(organizationId, params) {\n        this.requireId(organizationId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath7, organizationId),\n            bodyParams: params\n        });\n    }\n    async updateOrganizationLogo(organizationId, params) {\n        this.requireId(organizationId);\n        const formData = new runtime_default.FormData();\n        formData.append(\"file\", params?.file);\n        formData.append(\"uploader_user_id\", params?.uploaderUserId);\n        return this.request({\n            method: \"PUT\",\n            path: joinPaths(basePath7, organizationId, \"logo\"),\n            formData\n        });\n    }\n    async deleteOrganizationLogo(organizationId) {\n        this.requireId(organizationId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath7, organizationId, \"logo\")\n        });\n    }\n    async updateOrganizationMetadata(organizationId, params) {\n        this.requireId(organizationId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath7, organizationId, \"metadata\"),\n            bodyParams: params\n        });\n    }\n    async deleteOrganization(organizationId) {\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath7, organizationId)\n        });\n    }\n    async getOrganizationMembershipList(params) {\n        const { organizationId, limit, offset } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath7, organizationId, \"memberships\"),\n            queryParams: {\n                limit,\n                offset\n            }\n        });\n    }\n    async createOrganizationMembership(params) {\n        const { organizationId, userId, role } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath7, organizationId, \"memberships\"),\n            bodyParams: {\n                userId,\n                role\n            }\n        });\n    }\n    async updateOrganizationMembership(params) {\n        const { organizationId, userId, role } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath7, organizationId, \"memberships\", userId),\n            bodyParams: {\n                role\n            }\n        });\n    }\n    async updateOrganizationMembershipMetadata(params) {\n        const { organizationId, userId, publicMetadata, privateMetadata } = params;\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath7, organizationId, \"memberships\", userId, \"metadata\"),\n            bodyParams: {\n                publicMetadata,\n                privateMetadata\n            }\n        });\n    }\n    async deleteOrganizationMembership(params) {\n        const { organizationId, userId } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath7, organizationId, \"memberships\", userId)\n        });\n    }\n    async getOrganizationInvitationList(params) {\n        const { organizationId, status, limit, offset } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath7, organizationId, \"invitations\"),\n            queryParams: {\n                status,\n                limit,\n                offset\n            }\n        });\n    }\n    /**\n   * @deprecated  Use `getOrganizationInvitationList` instead along with the status parameter.\n   */ async getPendingOrganizationInvitationList(params) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"getPendingOrganizationInvitationList\", \"Use `getOrganizationInvitationList` instead.\");\n        const { organizationId, limit, offset } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath7, organizationId, \"invitations\", \"pending\"),\n            queryParams: {\n                limit,\n                offset\n            }\n        });\n    }\n    async createOrganizationInvitation(params) {\n        const { organizationId, ...bodyParams } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath7, organizationId, \"invitations\"),\n            bodyParams: {\n                ...bodyParams\n            }\n        });\n    }\n    async getOrganizationInvitation(params) {\n        const { organizationId, invitationId } = params;\n        this.requireId(organizationId);\n        this.requireId(invitationId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath7, organizationId, \"invitations\", invitationId)\n        });\n    }\n    async revokeOrganizationInvitation(params) {\n        const { organizationId, invitationId, requestingUserId } = params;\n        this.requireId(organizationId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath7, organizationId, \"invitations\", invitationId, \"revoke\"),\n            bodyParams: {\n                requestingUserId\n            }\n        });\n    }\n};\n// src/api/endpoints/PhoneNumberApi.ts\nvar basePath8 = \"/phone_numbers\";\nvar PhoneNumberAPI = class extends AbstractAPI {\n    async getPhoneNumber(phoneNumberId) {\n        this.requireId(phoneNumberId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath8, phoneNumberId)\n        });\n    }\n    async createPhoneNumber(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath8,\n            bodyParams: params\n        });\n    }\n    async updatePhoneNumber(phoneNumberId, params = {}) {\n        this.requireId(phoneNumberId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath8, phoneNumberId),\n            bodyParams: params\n        });\n    }\n    async deletePhoneNumber(phoneNumberId) {\n        this.requireId(phoneNumberId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath8, phoneNumberId)\n        });\n    }\n};\n// src/api/endpoints/RedirectUrlApi.ts\nvar basePath9 = \"/redirect_urls\";\nvar RedirectUrlAPI = class extends AbstractAPI {\n    async getRedirectUrlList() {\n        return this.request({\n            method: \"GET\",\n            path: basePath9\n        });\n    }\n    async getRedirectUrl(redirectUrlId) {\n        this.requireId(redirectUrlId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath9, redirectUrlId)\n        });\n    }\n    async createRedirectUrl(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath9,\n            bodyParams: params\n        });\n    }\n    async deleteRedirectUrl(redirectUrlId) {\n        this.requireId(redirectUrlId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath9, redirectUrlId)\n        });\n    }\n};\n// src/api/endpoints/SessionApi.ts\nvar basePath10 = \"/sessions\";\nvar SessionAPI = class extends AbstractAPI {\n    async getSessionList(queryParams) {\n        return this.request({\n            method: \"GET\",\n            path: basePath10,\n            queryParams\n        });\n    }\n    async getSession(sessionId) {\n        this.requireId(sessionId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath10, sessionId)\n        });\n    }\n    async revokeSession(sessionId) {\n        this.requireId(sessionId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath10, sessionId, \"revoke\")\n        });\n    }\n    async verifySession(sessionId, token) {\n        this.requireId(sessionId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath10, sessionId, \"verify\"),\n            bodyParams: {\n                token\n            }\n        });\n    }\n    async getToken(sessionId, template) {\n        this.requireId(sessionId);\n        return (await this.request({\n            method: \"POST\",\n            path: joinPaths(basePath10, sessionId, \"tokens\", template || \"\")\n        })).jwt;\n    }\n};\n// src/api/endpoints/SignInTokenApi.ts\nvar basePath11 = \"/sign_in_tokens\";\nvar SignInTokenAPI = class extends AbstractAPI {\n    async createSignInToken(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath11,\n            bodyParams: params\n        });\n    }\n    async revokeSignInToken(signInTokenId) {\n        this.requireId(signInTokenId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath11, signInTokenId, \"revoke\")\n        });\n    }\n};\n// src/api/endpoints/SMSMessageApi.ts\n\nvar basePath12 = \"/sms_messages\";\nvar SMSMessageAPI = class extends AbstractAPI {\n    /**\n   * @deprecated This endpoint is no longer available and the function will be removed in the next major version.\n   */ async createSMSMessage(params) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"SMSMessageAPI.createSMSMessage\", \"This endpoint is no longer available and the function will be removed in the next major version.\");\n        return this.request({\n            method: \"POST\",\n            path: basePath12,\n            bodyParams: params\n        });\n    }\n};\n// src/api/endpoints/UserApi.ts\nvar basePath13 = \"/users\";\nvar UserAPI = class extends AbstractAPI {\n    async getUserList(params = {}) {\n        return this.request({\n            method: \"GET\",\n            path: basePath13,\n            queryParams: params\n        });\n    }\n    async getUser(userId) {\n        this.requireId(userId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath13, userId)\n        });\n    }\n    async createUser(params) {\n        return this.request({\n            method: \"POST\",\n            path: basePath13,\n            bodyParams: params\n        });\n    }\n    async updateUser(userId, params = {}) {\n        this.requireId(userId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath13, userId),\n            bodyParams: params\n        });\n    }\n    async updateUserProfileImage(userId, params) {\n        this.requireId(userId);\n        const formData = new runtime_default.FormData();\n        formData.append(\"file\", params?.file);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath13, userId, \"profile_image\"),\n            formData\n        });\n    }\n    async updateUserMetadata(userId, params) {\n        this.requireId(userId);\n        return this.request({\n            method: \"PATCH\",\n            path: joinPaths(basePath13, userId, \"metadata\"),\n            bodyParams: params\n        });\n    }\n    async deleteUser(userId) {\n        this.requireId(userId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath13, userId)\n        });\n    }\n    async getCount(params = {}) {\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath13, \"count\"),\n            queryParams: params\n        });\n    }\n    async getUserOauthAccessToken(userId, provider) {\n        this.requireId(userId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath13, userId, \"oauth_access_tokens\", provider)\n        });\n    }\n    async disableUserMFA(userId) {\n        this.requireId(userId);\n        return this.request({\n            method: \"DELETE\",\n            path: joinPaths(basePath13, userId, \"mfa\")\n        });\n    }\n    async getOrganizationMembershipList(params) {\n        const { userId, limit, offset } = params;\n        this.requireId(userId);\n        return this.request({\n            method: \"GET\",\n            path: joinPaths(basePath13, userId, \"organization_memberships\"),\n            queryParams: {\n                limit,\n                offset\n            }\n        });\n    }\n    async verifyPassword(params) {\n        const { userId, password } = params;\n        this.requireId(userId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath13, userId, \"verify_password\"),\n            bodyParams: {\n                password\n            }\n        });\n    }\n    async verifyTOTP(params) {\n        const { userId, code } = params;\n        this.requireId(userId);\n        return this.request({\n            method: \"POST\",\n            path: joinPaths(basePath13, userId, \"verify_totp\"),\n            bodyParams: {\n                code\n            }\n        });\n    }\n};\n// src/api/request.ts\n\n\n\n// src/constants.ts\nvar API_URL = \"https://api.clerk.dev\";\nvar API_VERSION = \"v1\";\nvar USER_AGENT = `${\"@clerk/backend\"}@${\"0.37.3\"}`;\nvar MAX_CACHE_LAST_UPDATED_AT_SECONDS = 5 * 60;\nvar Attributes = {\n    AuthToken: \"__clerkAuthToken\",\n    AuthStatus: \"__clerkAuthStatus\",\n    AuthReason: \"__clerkAuthReason\",\n    AuthMessage: \"__clerkAuthMessage\"\n};\nvar Cookies = {\n    Session: \"__session\",\n    ClientUat: \"__client_uat\"\n};\nvar Headers = {\n    AuthToken: \"x-clerk-auth-token\",\n    AuthStatus: \"x-clerk-auth-status\",\n    AuthReason: \"x-clerk-auth-reason\",\n    AuthMessage: \"x-clerk-auth-message\",\n    EnableDebug: \"x-clerk-debug\",\n    ClerkRedirectTo: \"x-clerk-redirect-to\",\n    CloudFrontForwardedProto: \"cloudfront-forwarded-proto\",\n    Authorization: \"authorization\",\n    ForwardedPort: \"x-forwarded-port\",\n    ForwardedProto: \"x-forwarded-proto\",\n    ForwardedHost: \"x-forwarded-host\",\n    Referrer: \"referer\",\n    UserAgent: \"user-agent\",\n    Origin: \"origin\",\n    Host: \"host\",\n    ContentType: \"content-type\"\n};\nvar SearchParams = {\n    AuthStatus: Headers.AuthStatus,\n    AuthToken: Headers.AuthToken\n};\nvar ContentTypes = {\n    Json: \"application/json\"\n};\nvar constants = {\n    Attributes,\n    Cookies,\n    Headers,\n    SearchParams,\n    ContentTypes\n};\n// src/util/assertValidSecretKey.ts\nfunction assertValidSecretKey(val) {\n    if (!val || typeof val !== \"string\") {\n        throw Error(\"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\");\n    }\n}\n// src/api/resources/AllowlistIdentifier.ts\nvar AllowlistIdentifier = class _AllowlistIdentifier {\n    constructor(id, identifier, createdAt, updatedAt, invitationId){\n        this.id = id;\n        this.identifier = identifier;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.invitationId = invitationId;\n    }\n    static fromJSON(data) {\n        return new _AllowlistIdentifier(data.id, data.identifier, data.created_at, data.updated_at, data.invitation_id);\n    }\n};\n// src/api/resources/Session.ts\nvar Session = class _Session {\n    constructor(id, clientId, userId, status, lastActiveAt, expireAt, abandonAt, createdAt, updatedAt){\n        this.id = id;\n        this.clientId = clientId;\n        this.userId = userId;\n        this.status = status;\n        this.lastActiveAt = lastActiveAt;\n        this.expireAt = expireAt;\n        this.abandonAt = abandonAt;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n    }\n    static fromJSON(data) {\n        return new _Session(data.id, data.client_id, data.user_id, data.status, data.last_active_at, data.expire_at, data.abandon_at, data.created_at, data.updated_at);\n    }\n};\n// src/api/resources/Client.ts\nvar Client = class _Client {\n    constructor(id, sessionIds, sessions, signInId, signUpId, lastActiveSessionId, createdAt, updatedAt){\n        this.id = id;\n        this.sessionIds = sessionIds;\n        this.sessions = sessions;\n        this.signInId = signInId;\n        this.signUpId = signUpId;\n        this.lastActiveSessionId = lastActiveSessionId;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n    }\n    static fromJSON(data) {\n        return new _Client(data.id, data.session_ids, data.sessions.map((x)=>Session.fromJSON(x)), data.sign_in_id, data.sign_up_id, data.last_active_session_id, data.created_at, data.updated_at);\n    }\n};\n// src/api/resources/DeletedObject.ts\nvar DeletedObject = class _DeletedObject {\n    constructor(object, id, slug, deleted){\n        this.object = object;\n        this.id = id;\n        this.slug = slug;\n        this.deleted = deleted;\n    }\n    static fromJSON(data) {\n        return new _DeletedObject(data.object, data.id || null, data.slug || null, data.deleted);\n    }\n};\n// src/api/resources/Email.ts\nvar Email = class _Email {\n    constructor(id, fromEmailName, emailAddressId, toEmailAddress, subject, body, bodyPlain, status, slug, data, deliveredByClerk){\n        this.id = id;\n        this.fromEmailName = fromEmailName;\n        this.emailAddressId = emailAddressId;\n        this.toEmailAddress = toEmailAddress;\n        this.subject = subject;\n        this.body = body;\n        this.bodyPlain = bodyPlain;\n        this.status = status;\n        this.slug = slug;\n        this.data = data;\n        this.deliveredByClerk = deliveredByClerk;\n    }\n    static fromJSON(data) {\n        return new _Email(data.id, data.from_email_name, data.email_address_id, data.to_email_address, data.subject, data.body, data.body_plain, data.status, data.slug, data.data, data.delivered_by_clerk);\n    }\n};\n// src/api/resources/IdentificationLink.ts\nvar IdentificationLink = class _IdentificationLink {\n    constructor(id, type){\n        this.id = id;\n        this.type = type;\n    }\n    static fromJSON(data) {\n        return new _IdentificationLink(data.id, data.type);\n    }\n};\n// src/api/resources/Verification.ts\nvar Verification = class _Verification {\n    constructor(status, strategy, externalVerificationRedirectURL = null, attempts = null, expireAt = null, nonce = null){\n        this.status = status;\n        this.strategy = strategy;\n        this.externalVerificationRedirectURL = externalVerificationRedirectURL;\n        this.attempts = attempts;\n        this.expireAt = expireAt;\n        this.nonce = nonce;\n    }\n    static fromJSON(data) {\n        return new _Verification(data.status, data.strategy, data.external_verification_redirect_url ? new URL(data.external_verification_redirect_url) : null, data.attempts, data.expire_at, data.nonce);\n    }\n};\n// src/api/resources/EmailAddress.ts\nvar EmailAddress = class _EmailAddress {\n    constructor(id, emailAddress, verification, linkedTo){\n        this.id = id;\n        this.emailAddress = emailAddress;\n        this.verification = verification;\n        this.linkedTo = linkedTo;\n    }\n    static fromJSON(data) {\n        return new _EmailAddress(data.id, data.email_address, data.verification && Verification.fromJSON(data.verification), data.linked_to.map((link)=>IdentificationLink.fromJSON(link)));\n    }\n};\n// src/api/resources/ExternalAccount.ts\nvar ExternalAccount = class _ExternalAccount {\n    constructor(id, provider, identificationId, externalId, approvedScopes, emailAddress, firstName, lastName, picture, imageUrl, username, publicMetadata = {}, label, verification){\n        this.id = id;\n        this.provider = provider;\n        this.identificationId = identificationId;\n        this.externalId = externalId;\n        this.approvedScopes = approvedScopes;\n        this.emailAddress = emailAddress;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.picture = picture;\n        this.imageUrl = imageUrl;\n        this.username = username;\n        this.publicMetadata = publicMetadata;\n        this.label = label;\n        this.verification = verification;\n    }\n    static fromJSON(data) {\n        return new _ExternalAccount(data.id, data.provider, data.identification_id, data.provider_user_id, data.approved_scopes, data.email_address, data.first_name, data.last_name, data.avatar_url, data.image_url, data.username, data.public_metadata, data.label, data.verification && Verification.fromJSON(data.verification));\n    }\n};\n(0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedProperty)(ExternalAccount, \"picture\", \"Use `imageUrl` instead.\");\n// src/api/resources/Invitation.ts\nvar Invitation = class _Invitation {\n    constructor(id, emailAddress, publicMetadata, createdAt, updatedAt, status, revoked){\n        this.id = id;\n        this.emailAddress = emailAddress;\n        this.publicMetadata = publicMetadata;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.status = status;\n        this.revoked = revoked;\n    }\n    static fromJSON(data) {\n        return new _Invitation(data.id, data.email_address, data.public_metadata, data.created_at, data.updated_at, data.status, data.revoked);\n    }\n};\n// src/api/resources/JSON.ts\nvar ObjectType = /* @__PURE__ */ ((ObjectType2)=>{\n    ObjectType2[\"AllowlistIdentifier\"] = \"allowlist_identifier\";\n    ObjectType2[\"Client\"] = \"client\";\n    ObjectType2[\"Email\"] = \"email\";\n    ObjectType2[\"EmailAddress\"] = \"email_address\";\n    ObjectType2[\"ExternalAccount\"] = \"external_account\";\n    ObjectType2[\"FacebookAccount\"] = \"facebook_account\";\n    ObjectType2[\"GoogleAccount\"] = \"google_account\";\n    ObjectType2[\"Invitation\"] = \"invitation\";\n    ObjectType2[\"OauthAccessToken\"] = \"oauth_access_token\";\n    ObjectType2[\"Organization\"] = \"organization\";\n    ObjectType2[\"OrganizationInvitation\"] = \"organization_invitation\";\n    ObjectType2[\"OrganizationMembership\"] = \"organization_membership\";\n    ObjectType2[\"PhoneNumber\"] = \"phone_number\";\n    ObjectType2[\"RedirectUrl\"] = \"redirect_url\";\n    ObjectType2[\"Session\"] = \"session\";\n    ObjectType2[\"SignInAttempt\"] = \"sign_in_attempt\";\n    ObjectType2[\"SignInToken\"] = \"sign_in_token\";\n    ObjectType2[\"SignUpAttempt\"] = \"sign_up_attempt\";\n    ObjectType2[\"SmsMessage\"] = \"sms_message\";\n    ObjectType2[\"User\"] = \"user\";\n    ObjectType2[\"Web3Wallet\"] = \"web3_wallet\";\n    ObjectType2[\"Token\"] = \"token\";\n    ObjectType2[\"TotalCount\"] = \"total_count\";\n    return ObjectType2;\n})(ObjectType || {});\n// src/api/resources/OauthAccessToken.ts\nvar OauthAccessToken = class _OauthAccessToken {\n    constructor(provider, token, publicMetadata = {}, label, scopes, tokenSecret){\n        this.provider = provider;\n        this.token = token;\n        this.publicMetadata = publicMetadata;\n        this.label = label;\n        this.scopes = scopes;\n        this.tokenSecret = tokenSecret;\n    }\n    static fromJSON(data) {\n        return new _OauthAccessToken(data.provider, data.token, data.public_metadata, data.label, data.scopes, data.token_secret);\n    }\n};\n// src/api/resources/Organization.ts\nvar Organization = class _Organization {\n    constructor(id, name, slug, logoUrl, imageUrl, hasImage, createdBy, createdAt, updatedAt, publicMetadata = {}, privateMetadata = {}, maxAllowedMemberships, adminDeleteEnabled, members_count){\n        this.id = id;\n        this.name = name;\n        this.slug = slug;\n        this.logoUrl = logoUrl;\n        this.imageUrl = imageUrl;\n        this.hasImage = hasImage;\n        this.createdBy = createdBy;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.publicMetadata = publicMetadata;\n        this.privateMetadata = privateMetadata;\n        this.maxAllowedMemberships = maxAllowedMemberships;\n        this.adminDeleteEnabled = adminDeleteEnabled;\n        this.members_count = members_count;\n    }\n    static fromJSON(data) {\n        return new _Organization(data.id, data.name, data.slug, data.logo_url, data.image_url, data.has_image, data.created_by, data.created_at, data.updated_at, data.public_metadata, data.private_metadata, data.max_allowed_memberships, data.admin_delete_enabled, data.members_count);\n    }\n};\n(0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedProperty)(Organization, \"logoUrl\", \"Use `imageUrl` instead.\");\n// src/api/resources/OrganizationInvitation.ts\nvar OrganizationInvitation = class _OrganizationInvitation {\n    constructor(id, emailAddress, role, organizationId, createdAt, updatedAt, status, publicMetadata = {}, privateMetadata = {}){\n        this.id = id;\n        this.emailAddress = emailAddress;\n        this.role = role;\n        this.organizationId = organizationId;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.status = status;\n        this.publicMetadata = publicMetadata;\n        this.privateMetadata = privateMetadata;\n    }\n    static fromJSON(data) {\n        return new _OrganizationInvitation(data.id, data.email_address, data.role, data.organization_id, data.created_at, data.updated_at, data.status, data.public_metadata, data.private_metadata);\n    }\n};\n// src/api/resources/OrganizationMembership.ts\nvar OrganizationMembership = class _OrganizationMembership {\n    constructor(id, role, publicMetadata = {}, privateMetadata = {}, createdAt, updatedAt, organization, publicUserData){\n        this.id = id;\n        this.role = role;\n        this.publicMetadata = publicMetadata;\n        this.privateMetadata = privateMetadata;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.organization = organization;\n        this.publicUserData = publicUserData;\n    }\n    static fromJSON(data) {\n        return new _OrganizationMembership(data.id, data.role, data.public_metadata, data.private_metadata, data.created_at, data.updated_at, Organization.fromJSON(data.organization), OrganizationMembershipPublicUserData.fromJSON(data.public_user_data));\n    }\n};\nvar OrganizationMembershipPublicUserData = class _OrganizationMembershipPublicUserData {\n    constructor(identifier, firstName, lastName, profileImageUrl, imageUrl, hasImage, userId){\n        this.identifier = identifier;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.profileImageUrl = profileImageUrl;\n        this.imageUrl = imageUrl;\n        this.hasImage = hasImage;\n        this.userId = userId;\n    }\n    static fromJSON(data) {\n        return new _OrganizationMembershipPublicUserData(data.identifier, data.first_name, data.last_name, data.profile_image_url, data.image_url, data.has_image, data.user_id);\n    }\n};\n(0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedProperty)(OrganizationMembershipPublicUserData, \"profileImageUrl\", \"Use `imageUrl` instead.\");\n// src/api/resources/PhoneNumber.ts\nvar PhoneNumber = class _PhoneNumber {\n    constructor(id, phoneNumber, reservedForSecondFactor, defaultSecondFactor, verification, linkedTo){\n        this.id = id;\n        this.phoneNumber = phoneNumber;\n        this.reservedForSecondFactor = reservedForSecondFactor;\n        this.defaultSecondFactor = defaultSecondFactor;\n        this.verification = verification;\n        this.linkedTo = linkedTo;\n    }\n    static fromJSON(data) {\n        return new _PhoneNumber(data.id, data.phone_number, data.reserved_for_second_factor, data.default_second_factor, data.verification && Verification.fromJSON(data.verification), data.linked_to.map((link)=>IdentificationLink.fromJSON(link)));\n    }\n};\n// src/api/resources/RedirectUrl.ts\nvar RedirectUrl = class _RedirectUrl {\n    constructor(id, url, createdAt, updatedAt){\n        this.id = id;\n        this.url = url;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n    }\n    static fromJSON(data) {\n        return new _RedirectUrl(data.id, data.url, data.created_at, data.updated_at);\n    }\n};\n// src/api/resources/SignInTokens.ts\nvar SignInToken = class _SignInToken {\n    constructor(id, userId, token, status, url, createdAt, updatedAt){\n        this.id = id;\n        this.userId = userId;\n        this.token = token;\n        this.status = status;\n        this.url = url;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n    }\n    static fromJSON(data) {\n        return new _SignInToken(data.id, data.user_id, data.token, data.status, data.url, data.created_at, data.updated_at);\n    }\n};\n// src/api/resources/SMSMessage.ts\nvar SMSMessage = class _SMSMessage {\n    constructor(id, fromPhoneNumber, toPhoneNumber, message, status, phoneNumberId, data){\n        this.id = id;\n        this.fromPhoneNumber = fromPhoneNumber;\n        this.toPhoneNumber = toPhoneNumber;\n        this.message = message;\n        this.status = status;\n        this.phoneNumberId = phoneNumberId;\n        this.data = data;\n    }\n    static fromJSON(data) {\n        return new _SMSMessage(data.id, data.from_phone_number, data.to_phone_number, data.message, data.status, data.phone_number_id, data.data);\n    }\n};\n// src/api/resources/Token.ts\nvar Token = class _Token {\n    constructor(jwt){\n        this.jwt = jwt;\n    }\n    static fromJSON(data) {\n        return new _Token(data.jwt);\n    }\n};\n// src/api/resources/Web3Wallet.ts\nvar Web3Wallet = class _Web3Wallet {\n    constructor(id, web3Wallet, verification){\n        this.id = id;\n        this.web3Wallet = web3Wallet;\n        this.verification = verification;\n    }\n    static fromJSON(data) {\n        return new _Web3Wallet(data.id, data.web3_wallet, data.verification && Verification.fromJSON(data.verification));\n    }\n};\n// src/api/resources/User.ts\nvar User = class _User {\n    constructor(id, passwordEnabled, totpEnabled, backupCodeEnabled, twoFactorEnabled, banned, createdAt, updatedAt, profileImageUrl, imageUrl, hasImage, gender, birthday, primaryEmailAddressId, primaryPhoneNumberId, primaryWeb3WalletId, lastSignInAt, externalId, username, firstName, lastName, publicMetadata = {}, privateMetadata = {}, unsafeMetadata = {}, emailAddresses = [], phoneNumbers = [], web3Wallets = [], externalAccounts = [], createOrganizationEnabled){\n        this.id = id;\n        this.passwordEnabled = passwordEnabled;\n        this.totpEnabled = totpEnabled;\n        this.backupCodeEnabled = backupCodeEnabled;\n        this.twoFactorEnabled = twoFactorEnabled;\n        this.banned = banned;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.profileImageUrl = profileImageUrl;\n        this.imageUrl = imageUrl;\n        this.hasImage = hasImage;\n        this.gender = gender;\n        this.birthday = birthday;\n        this.primaryEmailAddressId = primaryEmailAddressId;\n        this.primaryPhoneNumberId = primaryPhoneNumberId;\n        this.primaryWeb3WalletId = primaryWeb3WalletId;\n        this.lastSignInAt = lastSignInAt;\n        this.externalId = externalId;\n        this.username = username;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.publicMetadata = publicMetadata;\n        this.privateMetadata = privateMetadata;\n        this.unsafeMetadata = unsafeMetadata;\n        this.emailAddresses = emailAddresses;\n        this.phoneNumbers = phoneNumbers;\n        this.web3Wallets = web3Wallets;\n        this.externalAccounts = externalAccounts;\n        this.createOrganizationEnabled = createOrganizationEnabled;\n    }\n    static fromJSON(data) {\n        return new _User(data.id, data.password_enabled, data.totp_enabled, data.backup_code_enabled, data.two_factor_enabled, data.banned, data.created_at, data.updated_at, data.profile_image_url, data.image_url, data.has_image, data.gender, data.birthday, data.primary_email_address_id, data.primary_phone_number_id, data.primary_web3_wallet_id, data.last_sign_in_at, data.external_id, data.username, data.first_name, data.last_name, data.public_metadata, data.private_metadata, data.unsafe_metadata, (data.email_addresses || []).map((x)=>EmailAddress.fromJSON(x)), (data.phone_numbers || []).map((x)=>PhoneNumber.fromJSON(x)), (data.web3_wallets || []).map((x)=>Web3Wallet.fromJSON(x)), (data.external_accounts || []).map((x)=>ExternalAccount.fromJSON(x)), data.create_organization_enabled);\n    }\n};\n(0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedProperty)(User, \"profileImageUrl\", \"Use `imageUrl` instead.\");\n// src/api/resources/Deserializer.ts\nfunction deserialize(payload) {\n    if (Array.isArray(payload)) {\n        return payload.map((item)=>jsonToObject(item));\n    } else if (isPaginated(payload)) {\n        return payload.data.map((item)=>jsonToObject(item));\n    } else {\n        return jsonToObject(payload);\n    }\n}\nfunction isPaginated(payload) {\n    return Array.isArray(payload.data) && payload.data !== void 0;\n}\nfunction getCount(item) {\n    return item.total_count;\n}\nfunction jsonToObject(item) {\n    if (typeof item !== \"string\" && \"object\" in item && \"deleted\" in item) {\n        return DeletedObject.fromJSON(item);\n    }\n    switch(item.object){\n        case \"allowlist_identifier\" /* AllowlistIdentifier */ :\n            return AllowlistIdentifier.fromJSON(item);\n        case \"client\" /* Client */ :\n            return Client.fromJSON(item);\n        case \"email_address\" /* EmailAddress */ :\n            return EmailAddress.fromJSON(item);\n        case \"email\" /* Email */ :\n            return Email.fromJSON(item);\n        case \"invitation\" /* Invitation */ :\n            return Invitation.fromJSON(item);\n        case \"oauth_access_token\" /* OauthAccessToken */ :\n            return OauthAccessToken.fromJSON(item);\n        case \"organization\" /* Organization */ :\n            return Organization.fromJSON(item);\n        case \"organization_invitation\" /* OrganizationInvitation */ :\n            return OrganizationInvitation.fromJSON(item);\n        case \"organization_membership\" /* OrganizationMembership */ :\n            return OrganizationMembership.fromJSON(item);\n        case \"phone_number\" /* PhoneNumber */ :\n            return PhoneNumber.fromJSON(item);\n        case \"redirect_url\" /* RedirectUrl */ :\n            return RedirectUrl.fromJSON(item);\n        case \"sign_in_token\" /* SignInToken */ :\n            return SignInToken.fromJSON(item);\n        case \"session\" /* Session */ :\n            return Session.fromJSON(item);\n        case \"sms_message\" /* SmsMessage */ :\n            return SMSMessage.fromJSON(item);\n        case \"token\" /* Token */ :\n            return Token.fromJSON(item);\n        case \"total_count\" /* TotalCount */ :\n            return getCount(item);\n        case \"user\" /* User */ :\n            return User.fromJSON(item);\n        default:\n            return item;\n    }\n}\n// src/api/request.ts\nvar withLegacyReturn = (cb)=>async (...args)=>{\n        const response = await cb(...args);\n        if (response.errors === null) {\n            return response.data;\n        } else {\n            const { errors, clerkTraceId } = response;\n            const { status, statusText } = response;\n            const error = new _clerk_shared_error__WEBPACK_IMPORTED_MODULE_4__.ClerkAPIResponseError(statusText || \"\", {\n                data: [],\n                status: status || \"\",\n                clerkTraceId\n            });\n            error.errors = errors;\n            throw error;\n        }\n    };\nfunction buildRequest(options) {\n    const request = async (requestOptions)=>{\n        const { apiKey, secretKey, httpOptions, apiUrl = API_URL, apiVersion = API_VERSION, userAgent = USER_AGENT } = options;\n        if (apiKey) {\n            (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"apiKey\", \"Use `secretKey` instead.\");\n        }\n        if (httpOptions) {\n            (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"httpOptions\", \"This option has been deprecated and will be removed with the next major release.\\nA RequestInit init object used by the `request` method.\");\n        }\n        const { path, method, queryParams, headerParams, bodyParams, formData } = requestOptions;\n        const key = secretKey || apiKey;\n        assertValidSecretKey(key);\n        const url = joinPaths(apiUrl, apiVersion, path);\n        const finalUrl = new URL(url);\n        if (queryParams) {\n            const snakecasedQueryParams = snakecase_keys__WEBPACK_IMPORTED_MODULE_8___default()({\n                ...queryParams\n            });\n            for (const [key2, val] of Object.entries(snakecasedQueryParams)){\n                if (val) {\n                    [\n                        val\n                    ].flat().forEach((v)=>finalUrl.searchParams.append(key2, v));\n                }\n            }\n        }\n        const headers = {\n            Authorization: `Bearer ${key}`,\n            \"User-Agent\": userAgent,\n            ...headerParams\n        };\n        let res = void 0;\n        try {\n            if (formData) {\n                res = await runtime_default.fetch(finalUrl.href, {\n                    ...httpOptions,\n                    method,\n                    headers,\n                    body: formData\n                });\n            } else {\n                headers[\"Content-Type\"] = \"application/json\";\n                const hasBody = method !== \"GET\" && bodyParams && Object.keys(bodyParams).length > 0;\n                const body = hasBody ? {\n                    body: JSON.stringify(snakecase_keys__WEBPACK_IMPORTED_MODULE_8___default()(bodyParams, {\n                        deep: false\n                    }))\n                } : null;\n                res = await runtime_default.fetch(finalUrl.href, deepmerge__WEBPACK_IMPORTED_MODULE_7___default()(httpOptions || {}, {\n                    method,\n                    headers,\n                    ...body\n                }));\n            }\n            const isJSONResponse = res?.headers && res.headers?.get(constants.Headers.ContentType) === constants.ContentTypes.Json;\n            const data = await (isJSONResponse ? res.json() : res.text());\n            if (!res.ok) {\n                throw data;\n            }\n            return {\n                data: deserialize(data),\n                errors: null\n            };\n        } catch (err) {\n            if (err instanceof Error) {\n                return {\n                    data: null,\n                    errors: [\n                        {\n                            code: \"unexpected_error\",\n                            message: err.message || \"Unexpected error\"\n                        }\n                    ],\n                    clerkTraceId: getTraceId(err, res?.headers)\n                };\n            }\n            return {\n                data: null,\n                errors: parseErrors(err),\n                // TODO: To be removed with withLegacyReturn\n                // @ts-expect-error\n                status: res?.status,\n                statusText: res?.statusText,\n                clerkTraceId: getTraceId(err, res?.headers)\n            };\n        }\n    };\n    return withLegacyReturn(request);\n}\nfunction getTraceId(data, headers) {\n    if (data && typeof data === \"object\" && \"clerk_trace_id\" in data && typeof data.clerk_trace_id === \"string\") {\n        return data.clerk_trace_id;\n    }\n    const cfRay = headers?.get(\"cf-ray\");\n    return cfRay || \"\";\n}\nfunction parseErrors(data) {\n    if (!!data && typeof data === \"object\" && \"errors\" in data) {\n        const errors = data.errors;\n        return errors.length > 0 ? errors.map(parseError) : [];\n    }\n    return [];\n}\nfunction parseError(error) {\n    return {\n        code: error.code,\n        message: error.message,\n        longMessage: error.long_message,\n        meta: {\n            paramName: error?.meta?.param_name,\n            sessionId: error?.meta?.session_id\n        }\n    };\n}\n// src/api/factory.ts\nfunction createBackendApiClient(options) {\n    const request = buildRequest(options);\n    return {\n        allowlistIdentifiers: new AllowlistIdentifierAPI(request),\n        clients: new ClientAPI(request),\n        emailAddresses: new EmailAddressAPI(request),\n        emails: new EmailAPI(request),\n        interstitial: new InterstitialAPI(request),\n        invitations: new InvitationAPI(request),\n        organizations: new OrganizationAPI(request),\n        phoneNumbers: new PhoneNumberAPI(request),\n        redirectUrls: new RedirectUrlAPI(request),\n        sessions: new SessionAPI(request),\n        signInTokens: new SignInTokenAPI(request),\n        smsMessages: new SMSMessageAPI(request),\n        users: new UserAPI(request),\n        domains: new DomainAPI(request)\n    };\n}\n// src/tokens/authObjects.ts\n\nvar createDebug = (data)=>{\n    return ()=>{\n        const res = {\n            ...data\n        };\n        res.apiKey = (res.apiKey || \"\").substring(0, 7);\n        res.secretKey = (res.secretKey || \"\").substring(0, 7);\n        res.jwtKey = (res.jwtKey || \"\").substring(0, 7);\n        return {\n            ...res\n        };\n    };\n};\nfunction signedInAuthObject(sessionClaims, options, debugData) {\n    const { act: actor, sid: sessionId, org_id: orgId, org_role: orgRole, org_slug: orgSlug, org_permissions: orgPermissions, sub: userId } = sessionClaims;\n    const { apiKey, secretKey, apiUrl, apiVersion, token, session, user, organization } = options;\n    if (apiKey) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"apiKey\", \"Use `secretKey` instead.\");\n    }\n    const { sessions } = createBackendApiClient({\n        apiKey,\n        secretKey,\n        apiUrl,\n        apiVersion\n    });\n    const getToken = createGetToken({\n        sessionId,\n        sessionToken: token,\n        fetcher: (...args)=>sessions.getToken(...args)\n    });\n    return {\n        actor,\n        sessionClaims,\n        sessionId,\n        session,\n        userId,\n        user,\n        orgId,\n        orgRole,\n        orgSlug,\n        orgPermissions,\n        organization,\n        getToken,\n        has: createHasAuthorization({\n            orgId,\n            orgRole,\n            orgPermissions,\n            userId\n        }),\n        debug: createDebug({\n            ...options,\n            ...debugData\n        })\n    };\n}\nfunction signedOutAuthObject(debugData) {\n    if (debugData?.apiKey) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"apiKey\", \"Use `secretKey` instead.\");\n    }\n    return {\n        sessionClaims: null,\n        sessionId: null,\n        session: null,\n        userId: null,\n        user: null,\n        actor: null,\n        orgId: null,\n        orgRole: null,\n        orgSlug: null,\n        orgPermissions: null,\n        organization: null,\n        getToken: ()=>Promise.resolve(null),\n        has: ()=>false,\n        debug: createDebug(debugData)\n    };\n}\nfunction prunePrivateMetadata(resource) {\n    if (resource) {\n        delete resource[\"privateMetadata\"];\n        delete resource[\"private_metadata\"];\n    }\n    return resource;\n}\nfunction sanitizeAuthObject(authObject) {\n    const user = authObject.user ? {\n        ...authObject.user\n    } : authObject.user;\n    const organization = authObject.organization ? {\n        ...authObject.organization\n    } : authObject.organization;\n    prunePrivateMetadata(user);\n    prunePrivateMetadata(organization);\n    return {\n        ...authObject,\n        user,\n        organization\n    };\n}\nvar makeAuthObjectSerializable = (obj)=>{\n    const { debug, getToken, has, ...rest } = obj;\n    return rest;\n};\nvar createGetToken = (params)=>{\n    const { fetcher, sessionToken, sessionId } = params || {};\n    return async (options = {})=>{\n        if (!sessionId) {\n            return null;\n        }\n        if (options.template) {\n            return fetcher(sessionId, options.template);\n        }\n        return sessionToken;\n    };\n};\nvar createHasAuthorization = ({ orgId, orgRole, userId, orgPermissions })=>(params)=>{\n        if (!params?.permission && !params?.role) {\n            throw new Error('Missing parameters. `has` from `auth` or `getAuth` requires a permission or role key to be passed. Example usage: `has({permission: \"org:posts:edit\"`');\n        }\n        if (!orgId || !userId || !orgRole || !orgPermissions) {\n            return false;\n        }\n        if (params.permission) {\n            return orgPermissions.includes(params.permission);\n        }\n        if (params.role) {\n            return orgRole === params.role;\n        }\n        return false;\n    };\n// src/tokens/errors.ts\nvar TokenVerificationError = class _TokenVerificationError extends Error {\n    constructor({ action, message, reason }){\n        super(message);\n        Object.setPrototypeOf(this, _TokenVerificationError.prototype);\n        this.reason = reason;\n        this.message = message;\n        this.action = action;\n    }\n    getFullMessage() {\n        return `${[\n            this.message,\n            this.action\n        ].filter((m)=>m).join(\" \")} (reason=${this.reason}, token-carrier=${this.tokenCarrier})`;\n    }\n};\n// src/tokens/interstitial.ts\nfunction loadInterstitialFromLocal(options) {\n    if (options.frontendApi) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    if (options.pkgVersion) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"pkgVersion\", \"Use `clerkJSVersion` instead.\");\n    }\n    options.frontendApi = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.parsePublishableKey)(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n    const domainOnlyInProd = !isDevOrStagingUrl(options.frontendApi) ? (0,_clerk_shared_url__WEBPACK_IMPORTED_MODULE_1__.addClerkPrefix)(options.domain) : \"\";\n    const { debugData, frontendApi, pkgVersion, clerkJSUrl, clerkJSVersion, publishableKey, proxyUrl, isSatellite = false, domain, signInUrl } = options;\n    return `\n    <head>\n        <meta charset=\"UTF-8\" />\n        <style>\n          @media (prefers-color-scheme: dark) {\n            body {\n              background-color: black;\n            }\n          }\n        </style>\n    </head>\n    <body>\n        <script>\n            window.__clerk_frontend_api = '${frontendApi}';\n            window.__clerk_debug = ${JSON.stringify(debugData || {})};\n            ${proxyUrl ? `window.__clerk_proxy_url = '${proxyUrl}'` : \"\"}\n            ${domain ? `window.__clerk_domain = '${domain}'` : \"\"}\n            window.startClerk = async () => {\n                function formRedirect(){\n                    const form = '<form method=\"get\" action=\"\" name=\"redirect\"></form>';\n                    document.body.innerHTML = document.body.innerHTML + form;\n\n                    const searchParams = new URLSearchParams(window.location.search);\n                    for (let paramTuple of searchParams) {\n                        const input = document.createElement(\"input\");\n                        input.type = \"hidden\";\n                        input.name = paramTuple[0];\n                        input.value = paramTuple[1];\n                        document.forms.redirect.appendChild(input);\n                    }\n                    const url = new URL(window.location.origin + window.location.pathname + window.location.hash);\n                    window.history.pushState({}, '', url);\n\n                    document.forms.redirect.action = window.location.pathname + window.location.hash;\n                    document.forms.redirect.submit();\n                }\n\n                const Clerk = window.Clerk;\n                try {\n                    await Clerk.load({\n                        isSatellite: ${isSatellite},\n                        isInterstitial: ${true},\n                        signInUrl: ${signInUrl ? `'${signInUrl}'` : void 0}\n                    });\n                    if(Clerk.loaded){\n                      if(window.location.href.indexOf(\"#\") === -1){\n                        window.location.href = window.location.href;\n                      } else if (window.navigator.userAgent.toLowerCase().includes(\"firefox/\")){\n                          formRedirect();\n                      } else {\n                          window.location.reload();\n                      }\n                    }\n                } catch (err) {\n                    console.error('Clerk: ', err);\n                }\n            };\n            (() => {\n                const script = document.createElement('script');\n                ${publishableKey ? `script.setAttribute('data-clerk-publishable-key', '${publishableKey}');` : `script.setAttribute('data-clerk-frontend-api', '${frontendApi}');`}\n\n                ${domain ? `script.setAttribute('data-clerk-domain', '${domain}');` : \"\"}\n                ${proxyUrl ? `script.setAttribute('data-clerk-proxy-url', '${proxyUrl}')` : \"\"};\n                script.async = true;\n                script.src = '${clerkJSUrl || (0,_clerk_shared_url__WEBPACK_IMPORTED_MODULE_1__.getScriptUrl)(proxyUrl || domainOnlyInProd || frontendApi, {\n        pkgVersion,\n        clerkJSVersion\n    })}';\n                script.crossOrigin = 'anonymous';\n                script.addEventListener('load', startClerk);\n                document.body.appendChild(script);\n            })();\n        </script>\n    </body>\n`;\n}\nasync function loadInterstitialFromBAPI(options) {\n    if (options.frontendApi) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    if (options.pkgVersion) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"pkgVersion\", \"Use `clerkJSVersion` instead.\");\n    }\n    options.frontendApi = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.parsePublishableKey)(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n    const url = buildPublicInterstitialUrl(options);\n    const response = await (0,_clerk_shared_callWithRetry__WEBPACK_IMPORTED_MODULE_2__.callWithRetry)(()=>runtime_default.fetch(buildPublicInterstitialUrl(options), {\n            method: \"GET\",\n            headers: {\n                \"Clerk-Backend-SDK\": options.userAgent || USER_AGENT\n            }\n        }));\n    if (!response.ok) {\n        throw new TokenVerificationError({\n            action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n            message: `Error loading Clerk Interstitial from ${url} with code=${response.status}`,\n            reason: \"interstitial-remote-failed-to-load\" /* RemoteInterstitialFailedToLoad */ \n        });\n    }\n    return response.text();\n}\nfunction buildPublicInterstitialUrl(options) {\n    if (options.frontendApi) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    options.frontendApi = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.parsePublishableKey)(options.publishableKey)?.frontendApi || options.frontendApi || \"\";\n    const { apiUrl, frontendApi, pkgVersion, clerkJSVersion, publishableKey, proxyUrl, isSatellite, domain, signInUrl } = options;\n    const url = new URL(apiUrl);\n    url.pathname = joinPaths(url.pathname, API_VERSION, \"/public/interstitial\");\n    url.searchParams.append(\"clerk_js_version\", clerkJSVersion || (0,_clerk_shared_url__WEBPACK_IMPORTED_MODULE_1__.getClerkJsMajorVersionOrTag)(frontendApi, pkgVersion));\n    if (publishableKey) {\n        url.searchParams.append(\"publishable_key\", publishableKey);\n    } else {\n        url.searchParams.append(\"frontend_api\", frontendApi);\n    }\n    if (proxyUrl) {\n        url.searchParams.append(\"proxy_url\", proxyUrl);\n    }\n    if (isSatellite) {\n        url.searchParams.append(\"is_satellite\", \"true\");\n    }\n    url.searchParams.append(\"sign_in_url\", signInUrl || \"\");\n    if (!isDevOrStagingUrl(options.frontendApi)) {\n        url.searchParams.append(\"use_domain_for_script\", \"true\");\n    }\n    if (domain) {\n        url.searchParams.append(\"domain\", domain);\n    }\n    return url.href;\n}\n// src/util/IsomorphicRequest.ts\n\n// src/utils.ts\nvar getHeader = (req, key)=>req.headers.get(key);\nvar getFirstValueFromHeader = (value)=>value?.split(\",\")[0];\nvar buildRequestUrl = (request, path)=>{\n    const initialUrl = new URL(request.url);\n    const forwardedProto = getHeader(request, constants.Headers.ForwardedProto);\n    const forwardedHost = getHeader(request, constants.Headers.ForwardedHost);\n    const host = getHeader(request, constants.Headers.Host);\n    const protocol = initialUrl.protocol;\n    const base = buildOrigin({\n        protocol,\n        forwardedProto,\n        forwardedHost,\n        host: host || initialUrl.host\n    });\n    return new URL(path || initialUrl.pathname, base);\n};\nvar buildOrigin = ({ protocol, forwardedProto, forwardedHost, host })=>{\n    const resolvedHost = getFirstValueFromHeader(forwardedHost) ?? host;\n    const resolvedProtocol = getFirstValueFromHeader(forwardedProto) ?? protocol?.replace(/[:/]/, \"\");\n    if (!resolvedHost || !resolvedProtocol) {\n        return \"\";\n    }\n    return `${resolvedProtocol}://${resolvedHost}`;\n};\n// src/util/IsomorphicRequest.ts\nvar createIsomorphicRequest = (cb)=>{\n    const req = cb(runtime_default.Request, runtime_default.Headers);\n    const headersGeneratedURL = buildRequestUrl(req);\n    return new runtime_default.Request(headersGeneratedURL, req);\n};\nvar buildRequest2 = (req)=>{\n    if (!req) {\n        return {};\n    }\n    const cookies = parseIsomorphicRequestCookies(req);\n    const headers = getHeaderFromIsomorphicRequest(req);\n    const searchParams = getSearchParamsFromIsomorphicRequest(req);\n    return {\n        cookies,\n        headers,\n        searchParams\n    };\n};\nvar decode = (str)=>{\n    if (!str) {\n        return str;\n    }\n    return str.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);\n};\nvar parseIsomorphicRequestCookies = (req)=>{\n    const cookies = req.headers && req.headers?.get(\"cookie\") ? (0,cookie__WEBPACK_IMPORTED_MODULE_9__.parse)(req.headers.get(\"cookie\")) : {};\n    return (key)=>{\n        const value = cookies?.[key];\n        if (value === void 0) {\n            return void 0;\n        }\n        return decode(value);\n    };\n};\nvar getHeaderFromIsomorphicRequest = (req)=>(key)=>req?.headers?.get(key) || void 0;\nvar getSearchParamsFromIsomorphicRequest = (req)=>req?.url ? new URL(req.url)?.searchParams : void 0;\nvar stripAuthorizationHeader = (authValue)=>{\n    return authValue?.replace(\"Bearer \", \"\");\n};\n// src/tokens/authStatus.ts\nvar AuthStatus = /* @__PURE__ */ ((AuthStatus2)=>{\n    AuthStatus2[\"SignedIn\"] = \"signed-in\";\n    AuthStatus2[\"SignedOut\"] = \"signed-out\";\n    AuthStatus2[\"Interstitial\"] = \"interstitial\";\n    AuthStatus2[\"Unknown\"] = \"unknown\";\n    return AuthStatus2;\n})(AuthStatus || {});\nasync function signedIn(options, sessionClaims) {\n    const { apiKey, secretKey, apiUrl, apiVersion, cookieToken, frontendApi, proxyUrl, publishableKey, domain, isSatellite, headerToken, loadSession, loadUser, loadOrganization, signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl, token } = options;\n    const { sid: sessionId, org_id: orgId, sub: userId } = sessionClaims;\n    const { sessions, users, organizations } = createBackendApiClient({\n        apiKey,\n        secretKey,\n        apiUrl,\n        apiVersion\n    });\n    const [sessionResp, userResp, organizationResp] = await Promise.all([\n        loadSession ? sessions.getSession(sessionId) : Promise.resolve(void 0),\n        loadUser ? users.getUser(userId) : Promise.resolve(void 0),\n        loadOrganization && orgId ? organizations.getOrganization({\n            organizationId: orgId\n        }) : Promise.resolve(void 0)\n    ]);\n    const session = sessionResp;\n    const user = userResp;\n    const organization = organizationResp;\n    const authObject = signedInAuthObject(sessionClaims, {\n        secretKey,\n        apiKey,\n        apiUrl,\n        apiVersion,\n        token: cookieToken || headerToken || \"\",\n        session,\n        user,\n        organization\n    }, {\n        ...options,\n        status: \"signed-in\" /* SignedIn */ \n    });\n    return {\n        status: \"signed-in\" /* SignedIn */ ,\n        reason: null,\n        message: null,\n        frontendApi,\n        proxyUrl,\n        publishableKey,\n        domain,\n        isSatellite,\n        signInUrl,\n        signUpUrl,\n        afterSignInUrl,\n        afterSignUpUrl,\n        isSignedIn: true,\n        isInterstitial: false,\n        isUnknown: false,\n        toAuth: ()=>authObject,\n        token\n    };\n}\nfunction signedOut(options, reason, message = \"\") {\n    const { frontendApi, publishableKey, proxyUrl, isSatellite, domain, signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = options;\n    return {\n        status: \"signed-out\" /* SignedOut */ ,\n        reason,\n        message,\n        frontendApi,\n        proxyUrl,\n        publishableKey,\n        isSatellite,\n        domain,\n        signInUrl,\n        signUpUrl,\n        afterSignInUrl,\n        afterSignUpUrl,\n        isSignedIn: false,\n        isInterstitial: false,\n        isUnknown: false,\n        toAuth: ()=>signedOutAuthObject({\n                ...options,\n                status: \"signed-out\" /* SignedOut */ ,\n                reason,\n                message\n            }),\n        token: null\n    };\n}\nfunction interstitial(options, reason, message = \"\") {\n    const { frontendApi, publishableKey, proxyUrl, isSatellite, domain, signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = options;\n    return {\n        status: \"interstitial\" /* Interstitial */ ,\n        reason,\n        message,\n        frontendApi,\n        publishableKey,\n        isSatellite,\n        domain,\n        proxyUrl,\n        signInUrl,\n        signUpUrl,\n        afterSignInUrl,\n        afterSignUpUrl,\n        isSignedIn: false,\n        isInterstitial: true,\n        isUnknown: false,\n        toAuth: ()=>null,\n        token: null\n    };\n}\nfunction unknownState(options, reason, message = \"\") {\n    const { frontendApi, publishableKey, isSatellite, domain, signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = options;\n    return {\n        status: \"unknown\" /* Unknown */ ,\n        reason,\n        message,\n        frontendApi,\n        publishableKey,\n        isSatellite,\n        domain,\n        signInUrl,\n        signUpUrl,\n        afterSignInUrl,\n        afterSignUpUrl,\n        isSignedIn: false,\n        isInterstitial: false,\n        isUnknown: true,\n        toAuth: ()=>null,\n        token: null\n    };\n}\n// src/util/request.ts\nfunction checkCrossOrigin({ originURL, host, forwardedHost, forwardedProto }) {\n    const finalURL = buildOrigin({\n        forwardedProto,\n        forwardedHost,\n        protocol: originURL.protocol,\n        host\n    });\n    return finalURL && new URL(finalURL).origin !== originURL.origin;\n}\nvar getErrorObjectByCode = (errors, code)=>{\n    if (!errors) {\n        return null;\n    }\n    return errors.find((err)=>err.code === code);\n};\n// src/tokens/jwt/verifyJwt.ts\n\n// src/util/rfc4648.ts\nvar base64url = {\n    parse (string, opts) {\n        return parse2(string, base64UrlEncoding, opts);\n    },\n    stringify (data, opts) {\n        return stringify(data, base64UrlEncoding, opts);\n    }\n};\nvar base64UrlEncoding = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bits: 6\n};\nfunction parse2(string, encoding, opts = {}) {\n    if (!encoding.codes) {\n        encoding.codes = {};\n        for(let i = 0; i < encoding.chars.length; ++i){\n            encoding.codes[encoding.chars[i]] = i;\n        }\n    }\n    if (!opts.loose && string.length * encoding.bits & 7) {\n        throw new SyntaxError(\"Invalid padding\");\n    }\n    let end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end;\n        if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n            throw new SyntaxError(\"Invalid padding\");\n        }\n    }\n    const out = new (opts.out ?? Uint8Array)(end * encoding.bits / 8 | 0);\n    let bits = 0;\n    let buffer = 0;\n    let written = 0;\n    for(let i = 0; i < end; ++i){\n        const value = encoding.codes[string[i]];\n        if (value === void 0) {\n            throw new SyntaxError(\"Invalid character \" + string[i]);\n        }\n        buffer = buffer << encoding.bits | value;\n        bits += encoding.bits;\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 255 & buffer >> bits;\n        }\n    }\n    if (bits >= encoding.bits || 255 & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n}\nfunction stringify(data, encoding, opts = {}) {\n    const { pad = true } = opts;\n    const mask = (1 << encoding.bits) - 1;\n    let out = \"\";\n    let bits = 0;\n    let buffer = 0;\n    for(let i = 0; i < data.length; ++i){\n        buffer = buffer << 8 | 255 & data[i];\n        bits += 8;\n        while(bits > encoding.bits){\n            bits -= encoding.bits;\n            out += encoding.chars[mask & buffer >> bits];\n        }\n    }\n    if (bits) {\n        out += encoding.chars[mask & buffer << encoding.bits - bits];\n    }\n    if (pad) {\n        while(out.length * encoding.bits & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n}\n// src/tokens/jwt/algorithms.ts\nvar algToHash = {\n    RS256: \"SHA-256\",\n    RS384: \"SHA-384\",\n    RS512: \"SHA-512\"\n};\nvar RSA_ALGORITHM_NAME = \"RSASSA-PKCS1-v1_5\";\nvar jwksAlgToCryptoAlg = {\n    RS256: RSA_ALGORITHM_NAME,\n    RS384: RSA_ALGORITHM_NAME,\n    RS512: RSA_ALGORITHM_NAME\n};\nvar algs = Object.keys(algToHash);\nfunction getCryptoAlgorithm(algorithmName) {\n    const hash = algToHash[algorithmName];\n    const name = jwksAlgToCryptoAlg[algorithmName];\n    if (!hash || !name) {\n        throw new Error(`Unsupported algorithm ${algorithmName}, expected one of ${algs.join(\",\")}.`);\n    }\n    return {\n        hash: {\n            name: algToHash[algorithmName]\n        },\n        name: jwksAlgToCryptoAlg[algorithmName]\n    };\n}\n// src/tokens/jwt/assertions.ts\nvar isArrayString = (s)=>{\n    return Array.isArray(s) && s.length > 0 && s.every((a)=>typeof a === \"string\");\n};\nvar assertAudienceClaim = (aud, audience)=>{\n    const audienceList = [\n        audience\n    ].flat().filter((a)=>!!a);\n    const audList = [\n        aud\n    ].flat().filter((a)=>!!a);\n    const shouldVerifyAudience = audienceList.length > 0 && audList.length > 0;\n    if (!shouldVerifyAudience) {\n        return;\n    }\n    if (typeof aud === \"string\") {\n        if (!audienceList.includes(aud)) {\n            throw new TokenVerificationError({\n                action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n                reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n                message: `Invalid JWT audience claim (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(audienceList)}\".`\n            });\n        }\n    } else if (isArrayString(aud)) {\n        if (!aud.some((a)=>audienceList.includes(a))) {\n            throw new TokenVerificationError({\n                action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n                reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n                message: `Invalid JWT audience claim array (aud) ${JSON.stringify(aud)}. Is not included in \"${JSON.stringify(audienceList)}\".`\n            });\n        }\n    }\n};\nvar assertHeaderType = (typ)=>{\n    if (typeof typ === \"undefined\") {\n        return;\n    }\n    if (typ !== \"JWT\") {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-invalid\" /* TokenInvalid */ ,\n            message: `Invalid JWT type ${JSON.stringify(typ)}. Expected \"JWT\".`\n        });\n    }\n};\nvar assertHeaderAlgorithm = (alg)=>{\n    if (!algs.includes(alg)) {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-invalid-algorithm\" /* TokenInvalidAlgorithm */ ,\n            message: `Invalid JWT algorithm ${JSON.stringify(alg)}. Supported: ${algs}.`\n        });\n    }\n};\nvar assertSubClaim = (sub)=>{\n    if (typeof sub !== \"string\") {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n            message: `Subject claim (sub) is required and must be a string. Received ${JSON.stringify(sub)}.`\n        });\n    }\n};\nvar assertAuthorizedPartiesClaim = (azp, authorizedParties)=>{\n    if (!azp || !authorizedParties || authorizedParties.length === 0) {\n        return;\n    }\n    if (!authorizedParties.includes(azp)) {\n        throw new TokenVerificationError({\n            reason: \"token-invalid-authorized-parties\" /* TokenInvalidAuthorizedParties */ ,\n            message: `Invalid JWT Authorized party claim (azp) ${JSON.stringify(azp)}. Expected \"${authorizedParties}\".`\n        });\n    }\n};\nvar assertIssuerClaim = (iss, issuer)=>{\n    if (typeof issuer === \"function\" && !issuer(iss)) {\n        throw new TokenVerificationError({\n            reason: \"token-invalid-issuer\" /* TokenInvalidIssuer */ ,\n            message: \"Failed JWT issuer resolver. Make sure that the resolver returns a truthy value.\"\n        });\n    } else if (typeof issuer === \"string\" && iss && iss !== issuer) {\n        throw new TokenVerificationError({\n            reason: \"token-invalid-issuer\" /* TokenInvalidIssuer */ ,\n            message: `Invalid JWT issuer claim (iss) ${JSON.stringify(iss)}. Expected \"${issuer}\".`\n        });\n    }\n};\nvar assertExpirationClaim = (exp, clockSkewInMs)=>{\n    if (typeof exp !== \"number\") {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n            message: `Invalid JWT expiry date claim (exp) ${JSON.stringify(exp)}. Expected number.`\n        });\n    }\n    const currentDate = new Date(Date.now());\n    const expiryDate = /* @__PURE__ */ new Date(0);\n    expiryDate.setUTCSeconds(exp);\n    const expired = expiryDate.getTime() <= currentDate.getTime() - clockSkewInMs;\n    if (expired) {\n        throw new TokenVerificationError({\n            reason: \"token-expired\" /* TokenExpired */ ,\n            message: `JWT is expired. Expiry date: ${expiryDate.toUTCString()}, Current date: ${currentDate.toUTCString()}.`\n        });\n    }\n};\nvar assertActivationClaim = (nbf, clockSkewInMs)=>{\n    if (typeof nbf === \"undefined\") {\n        return;\n    }\n    if (typeof nbf !== \"number\") {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n            message: `Invalid JWT not before date claim (nbf) ${JSON.stringify(nbf)}. Expected number.`\n        });\n    }\n    const currentDate = new Date(Date.now());\n    const notBeforeDate = /* @__PURE__ */ new Date(0);\n    notBeforeDate.setUTCSeconds(nbf);\n    const early = notBeforeDate.getTime() > currentDate.getTime() + clockSkewInMs;\n    if (early) {\n        throw new TokenVerificationError({\n            reason: \"token-not-active-yet\" /* TokenNotActiveYet */ ,\n            message: `JWT cannot be used prior to not before date claim (nbf). Not before date: ${notBeforeDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`\n        });\n    }\n};\nvar assertIssuedAtClaim = (iat, clockSkewInMs)=>{\n    if (typeof iat === \"undefined\") {\n        return;\n    }\n    if (typeof iat !== \"number\") {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n            message: `Invalid JWT issued at date claim (iat) ${JSON.stringify(iat)}. Expected number.`\n        });\n    }\n    const currentDate = new Date(Date.now());\n    const issuedAtDate = /* @__PURE__ */ new Date(0);\n    issuedAtDate.setUTCSeconds(iat);\n    const postIssued = issuedAtDate.getTime() > currentDate.getTime() + clockSkewInMs;\n    if (postIssued) {\n        throw new TokenVerificationError({\n            reason: \"token-not-active-yet\" /* TokenNotActiveYet */ ,\n            message: `JWT issued at date claim (iat) is in the future. Issued at date: ${issuedAtDate.toUTCString()}; Current date: ${currentDate.toUTCString()};`\n        });\n    }\n};\n// src/tokens/jwt/cryptoKeys.ts\n\nfunction pemToBuffer(secret) {\n    const trimmed = secret.replace(/-----BEGIN.*?-----/g, \"\").replace(/-----END.*?-----/g, \"\").replace(/\\s/g, \"\");\n    const decoded = (0,_clerk_shared_isomorphicAtob__WEBPACK_IMPORTED_MODULE_10__.isomorphicAtob)(trimmed);\n    const buffer = new ArrayBuffer(decoded.length);\n    const bufView = new Uint8Array(buffer);\n    for(let i = 0, strLen = decoded.length; i < strLen; i++){\n        bufView[i] = decoded.charCodeAt(i);\n    }\n    return bufView;\n}\nfunction importKey(key, algorithm, keyUsage) {\n    if (typeof key === \"object\") {\n        return runtime_default.crypto.subtle.importKey(\"jwk\", key, algorithm, false, [\n            keyUsage\n        ]);\n    }\n    const keyData = pemToBuffer(key);\n    const format = keyUsage === \"sign\" ? \"pkcs8\" : \"spki\";\n    return runtime_default.crypto.subtle.importKey(format, keyData, algorithm, false, [\n        keyUsage\n    ]);\n}\n// src/tokens/jwt/verifyJwt.ts\nvar DEFAULT_CLOCK_SKEW_IN_SECONDS = 5 * 1e3;\nasync function hasValidSignature(jwt, key) {\n    const { header, signature, raw } = jwt;\n    const encoder = new TextEncoder();\n    const data = encoder.encode([\n        raw.header,\n        raw.payload\n    ].join(\".\"));\n    const algorithm = getCryptoAlgorithm(header.alg);\n    const cryptoKey = await importKey(key, algorithm, \"verify\");\n    return runtime_default.crypto.subtle.verify(algorithm.name, cryptoKey, signature, data);\n}\nfunction decodeJwt(token) {\n    const tokenParts = (token || \"\").toString().split(\".\");\n    if (tokenParts.length !== 3) {\n        throw new TokenVerificationError({\n            reason: \"token-invalid\" /* TokenInvalid */ ,\n            message: `Invalid JWT form. A JWT consists of three parts separated by dots.`\n        });\n    }\n    const [rawHeader, rawPayload, rawSignature] = tokenParts;\n    const decoder = new TextDecoder();\n    const header = JSON.parse(decoder.decode(base64url.parse(rawHeader, {\n        loose: true\n    })));\n    const payload = JSON.parse(decoder.decode(base64url.parse(rawPayload, {\n        loose: true\n    })));\n    const signature = base64url.parse(rawSignature, {\n        loose: true\n    });\n    (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedObjectProperty)(payload, \"orgs\", 'Add orgs to your session token using the \"user.organizations\" shortcode in JWT Templates instead.', \"decodeJwt:orgs\");\n    return {\n        header,\n        payload,\n        signature,\n        raw: {\n            header: rawHeader,\n            payload: rawPayload,\n            signature: rawSignature,\n            text: token\n        }\n    };\n}\nasync function verifyJwt(token, { audience, authorizedParties, clockSkewInSeconds, clockSkewInMs, issuer, key }) {\n    if (clockSkewInSeconds) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"clockSkewInSeconds\", \"Use `clockSkewInMs` instead.\");\n    }\n    const clockSkew = clockSkewInMs || clockSkewInSeconds || DEFAULT_CLOCK_SKEW_IN_SECONDS;\n    const decoded = decodeJwt(token);\n    const { header, payload } = decoded;\n    const { typ, alg } = header;\n    assertHeaderType(typ);\n    assertHeaderAlgorithm(alg);\n    const { azp, sub, aud, iss, iat, exp, nbf } = payload;\n    assertSubClaim(sub);\n    assertAudienceClaim([\n        aud\n    ], [\n        audience\n    ]);\n    assertAuthorizedPartiesClaim(azp, authorizedParties);\n    assertIssuerClaim(iss, issuer);\n    assertExpirationClaim(exp, clockSkew);\n    assertActivationClaim(nbf, clockSkew);\n    assertIssuedAtClaim(iat, clockSkew);\n    let signatureValid;\n    try {\n        signatureValid = await hasValidSignature(decoded, key);\n    } catch (err) {\n        throw new TokenVerificationError({\n            action: \"Make sure that this is a valid Clerk generate JWT.\" /* EnsureClerkJWT */ ,\n            reason: \"token-verification-failed\" /* TokenVerificationFailed */ ,\n            message: `Error verifying JWT signature. ${err}`\n        });\n    }\n    if (!signatureValid) {\n        throw new TokenVerificationError({\n            reason: \"token-invalid-signature\" /* TokenInvalidSignature */ ,\n            message: \"JWT signature is invalid.\"\n        });\n    }\n    return payload;\n}\n// src/tokens/jwt/signJwt.ts\nfunction encodeJwtData(value) {\n    const stringified = JSON.stringify(value);\n    const encoder = new TextEncoder();\n    const encoded = encoder.encode(stringified);\n    return base64url.stringify(encoded, {\n        pad: false\n    });\n}\nasync function signJwt(payload, key, options) {\n    if (!options.algorithm) {\n        throw new Error(\"No algorithm specified\");\n    }\n    const encoder = new TextEncoder();\n    const algorithm = getCryptoAlgorithm(options.algorithm);\n    if (!algorithm) {\n        throw new Error(`Unsupported algorithm ${options.algorithm}`);\n    }\n    const cryptoKey = await importKey(key, algorithm, \"sign\");\n    const header = options.header || {\n        typ: \"JWT\"\n    };\n    header.alg = options.algorithm;\n    payload.iat = Math.floor(Date.now() / 1e3);\n    const encodedHeader = encodeJwtData(header);\n    const encodedPayload = encodeJwtData(payload);\n    const firstPart = `${encodedHeader}.${encodedPayload}`;\n    const signature = await runtime_default.crypto.subtle.sign(algorithm, cryptoKey, encoder.encode(firstPart));\n    return `${firstPart}.${base64url.stringify(new Uint8Array(signature), {\n        pad: false\n    })}`;\n}\n// src/tokens/keys.ts\nvar cache = {};\nvar lastUpdatedAt = 0;\nfunction getFromCache(kid) {\n    return cache[kid];\n}\nfunction getCacheValues() {\n    return Object.values(cache);\n}\nfunction setInCache(jwk, jwksCacheTtlInMs = 1e3 * 60 * 60) {\n    cache[jwk.kid] = jwk;\n    lastUpdatedAt = Date.now();\n    if (jwksCacheTtlInMs >= 0) {\n        setTimeout(()=>{\n            if (jwk) {\n                delete cache[jwk.kid];\n            } else {\n                cache = {};\n            }\n        }, jwksCacheTtlInMs);\n    }\n}\nvar LocalJwkKid = \"local\";\nvar PEM_HEADER = \"-----BEGIN PUBLIC KEY-----\";\nvar PEM_TRAILER = \"-----END PUBLIC KEY-----\";\nvar RSA_PREFIX = \"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA\";\nvar RSA_SUFFIX = \"IDAQAB\";\nfunction loadClerkJWKFromLocal(localKey) {\n    if (!getFromCache(LocalJwkKid)) {\n        if (!localKey) {\n            throw new TokenVerificationError({\n                action: \"Set the CLERK_JWT_KEY environment variable.\" /* SetClerkJWTKey */ ,\n                message: \"Missing local JWK.\",\n                reason: \"jwk-local-missing\" /* LocalJWKMissing */ \n            });\n        }\n        const modulus = localKey.replace(/(\\r\\n|\\n|\\r)/gm, \"\").replace(PEM_HEADER, \"\").replace(PEM_TRAILER, \"\").replace(RSA_PREFIX, \"\").replace(RSA_SUFFIX, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n        setInCache({\n            kid: \"local\",\n            kty: \"RSA\",\n            alg: \"RS256\",\n            n: modulus,\n            e: \"AQAB\"\n        }, -1);\n    }\n    return getFromCache(LocalJwkKid);\n}\nasync function loadClerkJWKFromRemote({ apiKey, secretKey, apiUrl = API_URL, apiVersion = API_VERSION, issuer, kid, jwksCacheTtlInMs = 1e3 * 60 * 60, // 1 hour,\nskipJwksCache }) {\n    const shouldRefreshCache = !getFromCache(kid) && reachedMaxCacheUpdatedAt();\n    if (skipJwksCache || shouldRefreshCache) {\n        let fetcher;\n        const key = secretKey || apiKey;\n        if (key) {\n            fetcher = ()=>fetchJWKSFromBAPI(apiUrl, key, apiVersion);\n        } else if (issuer) {\n            fetcher = ()=>fetchJWKSFromFAPI(issuer);\n        } else {\n            throw new TokenVerificationError({\n                action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n                message: \"Failed to load JWKS from Clerk Backend or Frontend API.\",\n                reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */ \n            });\n        }\n        const { keys } = await (0,_clerk_shared_callWithRetry__WEBPACK_IMPORTED_MODULE_2__.callWithRetry)(fetcher);\n        if (!keys || !keys.length) {\n            throw new TokenVerificationError({\n                action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n                message: \"The JWKS endpoint did not contain any signing keys. Contact support@clerk.com.\",\n                reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */ \n            });\n        }\n        keys.forEach((key2)=>setInCache(key2, jwksCacheTtlInMs));\n    }\n    const jwk = getFromCache(kid);\n    if (!jwk) {\n        const cacheValues = getCacheValues();\n        const jwkKeys = cacheValues.map((jwk2)=>jwk2.kid).join(\", \");\n        throw new TokenVerificationError({\n            action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n            message: `Unable to find a signing key in JWKS that matches the kid='${kid}' of the provided session token. Please make sure that the __session cookie or the HTTP authorization header contain a Clerk-generated session JWT.${jwkKeys ? ` The following kid are available: ${jwkKeys}` : \"\"}`,\n            reason: \"jwk-remote-missing\" /* RemoteJWKMissing */ \n        });\n    }\n    return jwk;\n}\nasync function fetchJWKSFromFAPI(issuer) {\n    const url = new URL(issuer);\n    url.pathname = joinPaths(url.pathname, \".well-known/jwks.json\");\n    const response = await runtime_default.fetch(url.href);\n    if (!response.ok) {\n        throw new TokenVerificationError({\n            action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n            message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n            reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */ \n        });\n    }\n    return response.json();\n}\nasync function fetchJWKSFromBAPI(apiUrl, key, apiVersion) {\n    if (!key) {\n        throw new TokenVerificationError({\n            action: \"Set the CLERK_SECRET_KEY or CLERK_API_KEY environment variable.\" /* SetClerkSecretKeyOrAPIKey */ ,\n            message: \"Missing Clerk Secret Key or API Key. Go to https://dashboard.clerk.com and get your key for your instance.\",\n            reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */ \n        });\n    }\n    const url = new URL(apiUrl);\n    url.pathname = joinPaths(url.pathname, apiVersion, \"/jwks\");\n    const response = await runtime_default.fetch(url.href, {\n        headers: {\n            Authorization: `Bearer ${key}`,\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    if (!response.ok) {\n        const json = await response.json();\n        const invalidSecretKeyError = getErrorObjectByCode(json?.errors, \"clerk_key_invalid\" /* InvalidSecretKey */ );\n        if (invalidSecretKeyError) {\n            const reason = \"secret-key-invalid\" /* InvalidSecretKey */ ;\n            throw new TokenVerificationError({\n                action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n                message: invalidSecretKeyError.message,\n                reason\n            });\n        }\n        throw new TokenVerificationError({\n            action: \"Contact support@clerk.com\" /* ContactSupport */ ,\n            message: `Error loading Clerk JWKS from ${url.href} with code=${response.status}`,\n            reason: \"jwk-remote-failed-to-load\" /* RemoteJWKFailedToLoad */ \n        });\n    }\n    return response.json();\n}\nfunction reachedMaxCacheUpdatedAt() {\n    return Date.now() - lastUpdatedAt >= MAX_CACHE_LAST_UPDATED_AT_SECONDS * 1e3;\n}\n// src/tokens/verify.ts\nasync function verifyToken(token, options) {\n    const { apiKey, secretKey, apiUrl, apiVersion, audience, authorizedParties, clockSkewInSeconds, clockSkewInMs, issuer, jwksCacheTtlInMs, jwtKey, skipJwksCache } = options;\n    if (options.apiKey) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"apiKey\", \"Use `secretKey` instead.\");\n    }\n    const { header } = decodeJwt(token);\n    const { kid } = header;\n    let key;\n    if (jwtKey) {\n        key = loadClerkJWKFromLocal(jwtKey);\n    } else if (typeof issuer === \"string\") {\n        key = await loadClerkJWKFromRemote({\n            issuer,\n            kid,\n            jwksCacheTtlInMs,\n            skipJwksCache\n        });\n    } else if (apiKey || secretKey) {\n        key = await loadClerkJWKFromRemote({\n            apiKey,\n            secretKey,\n            apiUrl,\n            apiVersion,\n            kid,\n            jwksCacheTtlInMs,\n            skipJwksCache\n        });\n    } else {\n        throw new TokenVerificationError({\n            action: \"Set the CLERK_JWT_KEY environment variable.\" /* SetClerkJWTKey */ ,\n            message: \"Failed to resolve JWK during verification.\",\n            reason: \"jwk-failed-to-resolve\" /* JWKFailedToResolve */ \n        });\n    }\n    return await verifyJwt(token, {\n        audience,\n        authorizedParties,\n        clockSkewInSeconds,\n        clockSkewInMs,\n        key,\n        issuer\n    });\n}\n// src/tokens/interstitialRule.ts\nvar shouldRedirectToSatelliteUrl = (qp)=>!!qp?.get(\"__clerk_satellite_url\");\nvar hasJustSynced = (qp)=>qp?.get(\"__clerk_synced\") === \"true\";\nvar VALID_USER_AGENTS = /^Mozilla\\/|(Amazon CloudFront)/;\nvar isBrowser = (userAgent)=>VALID_USER_AGENTS.test(userAgent || \"\");\nvar nonBrowserRequestInDevRule = (options)=>{\n    const { apiKey, secretKey, userAgent } = options;\n    const key = secretKey || apiKey || \"\";\n    if ((0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isDevelopmentFromApiKey)(key) && !isBrowser(userAgent)) {\n        return signedOut(options, \"header-missing-non-browser\" /* HeaderMissingNonBrowser */ );\n    }\n    return void 0;\n};\nvar crossOriginRequestWithoutHeader = (options)=>{\n    const { origin, host, forwardedHost, forwardedProto } = options;\n    const isCrossOrigin = origin && checkCrossOrigin({\n        originURL: new URL(origin),\n        host,\n        forwardedHost,\n        forwardedProto\n    });\n    if (isCrossOrigin) {\n        return signedOut(options, \"header-missing-cors\" /* HeaderMissingCORS */ );\n    }\n    return void 0;\n};\nvar isPrimaryInDevAndRedirectsToSatellite = (options)=>{\n    const { apiKey, secretKey, isSatellite, searchParams } = options;\n    const key = secretKey || apiKey || \"\";\n    const isDev = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isDevelopmentFromApiKey)(key);\n    if (isDev && !isSatellite && shouldRedirectToSatelliteUrl(searchParams)) {\n        return interstitial(options, \"primary-responds-to-syncing\" /* PrimaryRespondsToSyncing */ );\n    }\n    return void 0;\n};\nvar potentialFirstLoadInDevWhenUATMissing = (options)=>{\n    const { apiKey, secretKey, clientUat } = options;\n    const key = secretKey || apiKey || \"\";\n    const res = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isDevelopmentFromApiKey)(key);\n    if (res && !clientUat) {\n        return interstitial(options, \"uat-missing\" /* CookieUATMissing */ );\n    }\n    return void 0;\n};\nvar potentialRequestAfterSignInOrOutFromClerkHostedUiInDev = (options)=>{\n    const { apiKey, secretKey, referrer, host, forwardedHost, forwardedProto } = options;\n    const crossOriginReferrer = referrer && checkCrossOrigin({\n        originURL: new URL(referrer),\n        host,\n        forwardedHost,\n        forwardedProto\n    });\n    const key = secretKey || apiKey || \"\";\n    if ((0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isDevelopmentFromApiKey)(key) && crossOriginReferrer) {\n        return interstitial(options, \"cross-origin-referrer\" /* CrossOriginReferrer */ );\n    }\n    return void 0;\n};\nvar potentialFirstRequestOnProductionEnvironment = (options)=>{\n    const { apiKey, secretKey, clientUat, cookieToken } = options;\n    const key = secretKey || apiKey || \"\";\n    if ((0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isProductionFromApiKey)(key) && !clientUat && !cookieToken) {\n        return signedOut(options, \"cookie-and-uat-missing\" /* CookieAndUATMissing */ );\n    }\n    return void 0;\n};\nvar isNormalSignedOutState = (options)=>{\n    const { clientUat } = options;\n    if (clientUat === \"0\") {\n        return signedOut(options, \"standard-signed-out\" /* StandardSignedOut */ );\n    }\n    return void 0;\n};\nvar hasPositiveClientUatButCookieIsMissing = (options)=>{\n    const { clientUat, cookieToken } = options;\n    if (clientUat && Number.parseInt(clientUat) > 0 && !cookieToken) {\n        return interstitial(options, \"cookie-missing\" /* CookieMissing */ );\n    }\n    return void 0;\n};\nvar hasValidHeaderToken = async (options)=>{\n    const { headerToken } = options;\n    const sessionClaims = await verifyRequestState(options, headerToken);\n    return await signedIn({\n        ...options,\n        token: headerToken\n    }, sessionClaims);\n};\nvar hasValidCookieToken = async (options)=>{\n    const { cookieToken, clientUat } = options;\n    const sessionClaims = await verifyRequestState(options, cookieToken);\n    const state = await signedIn({\n        ...options,\n        token: cookieToken\n    }, sessionClaims);\n    const jwt = state.toAuth().sessionClaims;\n    const cookieTokenIsOutdated = jwt.iat < Number.parseInt(clientUat);\n    if (!clientUat || cookieTokenIsOutdated) {\n        return interstitial(options, \"cookie-outdated\" /* CookieOutDated */ );\n    }\n    return state;\n};\nasync function runInterstitialRules(opts, rules) {\n    for (const rule of rules){\n        const res = await rule(opts);\n        if (res) {\n            return res;\n        }\n    }\n    return signedOut(opts, \"unexpected-error\" /* UnexpectedError */ );\n}\nasync function verifyRequestState(options, token) {\n    const { isSatellite, proxyUrl } = options;\n    let issuer;\n    if (isSatellite) {\n        issuer = null;\n    } else if (proxyUrl) {\n        issuer = proxyUrl;\n    } else {\n        issuer = (iss)=>iss.startsWith(\"https://clerk.\") || iss.includes(\".clerk.accounts\");\n    }\n    return verifyToken(token, {\n        ...options,\n        issuer\n    });\n}\nvar isSatelliteAndNeedsSyncing = (options)=>{\n    const { clientUat, isSatellite, searchParams, userAgent } = options;\n    const isSignedOut = !clientUat || clientUat === \"0\";\n    if (isSatellite && isSignedOut && !isBrowser(userAgent)) {\n        return signedOut(options, \"satellite-needs-syncing\" /* SatelliteCookieNeedsSyncing */ );\n    }\n    if (isSatellite && isSignedOut && !hasJustSynced(searchParams)) {\n        return interstitial(options, \"satellite-needs-syncing\" /* SatelliteCookieNeedsSyncing */ );\n    }\n    return void 0;\n};\n// src/tokens/request.ts\nfunction assertSignInUrlExists(signInUrl, key) {\n    if (!signInUrl && (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.isDevelopmentFromApiKey)(key)) {\n        throw new Error(`Missing signInUrl. Pass a signInUrl for dev instances if an app is satellite`);\n    }\n}\nfunction assertProxyUrlOrDomain(proxyUrlOrDomain) {\n    if (!proxyUrlOrDomain) {\n        throw new Error(`Missing domain and proxyUrl. A satellite application needs to specify a domain or a proxyUrl`);\n    }\n}\nfunction assertSignInUrlFormatAndOrigin(_signInUrl, origin) {\n    let signInUrl;\n    try {\n        signInUrl = new URL(_signInUrl);\n    } catch  {\n        throw new Error(`The signInUrl needs to have a absolute url format.`);\n    }\n    if (signInUrl.origin === origin) {\n        throw new Error(`The signInUrl needs to be on a different origin than your satellite application.`);\n    }\n}\nasync function authenticateRequest(options) {\n    const { cookies, headers, searchParams } = buildRequest2(options?.request);\n    if (options.frontendApi) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    if (options.apiKey) {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"apiKey\", \"Use `secretKey` instead.\");\n    }\n    options = {\n        ...options,\n        ...loadOptionsFromHeaders(options, headers),\n        frontendApi: (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.parsePublishableKey)(options.publishableKey)?.frontendApi || options.frontendApi,\n        apiUrl: options.apiUrl || API_URL,\n        apiVersion: options.apiVersion || API_VERSION,\n        cookieToken: options.cookieToken || cookies?.(constants.Cookies.Session),\n        clientUat: options.clientUat || cookies?.(constants.Cookies.ClientUat),\n        searchParams: options.searchParams || searchParams || void 0\n    };\n    assertValidSecretKey(options.secretKey || options.apiKey);\n    if (options.isSatellite) {\n        assertSignInUrlExists(options.signInUrl, options.secretKey || options.apiKey);\n        if (options.signInUrl && options.origin) {\n            assertSignInUrlFormatAndOrigin(options.signInUrl, options.origin);\n        }\n        assertProxyUrlOrDomain(options.proxyUrl || options.domain);\n    }\n    async function authenticateRequestWithTokenInHeader() {\n        try {\n            const state = await runInterstitialRules(options, [\n                hasValidHeaderToken\n            ]);\n            return state;\n        } catch (err) {\n            return handleError(err, \"header\");\n        }\n    }\n    async function authenticateRequestWithTokenInCookie() {\n        try {\n            const state = await runInterstitialRules(options, [\n                crossOriginRequestWithoutHeader,\n                nonBrowserRequestInDevRule,\n                isSatelliteAndNeedsSyncing,\n                isPrimaryInDevAndRedirectsToSatellite,\n                potentialFirstRequestOnProductionEnvironment,\n                potentialFirstLoadInDevWhenUATMissing,\n                potentialRequestAfterSignInOrOutFromClerkHostedUiInDev,\n                hasPositiveClientUatButCookieIsMissing,\n                isNormalSignedOutState,\n                hasValidCookieToken\n            ]);\n            return state;\n        } catch (err) {\n            return handleError(err, \"cookie\");\n        }\n    }\n    function handleError(err, tokenCarrier) {\n        if (err instanceof TokenVerificationError) {\n            err.tokenCarrier = tokenCarrier;\n            const reasonToReturnInterstitial = [\n                \"token-expired\" /* TokenExpired */ ,\n                \"token-not-active-yet\" /* TokenNotActiveYet */ \n            ].includes(err.reason);\n            if (reasonToReturnInterstitial) {\n                if (tokenCarrier === \"header\") {\n                    return unknownState(options, err.reason, err.getFullMessage());\n                }\n                return interstitial(options, err.reason, err.getFullMessage());\n            }\n            return signedOut(options, err.reason, err.getFullMessage());\n        }\n        return signedOut(options, \"unexpected-error\" /* UnexpectedError */ , err.message);\n    }\n    if (options.headerToken) {\n        return authenticateRequestWithTokenInHeader();\n    }\n    return authenticateRequestWithTokenInCookie();\n}\nvar debugRequestState = (params)=>{\n    const { frontendApi, isSignedIn, proxyUrl, isInterstitial, reason, message, publishableKey, isSatellite, domain } = params;\n    return {\n        frontendApi,\n        isSignedIn,\n        proxyUrl,\n        isInterstitial,\n        reason,\n        message,\n        publishableKey,\n        isSatellite,\n        domain\n    };\n};\nvar loadOptionsFromHeaders = (options, headers)=>{\n    if (!headers) {\n        return {};\n    }\n    return {\n        headerToken: stripAuthorizationHeader(options.headerToken || headers(constants.Headers.Authorization)),\n        origin: options.origin || headers(constants.Headers.Origin),\n        host: options.host || headers(constants.Headers.Host),\n        forwardedHost: options.forwardedHost || headers(constants.Headers.ForwardedHost),\n        forwardedPort: options.forwardedPort || headers(constants.Headers.ForwardedPort),\n        forwardedProto: options.forwardedProto || headers(constants.Headers.CloudFrontForwardedProto) || headers(constants.Headers.ForwardedProto),\n        referrer: options.referrer || headers(constants.Headers.Referrer),\n        userAgent: options.userAgent || headers(constants.Headers.UserAgent)\n    };\n};\n// src/tokens/factory.ts\nfunction createAuthenticateRequest(params) {\n    const { apiClient } = params;\n    const { apiKey: buildtimeApiKey = \"\", secretKey: buildtimeSecretKey = \"\", jwtKey: buildtimeJwtKey = \"\", apiUrl = API_URL, apiVersion = API_VERSION, frontendApi: buildtimeFrontendApi = \"\", proxyUrl: buildProxyUrl = \"\", publishableKey: buildtimePublishableKey = \"\", isSatellite: buildtimeIsSatellite = false, domain: buildtimeDomain = \"\", audience: buildtimeAudience = \"\", userAgent: buildUserAgent } = params.options;\n    const authenticateRequest2 = ({ apiKey: runtimeApiKey, secretKey: runtimeSecretKey, audience: runtimeAudience, frontendApi: runtimeFrontendApi, proxyUrl: runtimeProxyUrl, publishableKey: runtimePublishableKey, jwtKey: runtimeJwtKey, isSatellite: runtimeIsSatellite, domain: runtimeDomain, searchParams, ...rest })=>{\n        return authenticateRequest({\n            ...rest,\n            apiKey: runtimeApiKey || buildtimeApiKey,\n            secretKey: runtimeSecretKey || buildtimeSecretKey,\n            audience: runtimeAudience || buildtimeAudience,\n            apiUrl,\n            apiVersion,\n            frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n            proxyUrl: runtimeProxyUrl || buildProxyUrl,\n            publishableKey: runtimePublishableKey || buildtimePublishableKey,\n            isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n            domain: runtimeDomain || buildtimeDomain,\n            jwtKey: runtimeJwtKey || buildtimeJwtKey,\n            searchParams\n        });\n    };\n    const localInterstitial = ({ frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, proxyUrl: runtimeProxyUrl, isSatellite: runtimeIsSatellite, domain: runtimeDomain, ...rest })=>loadInterstitialFromLocal({\n            ...rest,\n            frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n            proxyUrl: runtimeProxyUrl || buildProxyUrl,\n            publishableKey: runtimePublishableKey || buildtimePublishableKey,\n            isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n            domain: runtimeDomain || buildtimeDomain\n        });\n    const remotePublicInterstitial = ({ frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, proxyUrl: runtimeProxyUrl, isSatellite: runtimeIsSatellite, domain: runtimeDomain, userAgent: runtimeUserAgent, ...rest })=>{\n        return loadInterstitialFromBAPI({\n            ...rest,\n            apiUrl,\n            frontendApi: runtimeFrontendApi || buildtimeFrontendApi,\n            publishableKey: runtimePublishableKey || buildtimePublishableKey,\n            proxyUrl: runtimeProxyUrl || buildProxyUrl,\n            isSatellite: runtimeIsSatellite || buildtimeIsSatellite,\n            domain: runtimeDomain || buildtimeDomain,\n            userAgent: runtimeUserAgent || buildUserAgent\n        });\n    };\n    const remotePublicInterstitialUrl = buildPublicInterstitialUrl;\n    const remotePrivateInterstitial = ()=>apiClient.interstitial.getInterstitial();\n    return {\n        authenticateRequest: authenticateRequest2,\n        localInterstitial,\n        remotePublicInterstitial,\n        remotePrivateInterstitial,\n        remotePublicInterstitialUrl,\n        debugRequestState\n    };\n}\n// src/redirections.ts\nvar buildUrl = (targetUrl, redirectUrl)=>{\n    let url;\n    if (!targetUrl.startsWith(\"http\")) {\n        if (!redirectUrl || !redirectUrl.startsWith(\"http\")) {\n            throw new Error(\"destination url or return back url should be an absolute path url!\");\n        }\n        const baseURL = new URL(redirectUrl);\n        url = new URL(targetUrl, baseURL.origin);\n    } else {\n        url = new URL(targetUrl);\n    }\n    if (redirectUrl) {\n        url.searchParams.set(\"redirect_url\", redirectUrl);\n    }\n    return url.toString();\n};\nfunction redirect({ redirectAdapter, signUpUrl, signInUrl, frontendApi, publishableKey }) {\n    if (!frontendApi) {\n        frontendApi = (0,_clerk_shared_keys__WEBPACK_IMPORTED_MODULE_3__.parsePublishableKey)(publishableKey)?.frontendApi;\n    } else {\n        (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecated)(\"frontendApi\", \"Use `publishableKey` instead.\");\n    }\n    const accountsBaseUrl = buildAccountsBaseUrl(frontendApi);\n    const redirectToSignUp = ({ returnBackUrl } = {})=>{\n        if (!signUpUrl && !accountsBaseUrl) {\n            errorThrower.throwMissingPublishableKeyError();\n        }\n        const accountsSignUpUrl = `${accountsBaseUrl}/sign-up`;\n        return redirectAdapter(buildUrl(signUpUrl || accountsSignUpUrl, returnBackUrl));\n    };\n    const redirectToSignIn = ({ returnBackUrl } = {})=>{\n        if (!signInUrl && !accountsBaseUrl) {\n            errorThrower.throwMissingPublishableKeyError();\n        }\n        const accountsSignInUrl = `${accountsBaseUrl}/sign-in`;\n        return redirectAdapter(buildUrl(signInUrl || accountsSignInUrl, returnBackUrl));\n    };\n    return {\n        redirectToSignUp,\n        redirectToSignIn\n    };\n}\nfunction buildAccountsBaseUrl(frontendApi) {\n    if (!frontendApi) {\n        return \"\";\n    }\n    const accountsBaseUrl = frontendApi.replace(/(clerk\\.accountsstage\\.)/, \"accountsstage.\").replace(/(clerk\\.accounts\\.|clerk\\.)/, \"accounts.\");\n    return `https://${accountsBaseUrl}`;\n}\n// src/index.ts\nfunction Clerk(options) {\n    const opts = {\n        ...options\n    };\n    const apiClient = createBackendApiClient(opts);\n    const requestState = createAuthenticateRequest({\n        options: opts,\n        apiClient\n    });\n    const clerkInstance = {\n        ...apiClient,\n        ...requestState,\n        /**\n     * @deprecated This prop has been deprecated and will be removed in the next major release.\n     */ __unstable_options: opts\n    };\n    (0,_clerk_shared_deprecated__WEBPACK_IMPORTED_MODULE_0__.deprecatedObjectProperty)(clerkInstance, \"__unstable_options\", \"Use `createClerkClient({...})` to create a new clerk instance instead.\");\n    return clerkInstance;\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/backend/dist/esm/index.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   initialState: () => (/* binding */ initialState)\n/* harmony export */ });\n/* harmony import */ var _server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../server/buildClerkProps */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/buildClerkProps.js\");\n/* harmony import */ var _server_createGetAuth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/createGetAuth */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/createGetAuth.js\");\n/* harmony import */ var _server_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../server/errors */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/errors.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/utils.js\");\n\n\n\n\nconst auth = ()=>{\n    const authObject = (0,_server_createGetAuth__WEBPACK_IMPORTED_MODULE_0__.createGetAuth)({\n        debugLoggerName: \"auth()\",\n        noAuthStatusMessage: (0,_server_errors__WEBPACK_IMPORTED_MODULE_1__.authAuthHeaderMissing)()\n    })((0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)());\n    const { notFound, redirect } = __webpack_require__(/*! next/navigation */ \"(middleware)/./node_modules/next/navigation.js\");\n    authObject.protect = (params, options)=>{\n        const paramsOrFunction = params?.redirectUrl ? void 0 : params;\n        const redirectUrl = params?.redirectUrl || options?.redirectUrl;\n        const handleUnauthorized = ()=>{\n            if (redirectUrl) {\n                redirect(redirectUrl);\n            }\n            notFound();\n        };\n        if (!authObject.userId) {\n            return handleUnauthorized();\n        }\n        if (!paramsOrFunction) {\n            return {\n                ...authObject\n            };\n        }\n        if (typeof paramsOrFunction === \"function\") {\n            if (paramsOrFunction(authObject.has)) {\n                return {\n                    ...authObject\n                };\n            }\n            return handleUnauthorized();\n        }\n        if (authObject.has(paramsOrFunction)) {\n            return {\n                ...authObject\n            };\n        }\n        return handleUnauthorized();\n    };\n    return authObject;\n};\nconst initialState = ()=>{\n    return (0,_server_buildClerkProps__WEBPACK_IMPORTED_MODULE_3__.buildClerkProps)((0,_utils__WEBPACK_IMPORTED_MODULE_2__.buildRequestLike)());\n};\n //# sourceMappingURL=auth.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvYXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0Q7QUFDSjtBQUNDO0FBQ2pCO0FBQzNDLE1BQU1JLE9BQU87SUFDWCxNQUFNQyxhQUFhSixvRUFBYUEsQ0FBQztRQUMvQkssaUJBQWlCO1FBQ2pCQyxxQkFBcUJMLHFFQUFxQkE7SUFDNUMsR0FBR0Msd0RBQWdCQTtJQUNuQixNQUFNLEVBQUVLLFFBQVEsRUFBRUMsUUFBUSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDLHVFQUFpQjtJQUN4REwsV0FBV00sT0FBTyxHQUFHLENBQUNDLFFBQVFDO1FBQzVCLE1BQU1DLG1CQUFtQkYsUUFBUUcsY0FBYyxLQUFLLElBQUlIO1FBQ3hELE1BQU1HLGNBQWNILFFBQVFHLGVBQWVGLFNBQVNFO1FBQ3BELE1BQU1DLHFCQUFxQjtZQUN6QixJQUFJRCxhQUFhO2dCQUNmTixTQUFTTTtZQUNYO1lBQ0FQO1FBQ0Y7UUFDQSxJQUFJLENBQUNILFdBQVdZLE1BQU0sRUFBRTtZQUN0QixPQUFPRDtRQUNUO1FBQ0EsSUFBSSxDQUFDRixrQkFBa0I7WUFDckIsT0FBTztnQkFBRSxHQUFHVCxVQUFVO1lBQUM7UUFDekI7UUFDQSxJQUFJLE9BQU9TLHFCQUFxQixZQUFZO1lBQzFDLElBQUlBLGlCQUFpQlQsV0FBV2EsR0FBRyxHQUFHO2dCQUNwQyxPQUFPO29CQUFFLEdBQUdiLFVBQVU7Z0JBQUM7WUFDekI7WUFDQSxPQUFPVztRQUNUO1FBQ0EsSUFBSVgsV0FBV2EsR0FBRyxDQUFDSixtQkFBbUI7WUFDcEMsT0FBTztnQkFBRSxHQUFHVCxVQUFVO1lBQUM7UUFDekI7UUFDQSxPQUFPVztJQUNUO0lBQ0EsT0FBT1g7QUFDVDtBQUNBLE1BQU1jLGVBQWU7SUFDbkIsT0FBT25CLHdFQUFlQSxDQUFDRyx3REFBZ0JBO0FBQ3pDO0FBSUUsQ0FDRixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vYXBwLXJvdXRlci9zZXJ2ZXIvYXV0aC5qcz9hNjhkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkQ2xlcmtQcm9wcyB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvYnVpbGRDbGVya1Byb3BzXCI7XG5pbXBvcnQgeyBjcmVhdGVHZXRBdXRoIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9jcmVhdGVHZXRBdXRoXCI7XG5pbXBvcnQgeyBhdXRoQXV0aEhlYWRlck1pc3NpbmcgfSBmcm9tIFwiLi4vLi4vc2VydmVyL2Vycm9yc1wiO1xuaW1wb3J0IHsgYnVpbGRSZXF1ZXN0TGlrZSB9IGZyb20gXCIuL3V0aWxzXCI7XG5jb25zdCBhdXRoID0gKCkgPT4ge1xuICBjb25zdCBhdXRoT2JqZWN0ID0gY3JlYXRlR2V0QXV0aCh7XG4gICAgZGVidWdMb2dnZXJOYW1lOiBcImF1dGgoKVwiLFxuICAgIG5vQXV0aFN0YXR1c01lc3NhZ2U6IGF1dGhBdXRoSGVhZGVyTWlzc2luZygpXG4gIH0pKGJ1aWxkUmVxdWVzdExpa2UoKSk7XG4gIGNvbnN0IHsgbm90Rm91bmQsIHJlZGlyZWN0IH0gPSByZXF1aXJlKFwibmV4dC9uYXZpZ2F0aW9uXCIpO1xuICBhdXRoT2JqZWN0LnByb3RlY3QgPSAocGFyYW1zLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zT3JGdW5jdGlvbiA9IHBhcmFtcz8ucmVkaXJlY3RVcmwgPyB2b2lkIDAgOiBwYXJhbXM7XG4gICAgY29uc3QgcmVkaXJlY3RVcmwgPSBwYXJhbXM/LnJlZGlyZWN0VXJsIHx8IG9wdGlvbnM/LnJlZGlyZWN0VXJsO1xuICAgIGNvbnN0IGhhbmRsZVVuYXV0aG9yaXplZCA9ICgpID0+IHtcbiAgICAgIGlmIChyZWRpcmVjdFVybCkge1xuICAgICAgICByZWRpcmVjdChyZWRpcmVjdFVybCk7XG4gICAgICB9XG4gICAgICBub3RGb3VuZCgpO1xuICAgIH07XG4gICAgaWYgKCFhdXRoT2JqZWN0LnVzZXJJZCkge1xuICAgICAgcmV0dXJuIGhhbmRsZVVuYXV0aG9yaXplZCgpO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtc09yRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiB7IC4uLmF1dGhPYmplY3QgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNPckZ1bmN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChwYXJhbXNPckZ1bmN0aW9uKGF1dGhPYmplY3QuaGFzKSkge1xuICAgICAgICByZXR1cm4geyAuLi5hdXRoT2JqZWN0IH07XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlVW5hdXRob3JpemVkKCk7XG4gICAgfVxuICAgIGlmIChhdXRoT2JqZWN0LmhhcyhwYXJhbXNPckZ1bmN0aW9uKSkge1xuICAgICAgcmV0dXJuIHsgLi4uYXV0aE9iamVjdCB9O1xuICAgIH1cbiAgICByZXR1cm4gaGFuZGxlVW5hdXRob3JpemVkKCk7XG4gIH07XG4gIHJldHVybiBhdXRoT2JqZWN0O1xufTtcbmNvbnN0IGluaXRpYWxTdGF0ZSA9ICgpID0+IHtcbiAgcmV0dXJuIGJ1aWxkQ2xlcmtQcm9wcyhidWlsZFJlcXVlc3RMaWtlKCkpO1xufTtcbmV4cG9ydCB7XG4gIGF1dGgsXG4gIGluaXRpYWxTdGF0ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbImJ1aWxkQ2xlcmtQcm9wcyIsImNyZWF0ZUdldEF1dGgiLCJhdXRoQXV0aEhlYWRlck1pc3NpbmciLCJidWlsZFJlcXVlc3RMaWtlIiwiYXV0aCIsImF1dGhPYmplY3QiLCJkZWJ1Z0xvZ2dlck5hbWUiLCJub0F1dGhTdGF0dXNNZXNzYWdlIiwibm90Rm91bmQiLCJyZWRpcmVjdCIsInJlcXVpcmUiLCJwcm90ZWN0IiwicGFyYW1zIiwib3B0aW9ucyIsInBhcmFtc09yRnVuY3Rpb24iLCJyZWRpcmVjdFVybCIsImhhbmRsZVVuYXV0aG9yaXplZCIsInVzZXJJZCIsImhhcyIsImluaXRpYWxTdGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/app-router/server/auth.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_KEY: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.API_KEY),\n/* harmony export */   API_URL: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.API_URL),\n/* harmony export */   API_VERSION: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.API_VERSION),\n/* harmony export */   AllowlistIdentifier: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.AllowlistIdentifier),\n/* harmony export */   AuthStatus: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.AuthStatus),\n/* harmony export */   CLERK_JS_URL: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.CLERK_JS_URL),\n/* harmony export */   CLERK_JS_VERSION: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.CLERK_JS_VERSION),\n/* harmony export */   Clerk: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk),\n/* harmony export */   Client: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Client),\n/* harmony export */   DOMAIN: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.DOMAIN),\n/* harmony export */   DeletedObject: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.DeletedObject),\n/* harmony export */   Email: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Email),\n/* harmony export */   EmailAddress: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.EmailAddress),\n/* harmony export */   ExternalAccount: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.ExternalAccount),\n/* harmony export */   FRONTEND_API: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.FRONTEND_API),\n/* harmony export */   IS_SATELLITE: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.IS_SATELLITE),\n/* harmony export */   IdentificationLink: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.IdentificationLink),\n/* harmony export */   Invitation: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Invitation),\n/* harmony export */   JS_VERSION: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.JS_VERSION),\n/* harmony export */   OauthAccessToken: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.OauthAccessToken),\n/* harmony export */   ObjectType: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.ObjectType),\n/* harmony export */   Organization: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Organization),\n/* harmony export */   OrganizationInvitation: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.OrganizationInvitation),\n/* harmony export */   OrganizationMembership: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.OrganizationMembership),\n/* harmony export */   OrganizationMembershipPublicUserData: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.OrganizationMembershipPublicUserData),\n/* harmony export */   PROXY_URL: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.PROXY_URL),\n/* harmony export */   PUBLISHABLE_KEY: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.PUBLISHABLE_KEY),\n/* harmony export */   PhoneNumber: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.PhoneNumber),\n/* harmony export */   RedirectUrl: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.RedirectUrl),\n/* harmony export */   SECRET_KEY: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.SECRET_KEY),\n/* harmony export */   SIGN_IN_URL: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.SIGN_IN_URL),\n/* harmony export */   SIGN_UP_URL: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_1__.SIGN_UP_URL),\n/* harmony export */   SMSMessage: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.SMSMessage),\n/* harmony export */   Session: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Session),\n/* harmony export */   SignInToken: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.SignInToken),\n/* harmony export */   Token: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Token),\n/* harmony export */   User: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.User),\n/* harmony export */   Verification: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Verification),\n/* harmony export */   buildRequestUrl: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.buildRequestUrl),\n/* harmony export */   clerkClient: () => (/* binding */ clerkClient),\n/* harmony export */   constants: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.constants),\n/* harmony export */   createAuthenticateRequest: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.createAuthenticateRequest),\n/* harmony export */   createClerkClient: () => (/* binding */ createClerkClient),\n/* harmony export */   createIsomorphicRequest: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.createIsomorphicRequest),\n/* harmony export */   debugRequestState: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.debugRequestState),\n/* harmony export */   decodeJwt: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.decodeJwt),\n/* harmony export */   deserialize: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.deserialize),\n/* harmony export */   hasValidSignature: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.hasValidSignature),\n/* harmony export */   loadInterstitialFromLocal: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.loadInterstitialFromLocal),\n/* harmony export */   makeAuthObjectSerializable: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.makeAuthObjectSerializable),\n/* harmony export */   prunePrivateMetadata: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.prunePrivateMetadata),\n/* harmony export */   redirect: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.redirect),\n/* harmony export */   sanitizeAuthObject: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.sanitizeAuthObject),\n/* harmony export */   signJwt: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signJwt),\n/* harmony export */   signedInAuthObject: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedInAuthObject),\n/* harmony export */   signedOutAuthObject: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.signedOutAuthObject),\n/* harmony export */   verifyJwt: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.verifyJwt),\n/* harmony export */   verifyToken: () => (/* reexport safe */ _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.verifyToken)\n/* harmony export */ });\n/* harmony import */ var _clerk_backend__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @clerk/backend */ \"(middleware)/./node_modules/@clerk/backend/dist/esm/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/constants.js\");\n\n\nconst clerkClient = (0,_clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk)({\n    apiKey: _constants__WEBPACK_IMPORTED_MODULE_1__.API_KEY,\n    secretKey: _constants__WEBPACK_IMPORTED_MODULE_1__.SECRET_KEY,\n    apiUrl: _constants__WEBPACK_IMPORTED_MODULE_1__.API_URL,\n    apiVersion: _constants__WEBPACK_IMPORTED_MODULE_1__.API_VERSION,\n    userAgent: `${\"@clerk/nextjs\"}@${\"4.29.5\"}`,\n    proxyUrl: _constants__WEBPACK_IMPORTED_MODULE_1__.PROXY_URL,\n    domain: _constants__WEBPACK_IMPORTED_MODULE_1__.DOMAIN,\n    isSatellite: _constants__WEBPACK_IMPORTED_MODULE_1__.IS_SATELLITE\n});\nconst createClerkClient = _clerk_backend__WEBPACK_IMPORTED_MODULE_0__.Clerk;\n\n\n //# sourceMappingURL=clerkClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NsZXJrQ2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNrRTtBQUN6RyxNQUFNUSxjQUFjUixxREFBS0EsQ0FBQztJQUN4QlMsUUFBUVIsK0NBQU9BO0lBQ2ZTLFdBQVdILGtEQUFVQTtJQUNyQkksUUFBUVQsK0NBQU9BO0lBQ2ZVLFlBQVlULG1EQUFXQTtJQUN2QlUsV0FBVyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxTQUFTLENBQUM7SUFDM0NDLFVBQVVSLGlEQUFTQTtJQUNuQlMsUUFBUVgsOENBQU1BO0lBQ2RZLGFBQWFYLG9EQUFZQTtBQUMzQjtBQUNBLE1BQU1ZLG9CQUFvQmpCLGlEQUFLQTtBQUNBO0FBQ0g7QUFLMUIsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vc2VydmVyL2NsZXJrQ2xpZW50LmpzP2IxZjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xlcmsgfSBmcm9tIFwiQGNsZXJrL2JhY2tlbmRcIjtcbmltcG9ydCB7IEFQSV9LRVksIEFQSV9VUkwsIEFQSV9WRVJTSU9OLCBET01BSU4sIElTX1NBVEVMTElURSwgUFJPWFlfVVJMLCBTRUNSRVRfS0VZIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5jb25zdCBjbGVya0NsaWVudCA9IENsZXJrKHtcbiAgYXBpS2V5OiBBUElfS0VZLFxuICBzZWNyZXRLZXk6IFNFQ1JFVF9LRVksXG4gIGFwaVVybDogQVBJX1VSTCxcbiAgYXBpVmVyc2lvbjogQVBJX1ZFUlNJT04sXG4gIHVzZXJBZ2VudDogYCR7XCJAY2xlcmsvbmV4dGpzXCJ9QCR7XCI0LjI5LjVcIn1gLFxuICBwcm94eVVybDogUFJPWFlfVVJMLFxuICBkb21haW46IERPTUFJTixcbiAgaXNTYXRlbGxpdGU6IElTX1NBVEVMTElURVxufSk7XG5jb25zdCBjcmVhdGVDbGVya0NsaWVudCA9IENsZXJrO1xuZXhwb3J0ICogZnJvbSBcIkBjbGVyay9iYWNrZW5kXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCB7XG4gIENsZXJrLFxuICBjbGVya0NsaWVudCxcbiAgY3JlYXRlQ2xlcmtDbGllbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGVya0NsaWVudC5qcy5tYXAiXSwibmFtZXMiOlsiQ2xlcmsiLCJBUElfS0VZIiwiQVBJX1VSTCIsIkFQSV9WRVJTSU9OIiwiRE9NQUlOIiwiSVNfU0FURUxMSVRFIiwiUFJPWFlfVVJMIiwiU0VDUkVUX0tFWSIsImNsZXJrQ2xpZW50IiwiYXBpS2V5Iiwic2VjcmV0S2V5IiwiYXBpVXJsIiwiYXBpVmVyc2lvbiIsInVzZXJBZ2VudCIsInByb3h5VXJsIiwiZG9tYWluIiwiaXNTYXRlbGxpdGUiLCJjcmVhdGVDbGVya0NsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/server/clerkClient.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js":
/*!******************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDebugLogger: () => (/* binding */ createDebugLogger),\n/* harmony export */   withLogger: () => (/* binding */ withLogger)\n/* harmony export */ });\n/* harmony import */ var next_package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/package.json */ \"(middleware)/./node_modules/next/package.json\");\n/* harmony import */ var _logFormatter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logFormatter */ \"(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/logFormatter.js\");\n\n\nconst createDebugLogger = (name, formatter)=>()=>{\n        const entries = [];\n        let isEnabled = false;\n        return {\n            enable: ()=>{\n                isEnabled = true;\n            },\n            debug: (...args)=>{\n                if (isEnabled) {\n                    entries.push(args.map((arg)=>typeof arg === \"function\" ? arg() : arg));\n                }\n            },\n            commit: ()=>{\n                if (isEnabled) {\n                    console.log(debugLogHeader(name));\n                    for (const log of entries){\n                        let output = formatter(log);\n                        output = output.split(\"\\n\").map((l)=>`  ${l}`).join(\"\\n\");\n                        if (process.env.VERCEL) {\n                            output = truncate(output, 4096);\n                        }\n                        console.log(output);\n                    }\n                    console.log(debugLogFooter(name));\n                }\n            }\n        };\n    };\nconst withLogger = (loggerFactoryOrName, handlerCtor)=>{\n    return (...args)=>{\n        const factory = typeof loggerFactoryOrName === \"string\" ? createDebugLogger(loggerFactoryOrName, _logFormatter__WEBPACK_IMPORTED_MODULE_1__.logFormatter) : loggerFactoryOrName;\n        const logger = factory();\n        const handler = handlerCtor(logger);\n        try {\n            const res = handler(...args);\n            if (typeof res === \"object\" && \"then\" in res && typeof res.then === \"function\") {\n                return res.then((val)=>{\n                    logger.commit();\n                    return val;\n                }).catch((err)=>{\n                    logger.commit();\n                    throw err;\n                });\n            }\n            logger.commit();\n            return res;\n        } catch (err) {\n            logger.commit();\n            throw err;\n        }\n    };\n};\nfunction debugLogHeader(name) {\n    return `[clerk debug start: ${name}]`;\n}\nfunction debugLogFooter(name) {\n    return `[clerk debug end: ${name}] (@clerk/nextjs=${\"4.29.5\"},next=${next_package_json__WEBPACK_IMPORTED_MODULE_0__.version})`;\n}\nfunction truncate(str, maxLength) {\n    const encoder = new TextEncoder();\n    const decoder = new TextDecoder(\"utf-8\");\n    const encodedString = encoder.encode(str);\n    const truncatedString = encodedString.slice(0, maxLength);\n    return decoder.decode(truncatedString).replace(/\\uFFFD/g, \"\");\n}\n //# sourceMappingURL=debugLogger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvZGVidWdMb2dnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3QztBQUNNO0FBQzlDLE1BQU1FLG9CQUFvQixDQUFDQyxNQUFNQyxZQUFjO1FBQzdDLE1BQU1DLFVBQVUsRUFBRTtRQUNsQixJQUFJQyxZQUFZO1FBQ2hCLE9BQU87WUFDTEMsUUFBUTtnQkFDTkQsWUFBWTtZQUNkO1lBQ0FFLE9BQU8sQ0FBQyxHQUFHQztnQkFDVCxJQUFJSCxXQUFXO29CQUNiRCxRQUFRSyxJQUFJLENBQUNELEtBQUtFLEdBQUcsQ0FBQyxDQUFDQyxNQUFRLE9BQU9BLFFBQVEsYUFBYUEsUUFBUUE7Z0JBQ3JFO1lBQ0Y7WUFDQUMsUUFBUTtnQkFDTixJQUFJUCxXQUFXO29CQUNiUSxRQUFRQyxHQUFHLENBQUNDLGVBQWViO29CQUMzQixLQUFLLE1BQU1ZLE9BQU9WLFFBQVM7d0JBQ3pCLElBQUlZLFNBQVNiLFVBQVVXO3dCQUN2QkUsU0FBU0EsT0FBT0MsS0FBSyxDQUFDLE1BQU1QLEdBQUcsQ0FBQyxDQUFDUSxJQUFNLENBQUMsRUFBRSxFQUFFQSxFQUFFLENBQUMsRUFBRUMsSUFBSSxDQUFDO3dCQUN0RCxJQUFJQyxRQUFRQyxHQUFHLENBQUNDLE1BQU0sRUFBRTs0QkFDdEJOLFNBQVNPLFNBQVNQLFFBQVE7d0JBQzVCO3dCQUNBSCxRQUFRQyxHQUFHLENBQUNFO29CQUNkO29CQUNBSCxRQUFRQyxHQUFHLENBQUNVLGVBQWV0QjtnQkFDN0I7WUFDRjtRQUNGO0lBQ0Y7QUFDQSxNQUFNdUIsYUFBYSxDQUFDQyxxQkFBcUJDO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHbkI7UUFDVCxNQUFNb0IsVUFBVSxPQUFPRix3QkFBd0IsV0FBV3pCLGtCQUFrQnlCLHFCQUFxQjFCLHVEQUFZQSxJQUFJMEI7UUFDakgsTUFBTUcsU0FBU0Q7UUFDZixNQUFNRSxVQUFVSCxZQUFZRTtRQUM1QixJQUFJO1lBQ0YsTUFBTUUsTUFBTUQsV0FBV3RCO1lBQ3ZCLElBQUksT0FBT3VCLFFBQVEsWUFBWSxVQUFVQSxPQUFPLE9BQU9BLElBQUlDLElBQUksS0FBSyxZQUFZO2dCQUM5RSxPQUFPRCxJQUFJQyxJQUFJLENBQUMsQ0FBQ0M7b0JBQ2ZKLE9BQU9qQixNQUFNO29CQUNiLE9BQU9xQjtnQkFDVCxHQUFHQyxLQUFLLENBQUMsQ0FBQ0M7b0JBQ1JOLE9BQU9qQixNQUFNO29CQUNiLE1BQU11QjtnQkFDUjtZQUNGO1lBQ0FOLE9BQU9qQixNQUFNO1lBQ2IsT0FBT21CO1FBQ1QsRUFBRSxPQUFPSSxLQUFLO1lBQ1pOLE9BQU9qQixNQUFNO1lBQ2IsTUFBTXVCO1FBQ1I7SUFDRjtBQUNGO0FBQ0EsU0FBU3BCLGVBQWViLElBQUk7SUFDMUIsT0FBTyxDQUFDLG9CQUFvQixFQUFFQSxLQUFLLENBQUMsQ0FBQztBQUN2QztBQUNBLFNBQVNzQixlQUFldEIsSUFBSTtJQUMxQixPQUFPLENBQUMsa0JBQWtCLEVBQUVBLEtBQUssaUJBQWlCLEVBQUUsU0FBUyxNQUFNLEVBQUVILHNEQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ3pGO0FBQ0EsU0FBU3dCLFNBQVNjLEdBQUcsRUFBRUMsU0FBUztJQUM5QixNQUFNQyxVQUFVLElBQUlDO0lBQ3BCLE1BQU1DLFVBQVUsSUFBSUMsWUFBWTtJQUNoQyxNQUFNQyxnQkFBZ0JKLFFBQVFLLE1BQU0sQ0FBQ1A7SUFDckMsTUFBTVEsa0JBQWtCRixjQUFjRyxLQUFLLENBQUMsR0FBR1I7SUFDL0MsT0FBT0csUUFBUU0sTUFBTSxDQUFDRixpQkFBaUJHLE9BQU8sQ0FBQyxXQUFXO0FBQzVEO0FBSUUsQ0FDRix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvZGVidWdMb2dnZXIuanM/OTFkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV4dFBrZyBmcm9tIFwibmV4dC9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB7IGxvZ0Zvcm1hdHRlciB9IGZyb20gXCIuL2xvZ0Zvcm1hdHRlclwiO1xuY29uc3QgY3JlYXRlRGVidWdMb2dnZXIgPSAobmFtZSwgZm9ybWF0dGVyKSA9PiAoKSA9PiB7XG4gIGNvbnN0IGVudHJpZXMgPSBbXTtcbiAgbGV0IGlzRW5hYmxlZCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGVuYWJsZTogKCkgPT4ge1xuICAgICAgaXNFbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRlYnVnOiAoLi4uYXJncykgPT4ge1xuICAgICAgaWYgKGlzRW5hYmxlZCkge1xuICAgICAgICBlbnRyaWVzLnB1c2goYXJncy5tYXAoKGFyZykgPT4gdHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiID8gYXJnKCkgOiBhcmcpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1pdDogKCkgPT4ge1xuICAgICAgaWYgKGlzRW5hYmxlZCkge1xuICAgICAgICBjb25zb2xlLmxvZyhkZWJ1Z0xvZ0hlYWRlcihuYW1lKSk7XG4gICAgICAgIGZvciAoY29uc3QgbG9nIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICBsZXQgb3V0cHV0ID0gZm9ybWF0dGVyKGxvZyk7XG4gICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnNwbGl0KFwiXFxuXCIpLm1hcCgobCkgPT4gYCAgJHtsfWApLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52LlZFUkNFTCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gdHJ1bmNhdGUob3V0cHV0LCA0MDk2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS5sb2cob3V0cHV0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhkZWJ1Z0xvZ0Zvb3RlcihuYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbmNvbnN0IHdpdGhMb2dnZXIgPSAobG9nZ2VyRmFjdG9yeU9yTmFtZSwgaGFuZGxlckN0b3IpID0+IHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHR5cGVvZiBsb2dnZXJGYWN0b3J5T3JOYW1lID09PSBcInN0cmluZ1wiID8gY3JlYXRlRGVidWdMb2dnZXIobG9nZ2VyRmFjdG9yeU9yTmFtZSwgbG9nRm9ybWF0dGVyKSA6IGxvZ2dlckZhY3RvcnlPck5hbWU7XG4gICAgY29uc3QgbG9nZ2VyID0gZmFjdG9yeSgpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyQ3Rvcihsb2dnZXIpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBoYW5kbGVyKC4uLmFyZ3MpO1xuICAgICAgaWYgKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIgJiYgXCJ0aGVuXCIgaW4gcmVzICYmIHR5cGVvZiByZXMudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiByZXMudGhlbigodmFsKSA9PiB7XG4gICAgICAgICAgbG9nZ2VyLmNvbW1pdCgpO1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBsb2dnZXIuY29tbWl0KCk7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxvZ2dlci5jb21taXQoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIuY29tbWl0KCk7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9O1xufTtcbmZ1bmN0aW9uIGRlYnVnTG9nSGVhZGVyKG5hbWUpIHtcbiAgcmV0dXJuIGBbY2xlcmsgZGVidWcgc3RhcnQ6ICR7bmFtZX1dYDtcbn1cbmZ1bmN0aW9uIGRlYnVnTG9nRm9vdGVyKG5hbWUpIHtcbiAgcmV0dXJuIGBbY2xlcmsgZGVidWcgZW5kOiAke25hbWV9XSAoQGNsZXJrL25leHRqcz0ke1wiNC4yOS41XCJ9LG5leHQ9JHtuZXh0UGtnLnZlcnNpb259KWA7XG59XG5mdW5jdGlvbiB0cnVuY2F0ZShzdHIsIG1heExlbmd0aCkge1xuICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiKTtcbiAgY29uc3QgZW5jb2RlZFN0cmluZyA9IGVuY29kZXIuZW5jb2RlKHN0cik7XG4gIGNvbnN0IHRydW5jYXRlZFN0cmluZyA9IGVuY29kZWRTdHJpbmcuc2xpY2UoMCwgbWF4TGVuZ3RoKTtcbiAgcmV0dXJuIGRlY29kZXIuZGVjb2RlKHRydW5jYXRlZFN0cmluZykucmVwbGFjZSgvXFx1RkZGRC9nLCBcIlwiKTtcbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZURlYnVnTG9nZ2VyLFxuICB3aXRoTG9nZ2VyXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWdMb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbIm5leHRQa2ciLCJsb2dGb3JtYXR0ZXIiLCJjcmVhdGVEZWJ1Z0xvZ2dlciIsIm5hbWUiLCJmb3JtYXR0ZXIiLCJlbnRyaWVzIiwiaXNFbmFibGVkIiwiZW5hYmxlIiwiZGVidWciLCJhcmdzIiwicHVzaCIsIm1hcCIsImFyZyIsImNvbW1pdCIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1Z0xvZ0hlYWRlciIsIm91dHB1dCIsInNwbGl0IiwibCIsImpvaW4iLCJwcm9jZXNzIiwiZW52IiwiVkVSQ0VMIiwidHJ1bmNhdGUiLCJkZWJ1Z0xvZ0Zvb3RlciIsIndpdGhMb2dnZXIiLCJsb2dnZXJGYWN0b3J5T3JOYW1lIiwiaGFuZGxlckN0b3IiLCJmYWN0b3J5IiwibG9nZ2VyIiwiaGFuZGxlciIsInJlcyIsInRoZW4iLCJ2YWwiLCJjYXRjaCIsImVyciIsInZlcnNpb24iLCJzdHIiLCJtYXhMZW5ndGgiLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJlbmNvZGVkU3RyaW5nIiwiZW5jb2RlIiwidHJ1bmNhdGVkU3RyaW5nIiwic2xpY2UiLCJkZWNvZGUiLCJyZXBsYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/debugLogger.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeNextClerkPropsWithEnv: () => (/* binding */ mergeNextClerkPropsWithEnv)\n/* harmony export */ });\nconst mergeNextClerkPropsWithEnv = (props)=>{\n    return {\n        ...props,\n        frontendApi: props.frontendApi || process.env.NEXT_PUBLIC_CLERK_FRONTEND_API || \"\",\n        publishableKey: props.publishableKey || \"pk_live_Y2xlcmsuZGVzaWduZW5naW5lZXIueHl6JA\" || 0,\n        clerkJSUrl: props.clerkJSUrl || process.env.NEXT_PUBLIC_CLERK_JS,\n        clerkJSVersion: props.clerkJSVersion || process.env.NEXT_PUBLIC_CLERK_JS_VERSION,\n        proxyUrl: props.proxyUrl || process.env.NEXT_PUBLIC_CLERK_PROXY_URL || \"\",\n        domain: props.domain || process.env.NEXT_PUBLIC_CLERK_DOMAIN || \"\",\n        isSatellite: props.isSatellite || process.env.NEXT_PUBLIC_CLERK_IS_SATELLITE === \"true\",\n        signInUrl: props.signInUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL || \"\",\n        signUpUrl: props.signUpUrl || process.env.NEXT_PUBLIC_CLERK_SIGN_UP_URL || \"\",\n        afterSignInUrl: props.afterSignInUrl || process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL || \"\",\n        afterSignUpUrl: props.afterSignUpUrl || process.env.NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL || \"\",\n        sdkMetadata: {\n            name: \"@clerk/nextjs\",\n            version: \"4.29.5\"\n        }\n    };\n};\n //# sourceMappingURL=mergeNextClerkPropsWithEnv.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL0BjbGVyay9uZXh0anMvZGlzdC9lc20vdXRpbHMvbWVyZ2VOZXh0Q2xlcmtQcm9wc1dpdGhFbnYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLDZCQUE2QixDQUFDQztJQUNsQyxPQUFPO1FBQ0wsR0FBR0EsS0FBSztRQUNSQyxhQUFhRCxNQUFNQyxXQUFXLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsOEJBQThCLElBQUk7UUFDaEZDLGdCQUFnQkwsTUFBTUssY0FBYyxJQUFJSCw0Q0FBNkMsSUFBSSxDQUFFO1FBQzNGSyxZQUFZUCxNQUFNTyxVQUFVLElBQUlMLFFBQVFDLEdBQUcsQ0FBQ0ssb0JBQW9CO1FBQ2hFQyxnQkFBZ0JULE1BQU1TLGNBQWMsSUFBSVAsUUFBUUMsR0FBRyxDQUFDTyw0QkFBNEI7UUFDaEZDLFVBQVVYLE1BQU1XLFFBQVEsSUFBSVQsUUFBUUMsR0FBRyxDQUFDUywyQkFBMkIsSUFBSTtRQUN2RUMsUUFBUWIsTUFBTWEsTUFBTSxJQUFJWCxRQUFRQyxHQUFHLENBQUNXLHdCQUF3QixJQUFJO1FBQ2hFQyxhQUFhZixNQUFNZSxXQUFXLElBQUliLFFBQVFDLEdBQUcsQ0FBQ2EsOEJBQThCLEtBQUs7UUFDakZDLFdBQVdqQixNQUFNaUIsU0FBUyxJQUFJZixRQUFRQyxHQUFHLENBQUNlLDZCQUE2QixJQUFJO1FBQzNFQyxXQUFXbkIsTUFBTW1CLFNBQVMsSUFBSWpCLFFBQVFDLEdBQUcsQ0FBQ2lCLDZCQUE2QixJQUFJO1FBQzNFQyxnQkFBZ0JyQixNQUFNcUIsY0FBYyxJQUFJbkIsUUFBUUMsR0FBRyxDQUFDbUIsbUNBQW1DLElBQUk7UUFDM0ZDLGdCQUFnQnZCLE1BQU11QixjQUFjLElBQUlyQixRQUFRQyxHQUFHLENBQUNxQixtQ0FBbUMsSUFBSTtRQUMzRkMsYUFBYTtZQUNYQyxNQUFNO1lBQ05DLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFHRSxDQUNGLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQGNsZXJrL25leHRqcy9kaXN0L2VzbS91dGlscy9tZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudi5qcz8zZTYyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4ucHJvcHMsXG4gICAgZnJvbnRlbmRBcGk6IHByb3BzLmZyb250ZW5kQXBpIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0ZST05URU5EX0FQSSB8fCBcIlwiLFxuICAgIHB1Ymxpc2hhYmxlS2V5OiBwcm9wcy5wdWJsaXNoYWJsZUtleSB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19QVUJMSVNIQUJMRV9LRVkgfHwgXCJcIixcbiAgICBjbGVya0pTVXJsOiBwcm9wcy5jbGVya0pTVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0pTLFxuICAgIGNsZXJrSlNWZXJzaW9uOiBwcm9wcy5jbGVya0pTVmVyc2lvbiB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19KU19WRVJTSU9OLFxuICAgIHByb3h5VXJsOiBwcm9wcy5wcm94eVVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19QUk9YWV9VUkwgfHwgXCJcIixcbiAgICBkb21haW46IHByb3BzLmRvbWFpbiB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19ET01BSU4gfHwgXCJcIixcbiAgICBpc1NhdGVsbGl0ZTogcHJvcHMuaXNTYXRlbGxpdGUgfHwgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ0xFUktfSVNfU0FURUxMSVRFID09PSBcInRydWVcIixcbiAgICBzaWduSW5Vcmw6IHByb3BzLnNpZ25JblVybCB8fCBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DTEVSS19TSUdOX0lOX1VSTCB8fCBcIlwiLFxuICAgIHNpZ25VcFVybDogcHJvcHMuc2lnblVwVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX1NJR05fVVBfVVJMIHx8IFwiXCIsXG4gICAgYWZ0ZXJTaWduSW5Vcmw6IHByb3BzLmFmdGVyU2lnbkluVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fSU5fVVJMIHx8IFwiXCIsXG4gICAgYWZ0ZXJTaWduVXBVcmw6IHByb3BzLmFmdGVyU2lnblVwVXJsIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fVVBfVVJMIHx8IFwiXCIsXG4gICAgc2RrTWV0YWRhdGE6IHtcbiAgICAgIG5hbWU6IFwiQGNsZXJrL25leHRqc1wiLFxuICAgICAgdmVyc2lvbjogXCI0LjI5LjVcIlxuICAgIH1cbiAgfTtcbn07XG5leHBvcnQge1xuICBtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudlxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTmV4dENsZXJrUHJvcHNXaXRoRW52LmpzLm1hcCJdLCJuYW1lcyI6WyJtZXJnZU5leHRDbGVya1Byb3BzV2l0aEVudiIsInByb3BzIiwiZnJvbnRlbmRBcGkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfQ0xFUktfRlJPTlRFTkRfQVBJIiwicHVibGlzaGFibGVLZXkiLCJORVhUX1BVQkxJQ19DTEVSS19QVUJMSVNIQUJMRV9LRVkiLCJjbGVya0pTVXJsIiwiTkVYVF9QVUJMSUNfQ0xFUktfSlMiLCJjbGVya0pTVmVyc2lvbiIsIk5FWFRfUFVCTElDX0NMRVJLX0pTX1ZFUlNJT04iLCJwcm94eVVybCIsIk5FWFRfUFVCTElDX0NMRVJLX1BST1hZX1VSTCIsImRvbWFpbiIsIk5FWFRfUFVCTElDX0NMRVJLX0RPTUFJTiIsImlzU2F0ZWxsaXRlIiwiTkVYVF9QVUJMSUNfQ0xFUktfSVNfU0FURUxMSVRFIiwic2lnbkluVXJsIiwiTkVYVF9QVUJMSUNfQ0xFUktfU0lHTl9JTl9VUkwiLCJzaWduVXBVcmwiLCJORVhUX1BVQkxJQ19DTEVSS19TSUdOX1VQX1VSTCIsImFmdGVyU2lnbkluVXJsIiwiTkVYVF9QVUJMSUNfQ0xFUktfQUZURVJfU0lHTl9JTl9VUkwiLCJhZnRlclNpZ25VcFVybCIsIk5FWFRfUFVCTElDX0NMRVJLX0FGVEVSX1NJR05fVVBfVVJMIiwic2RrTWV0YWRhdGEiLCJuYW1lIiwidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/@clerk/nextjs/dist/esm/utils/mergeNextClerkPropsWithEnv.js\n");

/***/ })

});