"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-to-text";
exports.ids = ["vendor-chunks/html-to-text"];
exports.modules = {

/***/ "(rsc)/./node_modules/html-to-text/node_modules/deepmerge/dist/cjs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/html-to-text/node_modules/deepmerge/dist/cjs.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nvar isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n    return !!value && typeof value === \"object\";\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n}\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 0xeac7;\nfunction isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === \"function\" ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return Object.propertyIsEnumerable.call(target, symbol);\n    }) : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.\n    );\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n    }\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, options);\n    }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/html-to-text/node_modules/deepmerge/dist/cjs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs":
/*!********************************************************!*\
  !*** ./node_modules/html-to-text/lib/html-to-text.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compile: () => (/* binding */ compile),\n/* harmony export */   convert: () => (/* binding */ convert),\n/* harmony export */   htmlToText: () => (/* binding */ convert)\n/* harmony export */ });\n/* harmony import */ var _selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @selderee/plugin-htmlparser2 */ \"(rsc)/./node_modules/@selderee/plugin-htmlparser2/lib/hp2-builder.mjs\");\n/* harmony import */ var htmlparser2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! htmlparser2 */ \"(rsc)/./node_modules/htmlparser2/lib/esm/index.js\");\n/* harmony import */ var selderee__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! selderee */ \"(rsc)/./node_modules/selderee/lib/selderee.mjs\");\n/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/html-to-text/node_modules/deepmerge/dist/cjs.js\");\n/* harmony import */ var dom_serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! dom-serializer */ \"(rsc)/./node_modules/dom-serializer/lib/esm/index.js\");\n\n\n\n\n\n/**\n * Make a recursive function that will only run to a given depth\n * and switches to an alternative function at that depth. \\\n * No limitation if `n` is `undefined` (Just wraps `f` in that case).\n *\n * @param   { number | undefined } n   Allowed depth of recursion. `undefined` for no limitation.\n * @param   { Function }           f   Function that accepts recursive callback as the first argument.\n * @param   { Function }           [g] Function to run instead, when maximum depth was reached. Do nothing by default.\n * @returns { Function }\n */ function limitedDepthRecursive(n, f, g = ()=>undefined) {\n    if (n === undefined) {\n        const f1 = function(...args) {\n            return f(f1, ...args);\n        };\n        return f1;\n    }\n    if (n >= 0) {\n        return function(...args) {\n            return f(limitedDepthRecursive(n - 1, f, g), ...args);\n        };\n    }\n    return g;\n}\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from each side.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */ function trimCharacter(str, char) {\n    let start = 0;\n    let end = str.length;\n    while(start < end && str[start] === char){\n        ++start;\n    }\n    while(end > start && str[end - 1] === char){\n        --end;\n    }\n    return start > 0 || end < str.length ? str.substring(start, end) : str;\n}\n/**\n * Return the same string or a substring with\n * the given character occurrences removed from the end only.\n *\n * @param   { string } str  A string to trim.\n * @param   { string } char A character to be trimmed.\n * @returns { string }\n */ function trimCharacterEnd(str, char) {\n    let end = str.length;\n    while(end > 0 && str[end - 1] === char){\n        --end;\n    }\n    return end < str.length ? str.substring(0, end) : str;\n}\n/**\n * Return a new string will all characters replaced with unicode escape sequences.\n * This extreme kind of escaping can used to be safely compose regular expressions.\n *\n * @param { string } str A string to escape.\n * @returns { string } A string of unicode escape sequences.\n */ function unicodeEscape(str) {\n    return str.replace(/[\\s\\S]/g, (c)=>\"\\\\u\" + c.charCodeAt().toString(16).padStart(4, \"0\"));\n}\n/**\n * Deduplicate an array by a given key callback.\n * Item properties are merged recursively and with the preference for last defined values.\n * Of items with the same key, merged item takes the place of the last item,\n * others are omitted.\n *\n * @param { any[] } items An array to deduplicate.\n * @param { (x: any) => string } getKey Callback to get a value that distinguishes unique items.\n * @returns { any[] }\n */ function mergeDuplicatesPreferLast(items, getKey) {\n    const map = new Map();\n    for(let i = items.length; i-- > 0;){\n        const item = items[i];\n        const key = getKey(item);\n        map.set(key, map.has(key) ? deepmerge__WEBPACK_IMPORTED_MODULE_2__(item, map.get(key), {\n            arrayMerge: overwriteMerge$1\n        }) : item);\n    }\n    return [\n        ...map.values()\n    ].reverse();\n}\nconst overwriteMerge$1 = (acc, src, options)=>[\n        ...src\n    ];\n/**\n * Get a nested property from an object.\n *\n * @param   { object }   obj  The object to query for the value.\n * @param   { string[] } path The path to the property.\n * @returns { any }\n */ function get(obj, path) {\n    for (const key of path){\n        if (!obj) {\n            return undefined;\n        }\n        obj = obj[key];\n    }\n    return obj;\n}\n/**\n * Convert a number into alphabetic sequence representation (Sequence without zeroes).\n *\n * For example: `a, ..., z, aa, ..., zz, aaa, ...`.\n *\n * @param   { number } num              Number to convert. Must be >= 1.\n * @param   { string } [baseChar = 'a'] Character for 1 in the sequence.\n * @param   { number } [base = 26]      Number of characters in the sequence.\n * @returns { string }\n */ function numberToLetterSequence(num, baseChar = \"a\", base = 26) {\n    const digits = [];\n    do {\n        num -= 1;\n        digits.push(num % base);\n        num = num / base >> 0; // quick `floor`\n    }while (num > 0);\n    const baseCode = baseChar.charCodeAt(0);\n    return digits.reverse().map((n)=>String.fromCharCode(baseCode + n)).join(\"\");\n}\nconst I = [\n    \"I\",\n    \"X\",\n    \"C\",\n    \"M\"\n];\nconst V = [\n    \"V\",\n    \"L\",\n    \"D\"\n];\n/**\n * Convert a number to it's Roman representation. No large numbers extension.\n *\n * @param   { number } num Number to convert. `0 < num <= 3999`.\n * @returns { string }\n */ function numberToRoman(num) {\n    return [\n        ...num + \"\"\n    ].map((n)=>+n).reverse().map((v, i)=>v % 5 < 4 ? (v < 5 ? \"\" : V[i]) + I[i].repeat(v % 5) : I[i] + (v < 5 ? V[i] : I[i + 1])).reverse().join(\"\");\n}\n/**\n * Helps to build text from words.\n */ class InlineTextBuilder {\n    /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */ constructor(options, maxLineLength = undefined){\n        /** @type { string[][] } */ this.lines = [];\n        /** @type { string[] }   */ this.nextLineWords = [];\n        this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n        this.nextLineAvailableChars = this.maxLineLength;\n        this.wrapCharacters = get(options, [\n            \"longWordSplit\",\n            \"wrapCharacters\"\n        ]) || [];\n        this.forceWrapOnLimit = get(options, [\n            \"longWordSplit\",\n            \"forceWrapOnLimit\"\n        ]) || false;\n        this.stashedSpace = false;\n        this.wordBreakOpportunity = false;\n    }\n    /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */ pushWord(word, noWrap = false) {\n        if (this.nextLineAvailableChars <= 0 && !noWrap) {\n            this.startNewLine();\n        }\n        const isLineStart = this.nextLineWords.length === 0;\n        const cost = word.length + (isLineStart ? 0 : 1);\n        if (cost <= this.nextLineAvailableChars || noWrap) {\n            this.nextLineWords.push(word);\n            this.nextLineAvailableChars -= cost;\n        } else {\n            // The word is moved to a new line - prefer to wrap between words.\n            const [first, ...rest] = this.splitLongWord(word);\n            if (!isLineStart) {\n                this.startNewLine();\n            }\n            this.nextLineWords.push(first);\n            this.nextLineAvailableChars -= first.length;\n            for (const part of rest){\n                this.startNewLine();\n                this.nextLineWords.push(part);\n                this.nextLineAvailableChars -= part.length;\n            }\n        }\n    }\n    /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */ popWord() {\n        const lastWord = this.nextLineWords.pop();\n        if (lastWord !== undefined) {\n            const isLineStart = this.nextLineWords.length === 0;\n            const cost = lastWord.length + (isLineStart ? 0 : 1);\n            this.nextLineAvailableChars += cost;\n        }\n        return lastWord;\n    }\n    /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   * @param { boolean } [noWrap] Don't wrap text even if the line is too long.\n   */ concatWord(word, noWrap = false) {\n        if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n            this.pushWord(word, noWrap);\n            this.wordBreakOpportunity = false;\n        } else {\n            const lastWord = this.popWord();\n            this.pushWord(lastWord ? lastWord.concat(word) : word, noWrap);\n        }\n    }\n    /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */ startNewLine(n = 1) {\n        this.lines.push(this.nextLineWords);\n        if (n > 1) {\n            this.lines.push(...Array.from({\n                length: n - 1\n            }, ()=>[]));\n        }\n        this.nextLineWords = [];\n        this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */ isEmpty() {\n        return this.lines.length === 0 && this.nextLineWords.length === 0;\n    }\n    clear() {\n        this.lines.length = 0;\n        this.nextLineWords.length = 0;\n        this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */ toString() {\n        return [\n            ...this.lines,\n            this.nextLineWords\n        ].map((words)=>words.join(\" \")).join(\"\\n\");\n    }\n    /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */ splitLongWord(word) {\n        const parts = [];\n        let idx = 0;\n        while(word.length > this.maxLineLength){\n            const firstLine = word.substring(0, this.maxLineLength);\n            const remainingChars = word.substring(this.maxLineLength);\n            const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n            if (splitIndex > -1) {\n                word = firstLine.substring(splitIndex + 1) + remainingChars;\n                parts.push(firstLine.substring(0, splitIndex + 1));\n            } else {\n                idx++;\n                if (idx < this.wrapCharacters.length) {\n                    word = firstLine + remainingChars;\n                } else {\n                    if (this.forceWrapOnLimit) {\n                        parts.push(firstLine);\n                        word = remainingChars;\n                        if (word.length > this.maxLineLength) {\n                            continue;\n                        }\n                    } else {\n                        word = firstLine + remainingChars;\n                    }\n                    break;\n                }\n            }\n        }\n        parts.push(word); // Add remaining part to array\n        return parts;\n    }\n}\n/* eslint-disable max-classes-per-file */ class StackItem {\n    constructor(next = null){\n        this.next = next;\n    }\n    getRoot() {\n        return this.next ? this.next : this;\n    }\n}\nclass BlockStackItem extends StackItem {\n    constructor(options, next = null, leadingLineBreaks = 1, maxLineLength = undefined){\n        super(next);\n        this.leadingLineBreaks = leadingLineBreaks;\n        this.inlineTextBuilder = new InlineTextBuilder(options, maxLineLength);\n        this.rawText = \"\";\n        this.stashedLineBreaks = 0;\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass ListStackItem extends BlockStackItem {\n    constructor(options, next = null, { interRowLineBreaks = 1, leadingLineBreaks = 2, maxLineLength = undefined, maxPrefixLength = 0, prefixAlign = \"left\" } = {}){\n        super(options, next, leadingLineBreaks, maxLineLength);\n        this.maxPrefixLength = maxPrefixLength;\n        this.prefixAlign = prefixAlign;\n        this.interRowLineBreaks = interRowLineBreaks;\n    }\n}\nclass ListItemStackItem extends BlockStackItem {\n    constructor(options, next = null, { leadingLineBreaks = 1, maxLineLength = undefined, prefix = \"\" } = {}){\n        super(options, next, leadingLineBreaks, maxLineLength);\n        this.prefix = prefix;\n    }\n}\nclass TableStackItem extends StackItem {\n    constructor(next = null){\n        super(next);\n        this.rows = [];\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TableRowStackItem extends StackItem {\n    constructor(next = null){\n        super(next);\n        this.cells = [];\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TableCellStackItem extends StackItem {\n    constructor(options, next = null, maxColumnWidth = undefined){\n        super(next);\n        this.inlineTextBuilder = new InlineTextBuilder(options, maxColumnWidth);\n        this.rawText = \"\";\n        this.stashedLineBreaks = 0;\n        this.isPre = next && next.isPre;\n        this.isNoWrap = next && next.isNoWrap;\n    }\n}\nclass TransformerStackItem extends StackItem {\n    constructor(next = null, transform){\n        super(next);\n        this.transform = transform;\n    }\n}\nfunction charactersToCodes(str) {\n    return [\n        ...str\n    ].map((c)=>\"\\\\u\" + c.charCodeAt(0).toString(16).padStart(4, \"0\")).join(\"\");\n}\n/**\n * Helps to handle HTML whitespaces.\n *\n * @class WhitespaceProcessor\n */ class WhitespaceProcessor {\n    /**\n   * Creates an instance of WhitespaceProcessor.\n   *\n   * @param { Options } options    HtmlToText options.\n   * @memberof WhitespaceProcessor\n   */ constructor(options){\n        this.whitespaceChars = options.preserveNewlines ? options.whitespaceCharacters.replace(/\\n/g, \"\") : options.whitespaceCharacters;\n        const whitespaceCodes = charactersToCodes(this.whitespaceChars);\n        this.leadingWhitespaceRe = new RegExp(`^[${whitespaceCodes}]`);\n        this.trailingWhitespaceRe = new RegExp(`[${whitespaceCodes}]$`);\n        this.allWhitespaceOrEmptyRe = new RegExp(`^[${whitespaceCodes}]*$`);\n        this.newlineOrNonWhitespaceRe = new RegExp(`(\\\\n|[^\\\\n${whitespaceCodes}])`, \"g\");\n        this.newlineOrNonNewlineStringRe = new RegExp(`(\\\\n|[^\\\\n]+)`, \"g\");\n        if (options.preserveNewlines) {\n            const wordOrNewlineRe = new RegExp(`\\\\n|[^\\\\n${whitespaceCodes}]+`, \"gm\");\n            /**\n       * Shrink whitespaces and wrap text, add to the builder.\n       *\n       * @param { string }                  text              Input text.\n       * @param { InlineTextBuilder }       inlineTextBuilder A builder to receive processed text.\n       * @param { (str: string) => string } [ transform ]     A transform to be applied to words.\n       * @param { boolean }                 [noWrap] Don't wrap text even if the line is too long.\n       */ this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {\n                if (!text) {\n                    return;\n                }\n                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n                let anyMatch = false;\n                let m = wordOrNewlineRe.exec(text);\n                if (m) {\n                    anyMatch = true;\n                    if (m[0] === \"\\n\") {\n                        inlineTextBuilder.startNewLine();\n                    } else if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    } else {\n                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n                    }\n                    while((m = wordOrNewlineRe.exec(text)) !== null){\n                        if (m[0] === \"\\n\") {\n                            inlineTextBuilder.startNewLine();\n                        } else {\n                            inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                        }\n                    }\n                }\n                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n            // No need to stash a space in case last added item was a new line,\n            // but that won't affect anything later anyway.\n            };\n        } else {\n            const wordRe = new RegExp(`[^${whitespaceCodes}]+`, \"g\");\n            this.shrinkWrapAdd = function(text, inlineTextBuilder, transform = (str)=>str, noWrap = false) {\n                if (!text) {\n                    return;\n                }\n                const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n                let anyMatch = false;\n                let m = wordRe.exec(text);\n                if (m) {\n                    anyMatch = true;\n                    if (previouslyStashedSpace || this.testLeadingWhitespace(text)) {\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    } else {\n                        inlineTextBuilder.concatWord(transform(m[0]), noWrap);\n                    }\n                    while((m = wordRe.exec(text)) !== null){\n                        inlineTextBuilder.pushWord(transform(m[0]), noWrap);\n                    }\n                }\n                inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch || this.testTrailingWhitespace(text);\n            };\n        }\n    }\n    /**\n   * Add text with only minimal processing.\n   * Everything between newlines considered a single word.\n   * No whitespace is trimmed.\n   * Not affected by preserveNewlines option - `\\n` always starts a new line.\n   *\n   * `noWrap` argument is `true` by default - this won't start a new line\n   * even if there is not enough space left in the current line.\n   *\n   * @param { string }            text              Input text.\n   * @param { InlineTextBuilder } inlineTextBuilder A builder to receive processed text.\n   * @param { boolean }           [noWrap] Don't wrap text even if the line is too long.\n   */ addLiteral(text, inlineTextBuilder, noWrap = true) {\n        if (!text) {\n            return;\n        }\n        const previouslyStashedSpace = inlineTextBuilder.stashedSpace;\n        let anyMatch = false;\n        let m = this.newlineOrNonNewlineStringRe.exec(text);\n        if (m) {\n            anyMatch = true;\n            if (m[0] === \"\\n\") {\n                inlineTextBuilder.startNewLine();\n            } else if (previouslyStashedSpace) {\n                inlineTextBuilder.pushWord(m[0], noWrap);\n            } else {\n                inlineTextBuilder.concatWord(m[0], noWrap);\n            }\n            while((m = this.newlineOrNonNewlineStringRe.exec(text)) !== null){\n                if (m[0] === \"\\n\") {\n                    inlineTextBuilder.startNewLine();\n                } else {\n                    inlineTextBuilder.pushWord(m[0], noWrap);\n                }\n            }\n        }\n        inlineTextBuilder.stashedSpace = previouslyStashedSpace && !anyMatch;\n    }\n    /**\n   * Test whether the given text starts with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testLeadingWhitespace(text) {\n        return this.leadingWhitespaceRe.test(text);\n    }\n    /**\n   * Test whether the given text ends with HTML whitespace character.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testTrailingWhitespace(text) {\n        return this.trailingWhitespaceRe.test(text);\n    }\n    /**\n   * Test whether the given text contains any non-whitespace characters.\n   *\n   * @param   { string }  text  The string to test.\n   * @returns { boolean }\n   */ testContainsWords(text) {\n        return !this.allWhitespaceOrEmptyRe.test(text);\n    }\n    /**\n   * Return the number of newlines if there are no words.\n   *\n   * If any word is found then return zero regardless of the actual number of newlines.\n   *\n   * @param   { string }  text  Input string.\n   * @returns { number }\n   */ countNewlinesNoWords(text) {\n        this.newlineOrNonWhitespaceRe.lastIndex = 0;\n        let counter = 0;\n        let match;\n        while((match = this.newlineOrNonWhitespaceRe.exec(text)) !== null){\n            if (match[0] === \"\\n\") {\n                counter++;\n            } else {\n                return 0;\n            }\n        }\n        return counter;\n    }\n}\n/**\n * Helps to build text from inline and block elements.\n *\n * @class BlockTextBuilder\n */ class BlockTextBuilder {\n    /**\n   * Creates an instance of BlockTextBuilder.\n   *\n   * @param { Options } options HtmlToText options.\n   * @param { import('selderee').Picker<DomNode, TagDefinition> } picker Selectors decision tree picker.\n   * @param { any} [metadata] Optional metadata for HTML document, for use in formatters.\n   */ constructor(options, picker, metadata = undefined){\n        this.options = options;\n        this.picker = picker;\n        this.metadata = metadata;\n        this.whitespaceProcessor = new WhitespaceProcessor(options);\n        /** @type { StackItem } */ this._stackItem = new BlockStackItem(options);\n        /** @type { TransformerStackItem } */ this._wordTransformer = undefined;\n    }\n    /**\n   * Put a word-by-word transform function onto the transformations stack.\n   *\n   * Mainly used for uppercasing. Can be bypassed to add unformatted text such as URLs.\n   *\n   * Word transformations applied before wrapping.\n   *\n   * @param { (str: string) => string } wordTransform Word transformation function.\n   */ pushWordTransform(wordTransform) {\n        this._wordTransformer = new TransformerStackItem(this._wordTransformer, wordTransform);\n    }\n    /**\n   * Remove a function from the word transformations stack.\n   *\n   * @returns { (str: string) => string } A function that was removed.\n   */ popWordTransform() {\n        if (!this._wordTransformer) {\n            return undefined;\n        }\n        const transform = this._wordTransformer.transform;\n        this._wordTransformer = this._wordTransformer.next;\n        return transform;\n    }\n    /**\n   * Ignore wordwrap option in followup inline additions and disable automatic wrapping.\n   */ startNoWrap() {\n        this._stackItem.isNoWrap = true;\n    }\n    /**\n   * Return automatic wrapping to behavior defined by options.\n   */ stopNoWrap() {\n        this._stackItem.isNoWrap = false;\n    }\n    /** @returns { (str: string) => string } */ _getCombinedWordTransformer() {\n        const wt = this._wordTransformer ? (str)=>applyTransformer(str, this._wordTransformer) : undefined;\n        const ce = this.options.encodeCharacters;\n        return wt ? ce ? (str)=>ce(wt(str)) : wt : ce;\n    }\n    _popStackItem() {\n        const item = this._stackItem;\n        this._stackItem = item.next;\n        return item;\n    }\n    /**\n   * Add a line break into currently built block.\n   */ addLineBreak() {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += \"\\n\";\n        } else {\n            this._stackItem.inlineTextBuilder.startNewLine();\n        }\n    }\n    /**\n   * Allow to break line in case directly following text will not fit.\n   */ addWordBreakOpportunity() {\n        if (this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem) {\n            this._stackItem.inlineTextBuilder.wordBreakOpportunity = true;\n        }\n    }\n    /**\n   * Add a node inline into the currently built block.\n   *\n   * @param { string } str\n   * Text content of a node to add.\n   *\n   * @param { object } [param1]\n   * Object holding the parameters of the operation.\n   *\n   * @param { boolean } [param1.noWordTransform]\n   * Ignore word transformers if there are any.\n   * Don't encode characters as well.\n   * (Use this for things like URL addresses).\n   */ addInline(str, { noWordTransform = false } = {}) {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += str;\n            return;\n        }\n        if (str.length === 0 || // empty string\n        this._stackItem.stashedLineBreaks && // stashed linebreaks make whitespace irrelevant\n        !this.whitespaceProcessor.testContainsWords(str) // no words to add\n        ) {\n            return;\n        }\n        if (this.options.preserveNewlines) {\n            const newlinesNumber = this.whitespaceProcessor.countNewlinesNoWords(str);\n            if (newlinesNumber > 0) {\n                this._stackItem.inlineTextBuilder.startNewLine(newlinesNumber);\n                // keep stashedLineBreaks unchanged\n                return;\n            }\n        }\n        if (this._stackItem.stashedLineBreaks) {\n            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n        this.whitespaceProcessor.shrinkWrapAdd(str, this._stackItem.inlineTextBuilder, noWordTransform ? undefined : this._getCombinedWordTransformer(), this._stackItem.isNoWrap);\n        this._stackItem.stashedLineBreaks = 0; // inline text doesn't introduce line breaks\n    }\n    /**\n   * Add a string inline into the currently built block.\n   *\n   * Use this for markup elements that don't have to adhere\n   * to text layout rules.\n   *\n   * @param { string } str Text to add.\n   */ addLiteral(str) {\n        if (!(this._stackItem instanceof BlockStackItem || this._stackItem instanceof ListItemStackItem || this._stackItem instanceof TableCellStackItem)) {\n            return;\n        }\n        if (str.length === 0) {\n            return;\n        }\n        if (this._stackItem.isPre) {\n            this._stackItem.rawText += str;\n            return;\n        }\n        if (this._stackItem.stashedLineBreaks) {\n            this._stackItem.inlineTextBuilder.startNewLine(this._stackItem.stashedLineBreaks);\n        }\n        this.whitespaceProcessor.addLiteral(str, this._stackItem.inlineTextBuilder, this._stackItem.isNoWrap);\n        this._stackItem.stashedLineBreaks = 0;\n    }\n    /**\n   * Start building a new block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any preceding block.\n   *\n   * @param { number }  [param0.reservedLineLength]\n   * Reserve this number of characters on each line for block markup.\n   *\n   * @param { boolean } [param0.isPre]\n   * Should HTML whitespace be preserved inside this block.\n   */ openBlock({ leadingLineBreaks = 1, reservedLineLength = 0, isPre = false } = {}) {\n        const maxLineLength = Math.max(20, this._stackItem.inlineTextBuilder.maxLineLength - reservedLineLength);\n        this._stackItem = new BlockStackItem(this.options, this._stackItem, leadingLineBreaks, maxLineLength);\n        if (isPre) {\n            this._stackItem.isPre = true;\n        }\n    }\n    /**\n   * Finalize currently built block, add it's content to the parent block.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This block should have at least this number of line breaks to separate it from any following block.\n   *\n   * @param { (str: string) => string } [param0.blockTransform]\n   * A function to transform the block text before adding to the parent block.\n   * This happens after word wrap and should be used in combination with reserved line length\n   * in order to keep line lengths correct.\n   * Used for whole block markup.\n   */ closeBlock({ trailingLineBreaks = 1, blockTransform = undefined } = {}) {\n        const block = this._popStackItem();\n        const blockText = blockTransform ? blockTransform(getText(block)) : getText(block);\n        addText(this._stackItem, blockText, block.leadingLineBreaks, Math.max(block.stashedLineBreaks, trailingLineBreaks));\n    }\n    /**\n   * Start building a new list.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.maxPrefixLength]\n   * Length of the longest list item prefix.\n   * If not supplied or too small then list items won't be aligned properly.\n   *\n   * @param { 'left' | 'right' } [param0.prefixAlign]\n   * Specify how prefixes of different lengths have to be aligned\n   * within a column.\n   *\n   * @param { number } [param0.interRowLineBreaks]\n   * Minimum number of line breaks between list items.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any preceding block.\n   */ openList({ maxPrefixLength = 0, prefixAlign = \"left\", interRowLineBreaks = 1, leadingLineBreaks = 2 } = {}) {\n        this._stackItem = new ListStackItem(this.options, this._stackItem, {\n            interRowLineBreaks: interRowLineBreaks,\n            leadingLineBreaks: leadingLineBreaks,\n            maxLineLength: this._stackItem.inlineTextBuilder.maxLineLength,\n            maxPrefixLength: maxPrefixLength,\n            prefixAlign: prefixAlign\n        });\n    }\n    /**\n   * Start building a new list item.\n   *\n   * @param {object} param0\n   * Object holding the parameters of the list item.\n   *\n   * @param { string } [param0.prefix]\n   * Prefix for this list item (item number, bullet point, etc).\n   */ openListItem({ prefix = \"\" } = {}) {\n        if (!(this._stackItem instanceof ListStackItem)) {\n            throw new Error(\"Can't add a list item to something that is not a list! Check the formatter.\");\n        }\n        const list = this._stackItem;\n        const prefixLength = Math.max(prefix.length, list.maxPrefixLength);\n        const maxLineLength = Math.max(20, list.inlineTextBuilder.maxLineLength - prefixLength);\n        this._stackItem = new ListItemStackItem(this.options, list, {\n            prefix: prefix,\n            maxLineLength: maxLineLength,\n            leadingLineBreaks: list.interRowLineBreaks\n        });\n    }\n    /**\n   * Finalize currently built list item, add it's content to the parent list.\n   */ closeListItem() {\n        const listItem = this._popStackItem();\n        const list = listItem.next;\n        const prefixLength = Math.max(listItem.prefix.length, list.maxPrefixLength);\n        const spacing = \"\\n\" + \" \".repeat(prefixLength);\n        const prefix = list.prefixAlign === \"right\" ? listItem.prefix.padStart(prefixLength) : listItem.prefix.padEnd(prefixLength);\n        const text = prefix + getText(listItem).replace(/\\n/g, spacing);\n        addText(list, text, listItem.leadingLineBreaks, Math.max(listItem.stashedLineBreaks, list.interRowLineBreaks));\n    }\n    /**\n   * Finalize currently built list, add it's content to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the list.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This list should have at least this number of line breaks to separate it from any following block.\n   */ closeList({ trailingLineBreaks = 2 } = {}) {\n        const list = this._popStackItem();\n        const text = getText(list);\n        if (text) {\n            addText(this._stackItem, text, list.leadingLineBreaks, trailingLineBreaks);\n        }\n    }\n    /**\n   * Start building a table.\n   */ openTable() {\n        this._stackItem = new TableStackItem(this._stackItem);\n    }\n    /**\n   * Start building a table row.\n   */ openTableRow() {\n        if (!(this._stackItem instanceof TableStackItem)) {\n            throw new Error(\"Can't add a table row to something that is not a table! Check the formatter.\");\n        }\n        this._stackItem = new TableRowStackItem(this._stackItem);\n    }\n    /**\n   * Start building a table cell.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.maxColumnWidth]\n   * Wrap cell content to this width. Fall back to global wordwrap value if undefined.\n   */ openTableCell({ maxColumnWidth = undefined } = {}) {\n        if (!(this._stackItem instanceof TableRowStackItem)) {\n            throw new Error(\"Can't add a table cell to something that is not a table row! Check the formatter.\");\n        }\n        this._stackItem = new TableCellStackItem(this.options, this._stackItem, maxColumnWidth);\n    }\n    /**\n   * Finalize currently built table cell and add it to parent table row's cells.\n   *\n   * @param { object } [param0]\n   * Object holding the parameters of the cell.\n   *\n   * @param { number } [param0.colspan] How many columns this cell should occupy.\n   * @param { number } [param0.rowspan] How many rows this cell should occupy.\n   */ closeTableCell({ colspan = 1, rowspan = 1 } = {}) {\n        const cell = this._popStackItem();\n        const text = trimCharacter(getText(cell), \"\\n\");\n        cell.next.cells.push({\n            colspan: colspan,\n            rowspan: rowspan,\n            text: text\n        });\n    }\n    /**\n   * Finalize currently built table row and add it to parent table's rows.\n   */ closeTableRow() {\n        const row = this._popStackItem();\n        row.next.rows.push(row.cells);\n    }\n    /**\n   * Finalize currently built table and add the rendered text to the parent block.\n   *\n   * @param { object } param0\n   * Object holding the parameters of the table.\n   *\n   * @param { TablePrinter } param0.tableToString\n   * A function to convert a table of stringified cells into a complete table.\n   *\n   * @param { number } [param0.leadingLineBreaks]\n   * This table should have at least this number of line breaks to separate if from any preceding block.\n   *\n   * @param { number } [param0.trailingLineBreaks]\n   * This table should have at least this number of line breaks to separate it from any following block.\n   */ closeTable({ tableToString, leadingLineBreaks = 2, trailingLineBreaks = 2 }) {\n        const table = this._popStackItem();\n        const output = tableToString(table.rows);\n        if (output) {\n            addText(this._stackItem, output, leadingLineBreaks, trailingLineBreaks);\n        }\n    }\n    /**\n   * Return the rendered text content of this builder.\n   *\n   * @returns { string }\n   */ toString() {\n        return getText(this._stackItem.getRoot());\n    // There should only be the root item if everything is closed properly.\n    }\n}\nfunction getText(stackItem) {\n    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n        throw new Error(\"Only blocks, list items and table cells can be requested for text contents.\");\n    }\n    return stackItem.inlineTextBuilder.isEmpty() ? stackItem.rawText : stackItem.rawText + stackItem.inlineTextBuilder.toString();\n}\nfunction addText(stackItem, text, leadingLineBreaks, trailingLineBreaks) {\n    if (!(stackItem instanceof BlockStackItem || stackItem instanceof ListItemStackItem || stackItem instanceof TableCellStackItem)) {\n        throw new Error(\"Only blocks, list items and table cells can contain text.\");\n    }\n    const parentText = getText(stackItem);\n    const lineBreaks = Math.max(stackItem.stashedLineBreaks, leadingLineBreaks);\n    stackItem.inlineTextBuilder.clear();\n    if (parentText) {\n        stackItem.rawText = parentText + \"\\n\".repeat(lineBreaks) + text;\n    } else {\n        stackItem.rawText = text;\n        stackItem.leadingLineBreaks = lineBreaks;\n    }\n    stackItem.stashedLineBreaks = trailingLineBreaks;\n}\n/**\n * @param { string } str A string to transform.\n * @param { TransformerStackItem } transformer A transformer item (with possible continuation).\n * @returns { string }\n */ function applyTransformer(str, transformer) {\n    return transformer ? applyTransformer(transformer.transform(str), transformer.next) : str;\n}\n/**\n * Compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options (defaults, formatters, user options merged, deduplicated).\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */ function compile$1(options = {}) {\n    const selectorsWithoutFormat = options.selectors.filter((s)=>!s.format);\n    if (selectorsWithoutFormat.length) {\n        throw new Error(\"Following selectors have no specified format: \" + selectorsWithoutFormat.map((s)=>`\\`${s.selector}\\``).join(\", \"));\n    }\n    const picker = new selderee__WEBPACK_IMPORTED_MODULE_4__.DecisionTree(options.selectors.map((s)=>[\n            s.selector,\n            s\n        ])).build(_selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__.hp2Builder);\n    if (typeof options.encodeCharacters !== \"function\") {\n        options.encodeCharacters = makeReplacerFromDict(options.encodeCharacters);\n    }\n    const baseSelectorsPicker = new selderee__WEBPACK_IMPORTED_MODULE_4__.DecisionTree(options.baseElements.selectors.map((s, i)=>[\n            s,\n            i + 1\n        ])).build(_selderee_plugin_htmlparser2__WEBPACK_IMPORTED_MODULE_0__.hp2Builder);\n    function findBaseElements(dom) {\n        return findBases(dom, options, baseSelectorsPicker);\n    }\n    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function(dom, builder) {\n        builder.addInline(options.limits.ellipsis || \"\");\n    });\n    return function(html, metadata = undefined) {\n        return process(html, metadata, options, picker, findBaseElements, limitedWalk);\n    };\n}\n/**\n * Convert given HTML according to preprocessed options.\n *\n * @param { string } html HTML content to convert.\n * @param { any } metadata Optional metadata for HTML document, for use in formatters.\n * @param { Options } options HtmlToText options (preprocessed).\n * @param { import('selderee').Picker<DomNode, TagDefinition> } picker\n * Tag definition picker for DOM nodes processing.\n * @param { (dom: DomNode[]) => DomNode[] } findBaseElements\n * Function to extract elements from HTML DOM\n * that will only be present in the output text.\n * @param { RecursiveCallback } walk Recursive callback.\n * @returns { string }\n */ function process(html, metadata, options, picker, findBaseElements, walk) {\n    const maxInputLength = options.limits.maxInputLength;\n    if (maxInputLength && html && html.length > maxInputLength) {\n        console.warn(`Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`);\n        html = html.substring(0, maxInputLength);\n    }\n    const document = (0,htmlparser2__WEBPACK_IMPORTED_MODULE_1__.parseDocument)(html, {\n        decodeEntities: options.decodeEntities\n    });\n    const bases = findBaseElements(document.children);\n    const builder = new BlockTextBuilder(options, picker, metadata);\n    walk(bases, builder);\n    return builder.toString();\n}\nfunction findBases(dom, options, baseSelectorsPicker) {\n    const results = [];\n    function recursiveWalk(walk, /** @type { DomNode[] } */ dom) {\n        dom = dom.slice(0, options.limits.maxChildNodes);\n        for (const elem of dom){\n            if (elem.type !== \"tag\") {\n                continue;\n            }\n            const pickedSelectorIndex = baseSelectorsPicker.pick1(elem);\n            if (pickedSelectorIndex > 0) {\n                results.push({\n                    selectorIndex: pickedSelectorIndex,\n                    element: elem\n                });\n            } else if (elem.children) {\n                walk(elem.children);\n            }\n            if (results.length >= options.limits.maxBaseElements) {\n                return;\n            }\n        }\n    }\n    const limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n    limitedWalk(dom);\n    if (options.baseElements.orderBy !== \"occurrence\") {\n        results.sort((a, b)=>a.selectorIndex - b.selectorIndex);\n    }\n    return options.baseElements.returnDomByDefault && results.length === 0 ? dom : results.map((x)=>x.element);\n}\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */ function recursiveWalk(walk, dom, builder) {\n    if (!dom) {\n        return;\n    }\n    const options = builder.options;\n    const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n    if (tooManyChildNodes) {\n        dom = dom.slice(0, options.limits.maxChildNodes);\n        dom.push({\n            data: options.limits.ellipsis,\n            type: \"text\"\n        });\n    }\n    for (const elem of dom){\n        switch(elem.type){\n            case \"text\":\n                {\n                    builder.addInline(elem.data);\n                    break;\n                }\n            case \"tag\":\n                {\n                    const tagDefinition = builder.picker.pick1(elem);\n                    const format = options.formatters[tagDefinition.format];\n                    format(elem, walk, builder, tagDefinition.options || {});\n                    break;\n                }\n        }\n    }\n    return;\n}\n/**\n * @param { Object<string,string | false> } dict\n * A dictionary where keys are characters to replace\n * and values are replacement strings.\n *\n * First code point from dict keys is used.\n * Compound emojis with ZWJ are not supported (not until Node 16).\n *\n * @returns { ((str: string) => string) | undefined }\n */ function makeReplacerFromDict(dict) {\n    if (!dict || Object.keys(dict).length === 0) {\n        return undefined;\n    }\n    /** @type { [string, string][] } */ const entries = Object.entries(dict).filter(([, v])=>v !== false);\n    const regex = new RegExp(entries.map(([c])=>`(${unicodeEscape([\n            ...c\n        ][0])})`).join(\"|\"), \"g\");\n    const values = entries.map(([, v])=>v);\n    const replacer = (m, ...cgs)=>values[cgs.findIndex((cg)=>cg)];\n    return (str)=>str.replace(regex, replacer);\n}\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */ function formatSkip(elem, walk, builder, formatOptions) {\n/* do nothing */ }\n/**\n * Insert the given string literal inline instead of a tag.\n *\n * @type { FormatCallback }\n */ function formatInlineString(elem, walk, builder, formatOptions) {\n    builder.addLiteral(formatOptions.string || \"\");\n}\n/**\n * Insert a block with the given string literal instead of a tag.\n *\n * @type { FormatCallback }\n */ function formatBlockString(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.addLiteral(formatOptions.string || \"\");\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */ function formatInline(elem, walk, builder, formatOptions) {\n    walk(elem.children, builder);\n}\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */ function formatBlock$1(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\nfunction renderOpenTag(elem) {\n    const attrs = elem.attribs && elem.attribs.length ? \" \" + Object.entries(elem.attribs).map(([k, v])=>v === \"\" ? k : `${k}=${v.replace(/\"/g, \"&quot;\")}`).join(\" \") : \"\";\n    return `<${elem.name}${attrs}>`;\n}\nfunction renderCloseTag(elem) {\n    return `</${elem.name}>`;\n}\n/**\n * Render an element as inline HTML tag, walk through it's children.\n *\n * @type { FormatCallback }\n */ function formatInlineTag(elem, walk, builder, formatOptions) {\n    builder.startNoWrap();\n    builder.addLiteral(renderOpenTag(elem));\n    builder.stopNoWrap();\n    walk(elem.children, builder);\n    builder.startNoWrap();\n    builder.addLiteral(renderCloseTag(elem));\n    builder.stopNoWrap();\n}\n/**\n * Render an element as HTML block bag, walk through it's children.\n *\n * @type { FormatCallback }\n */ function formatBlockTag(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.startNoWrap();\n    builder.addLiteral(renderOpenTag(elem));\n    builder.stopNoWrap();\n    walk(elem.children, builder);\n    builder.startNoWrap();\n    builder.addLiteral(renderCloseTag(elem));\n    builder.stopNoWrap();\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Render an element with all it's children as inline HTML.\n *\n * @type { FormatCallback }\n */ function formatInlineHtml(elem, walk, builder, formatOptions) {\n    builder.startNoWrap();\n    builder.addLiteral((0,dom_serializer__WEBPACK_IMPORTED_MODULE_3__.render)(elem, {\n        decodeEntities: builder.options.decodeEntities\n    }));\n    builder.stopNoWrap();\n}\n/**\n * Render an element with all it's children as HTML block.\n *\n * @type { FormatCallback }\n */ function formatBlockHtml(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.startNoWrap();\n    builder.addLiteral((0,dom_serializer__WEBPACK_IMPORTED_MODULE_3__.render)(elem, {\n        decodeEntities: builder.options.decodeEntities\n    }));\n    builder.stopNoWrap();\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Render inline element wrapped with given strings.\n *\n * @type { FormatCallback }\n */ function formatInlineSurround(elem, walk, builder, formatOptions) {\n    builder.addLiteral(formatOptions.prefix || \"\");\n    walk(elem.children, builder);\n    builder.addLiteral(formatOptions.suffix || \"\");\n}\nvar genericFormatters = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    block: formatBlock$1,\n    blockHtml: formatBlockHtml,\n    blockString: formatBlockString,\n    blockTag: formatBlockTag,\n    inline: formatInline,\n    inlineHtml: formatInlineHtml,\n    inlineString: formatInlineString,\n    inlineSurround: formatInlineSurround,\n    inlineTag: formatInlineTag,\n    skip: formatSkip\n});\nfunction getRow(matrix, j) {\n    if (!matrix[j]) {\n        matrix[j] = [];\n    }\n    return matrix[j];\n}\nfunction findFirstVacantIndex(row, x = 0) {\n    while(row[x]){\n        x++;\n    }\n    return x;\n}\nfunction transposeInPlace(matrix, maxSize) {\n    for(let i = 0; i < maxSize; i++){\n        const rowI = getRow(matrix, i);\n        for(let j = 0; j < i; j++){\n            const rowJ = getRow(matrix, j);\n            if (rowI[j] || rowJ[i]) {\n                const temp = rowI[j];\n                rowI[j] = rowJ[i];\n                rowJ[i] = temp;\n            }\n        }\n    }\n}\nfunction putCellIntoLayout(cell, layout, baseRow, baseCol) {\n    for(let r = 0; r < cell.rowspan; r++){\n        const layoutRow = getRow(layout, baseRow + r);\n        for(let c = 0; c < cell.colspan; c++){\n            layoutRow[baseCol + c] = cell;\n        }\n    }\n}\nfunction getOrInitOffset(offsets, index) {\n    if (offsets[index] === undefined) {\n        offsets[index] = index === 0 ? 0 : 1 + getOrInitOffset(offsets, index - 1);\n    }\n    return offsets[index];\n}\nfunction updateOffset(offsets, base, span, value) {\n    offsets[base + span] = Math.max(getOrInitOffset(offsets, base + span), getOrInitOffset(offsets, base) + value);\n}\n/**\n * Render a table into a string.\n * Cells can contain multiline text and span across multiple rows and columns.\n *\n * Modifies cells to add lines array.\n *\n * @param { TablePrinterCell[][] } tableRows Table to render.\n * @param { number } rowSpacing Number of spaces between columns.\n * @param { number } colSpacing Number of empty lines between rows.\n * @returns { string }\n */ function tableToString(tableRows, rowSpacing, colSpacing) {\n    const layout = [];\n    let colNumber = 0;\n    const rowNumber = tableRows.length;\n    const rowOffsets = [\n        0\n    ];\n    // Fill the layout table and row offsets row-by-row.\n    for(let j = 0; j < rowNumber; j++){\n        const layoutRow = getRow(layout, j);\n        const cells = tableRows[j];\n        let x = 0;\n        for(let i = 0; i < cells.length; i++){\n            const cell = cells[i];\n            x = findFirstVacantIndex(layoutRow, x);\n            putCellIntoLayout(cell, layout, j, x);\n            x += cell.colspan;\n            cell.lines = cell.text.split(\"\\n\");\n            const cellHeight = cell.lines.length;\n            updateOffset(rowOffsets, j, cell.rowspan, cellHeight + rowSpacing);\n        }\n        colNumber = layoutRow.length > colNumber ? layoutRow.length : colNumber;\n    }\n    transposeInPlace(layout, rowNumber > colNumber ? rowNumber : colNumber);\n    const outputLines = [];\n    const colOffsets = [\n        0\n    ];\n    // Fill column offsets and output lines column-by-column.\n    for(let x = 0; x < colNumber; x++){\n        let y = 0;\n        let cell;\n        const rowsInThisColumn = Math.min(rowNumber, layout[x].length);\n        while(y < rowsInThisColumn){\n            cell = layout[x][y];\n            if (cell) {\n                if (!cell.rendered) {\n                    let cellWidth = 0;\n                    for(let j = 0; j < cell.lines.length; j++){\n                        const line = cell.lines[j];\n                        const lineOffset = rowOffsets[y] + j;\n                        outputLines[lineOffset] = (outputLines[lineOffset] || \"\").padEnd(colOffsets[x]) + line;\n                        cellWidth = line.length > cellWidth ? line.length : cellWidth;\n                    }\n                    updateOffset(colOffsets, x, cell.colspan, cellWidth + colSpacing);\n                    cell.rendered = true;\n                }\n                y += cell.rowspan;\n            } else {\n                const lineOffset = rowOffsets[y];\n                outputLines[lineOffset] = outputLines[lineOffset] || \"\";\n                y++;\n            }\n        }\n    }\n    return outputLines.join(\"\\n\");\n}\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */ function formatLineBreak(elem, walk, builder, formatOptions) {\n    builder.addLineBreak();\n}\n/**\n * Process a `wbr` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */ function formatWbr(elem, walk, builder, formatOptions) {\n    builder.addWordBreakOpportunity();\n}\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */ function formatHorizontalLine(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    builder.addInline(\"-\".repeat(formatOptions.length || builder.options.wordwrap || 40));\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */ function formatParagraph(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */ function formatPre(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        isPre: true,\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */ function formatHeading(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n    });\n    if (formatOptions.uppercase !== false) {\n        builder.pushWordTransform((str)=>str.toUpperCase());\n        walk(elem.children, builder);\n        builder.popWordTransform();\n    } else {\n        walk(elem.children, builder);\n    }\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */ function formatBlockquote(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n        reservedLineLength: 2\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n        blockTransform: (str)=>(formatOptions.trimEmptyLines !== false ? trimCharacter(str, \"\\n\") : str).split(\"\\n\").map((line)=>\"> \" + line).join(\"\\n\")\n    });\n}\nfunction withBrackets(str, brackets) {\n    if (!brackets) {\n        return str;\n    }\n    const lbr = typeof brackets[0] === \"string\" ? brackets[0] : \"[\";\n    const rbr = typeof brackets[1] === \"string\" ? brackets[1] : \"]\";\n    return lbr + str + rbr;\n}\nfunction pathRewrite(path, rewriter, baseUrl, metadata, elem) {\n    const modifiedPath = typeof rewriter === \"function\" ? rewriter(path, metadata, elem) : path;\n    return modifiedPath[0] === \"/\" && baseUrl ? trimCharacterEnd(baseUrl, \"/\") + modifiedPath : modifiedPath;\n}\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */ function formatImage(elem, walk, builder, formatOptions) {\n    const attribs = elem.attribs || {};\n    const alt = attribs.alt ? attribs.alt : \"\";\n    const src = !attribs.src ? \"\" : pathRewrite(attribs.src, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n    const text = !src ? alt : !alt ? withBrackets(src, formatOptions.linkBrackets) : alt + \" \" + withBrackets(src, formatOptions.linkBrackets);\n    builder.addInline(text, {\n        noWordTransform: true\n    });\n}\n// a img baseUrl\n// a img pathRewrite\n// a img linkBrackets\n// a     ignoreHref: false\n//            ignoreText ?\n// a     noAnchorUrl: true\n//            can be replaced with selector\n// a     hideLinkHrefIfSameAsText: false\n//            how to compare, what to show (text, href, normalized) ?\n// a     mailto protocol removed without options\n// a     protocols: mailto, tel, ...\n//            can be matched with selector?\n// anchors, protocols - only if no pathRewrite fn is provided\n// normalize-url ?\n// a\n// a[href^=\"#\"] - format:skip by default\n// a[href^=\"mailto:\"] - ?\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */ function formatAnchor(elem, walk, builder, formatOptions) {\n    function getHref() {\n        if (formatOptions.ignoreHref) {\n            return \"\";\n        }\n        if (!elem.attribs || !elem.attribs.href) {\n            return \"\";\n        }\n        let href = elem.attribs.href.replace(/^mailto:/, \"\");\n        if (formatOptions.noAnchorUrl && href[0] === \"#\") {\n            return \"\";\n        }\n        href = pathRewrite(href, formatOptions.pathRewrite, formatOptions.baseUrl, builder.metadata, elem);\n        return href;\n    }\n    const href = getHref();\n    if (!href) {\n        walk(elem.children, builder);\n    } else {\n        let text = \"\";\n        builder.pushWordTransform((str)=>{\n            if (str) {\n                text += str;\n            }\n            return str;\n        });\n        walk(elem.children, builder);\n        builder.popWordTransform();\n        const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n        if (!hideSameLink) {\n            builder.addInline(!text ? href : \" \" + withBrackets(href, formatOptions.linkBrackets), {\n                noWordTransform: true\n            });\n        }\n    }\n}\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns increasing index each time it is called.\n */ function formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {\n    const isNestedList = get(elem, [\n        \"parent\",\n        \"name\"\n    ]) === \"li\";\n    // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n    // so the dumb length comparison is the most robust way to get the correct value.\n    let maxPrefixLength = 0;\n    const listItems = (elem.children || [])// it might be more accurate to check only for html spaces here, but no significant benefit\n    .filter((child)=>child.type !== \"text\" || !/^\\s*$/.test(child.data)).map(function(child) {\n        if (child.name !== \"li\") {\n            return {\n                node: child,\n                prefix: \"\"\n            };\n        }\n        const prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();\n        if (prefix.length > maxPrefixLength) {\n            maxPrefixLength = prefix.length;\n        }\n        return {\n            node: child,\n            prefix: prefix\n        };\n    });\n    if (!listItems.length) {\n        return;\n    }\n    builder.openList({\n        interRowLineBreaks: 1,\n        leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2,\n        maxPrefixLength: maxPrefixLength,\n        prefixAlign: \"left\"\n    });\n    for (const { node, prefix } of listItems){\n        builder.openListItem({\n            prefix: prefix\n        });\n        walk([\n            node\n        ], builder);\n        builder.closeListItem();\n    }\n    builder.closeList({\n        trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2\n    });\n}\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */ function formatUnorderedList(elem, walk, builder, formatOptions) {\n    const prefix = formatOptions.itemPrefix || \" * \";\n    return formatList(elem, walk, builder, formatOptions, ()=>prefix);\n}\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */ function formatOrderedList(elem, walk, builder, formatOptions) {\n    let nextIndex = Number(elem.attribs.start || \"1\");\n    const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n    const nextPrefixCallback = ()=>\" \" + indexFunction(nextIndex++) + \". \";\n    return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */ function getOrderedListIndexFunction(olType = \"1\") {\n    switch(olType){\n        case \"a\":\n            return (i)=>numberToLetterSequence(i, \"a\");\n        case \"A\":\n            return (i)=>numberToLetterSequence(i, \"A\");\n        case \"i\":\n            return (i)=>numberToRoman(i).toLowerCase();\n        case \"I\":\n            return (i)=>numberToRoman(i);\n        case \"1\":\n        default:\n            return (i)=>i.toString();\n    }\n}\n/**\n * Given a list of class and ID selectors (prefixed with '.' and '#'),\n * return them as separate lists of names without prefixes.\n *\n * @param { string[] } selectors Class and ID selectors (`[\".class\", \"#id\"]` etc).\n * @returns { { classes: string[], ids: string[] } }\n */ function splitClassesAndIds(selectors) {\n    const classes = [];\n    const ids = [];\n    for (const selector of selectors){\n        if (selector.startsWith(\".\")) {\n            classes.push(selector.substring(1));\n        } else if (selector.startsWith(\"#\")) {\n            ids.push(selector.substring(1));\n        }\n    }\n    return {\n        classes: classes,\n        ids: ids\n    };\n}\nfunction isDataTable(attr, tables) {\n    if (tables === true) {\n        return true;\n    }\n    if (!attr) {\n        return false;\n    }\n    const { classes, ids } = splitClassesAndIds(tables);\n    const attrClasses = (attr[\"class\"] || \"\").split(\" \");\n    const attrIds = (attr[\"id\"] || \"\").split(\" \");\n    return attrClasses.some((x)=>classes.includes(x)) || attrIds.some((x)=>ids.includes(x));\n}\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */ function formatTable(elem, walk, builder, formatOptions) {\n    return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);\n}\nfunction formatBlock(elem, walk, builder, formatOptions) {\n    builder.openBlock({\n        leadingLineBreaks: formatOptions.leadingLineBreaks\n    });\n    walk(elem.children, builder);\n    builder.closeBlock({\n        trailingLineBreaks: formatOptions.trailingLineBreaks\n    });\n}\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */ function formatDataTable(elem, walk, builder, formatOptions) {\n    builder.openTable();\n    elem.children.forEach(walkTable);\n    builder.closeTable({\n        tableToString: (rows)=>tableToString(rows, formatOptions.rowSpacing ?? 0, formatOptions.colSpacing ?? 3),\n        leadingLineBreaks: formatOptions.leadingLineBreaks,\n        trailingLineBreaks: formatOptions.trailingLineBreaks\n    });\n    function formatCell(cellNode) {\n        const colspan = +get(cellNode, [\n            \"attribs\",\n            \"colspan\"\n        ]) || 1;\n        const rowspan = +get(cellNode, [\n            \"attribs\",\n            \"rowspan\"\n        ]) || 1;\n        builder.openTableCell({\n            maxColumnWidth: formatOptions.maxColumnWidth\n        });\n        walk(cellNode.children, builder);\n        builder.closeTableCell({\n            colspan: colspan,\n            rowspan: rowspan\n        });\n    }\n    function walkTable(elem) {\n        if (elem.type !== \"tag\") {\n            return;\n        }\n        const formatHeaderCell = formatOptions.uppercaseHeaderCells !== false ? (cellNode)=>{\n            builder.pushWordTransform((str)=>str.toUpperCase());\n            formatCell(cellNode);\n            builder.popWordTransform();\n        } : formatCell;\n        switch(elem.name){\n            case \"thead\":\n            case \"tbody\":\n            case \"tfoot\":\n            case \"center\":\n                elem.children.forEach(walkTable);\n                return;\n            case \"tr\":\n                {\n                    builder.openTableRow();\n                    for (const childOfTr of elem.children){\n                        if (childOfTr.type !== \"tag\") {\n                            continue;\n                        }\n                        switch(childOfTr.name){\n                            case \"th\":\n                                {\n                                    formatHeaderCell(childOfTr);\n                                    break;\n                                }\n                            case \"td\":\n                                {\n                                    formatCell(childOfTr);\n                                    break;\n                                }\n                        }\n                    }\n                    builder.closeTableRow();\n                    break;\n                }\n        }\n    }\n}\nvar textFormatters = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    anchor: formatAnchor,\n    blockquote: formatBlockquote,\n    dataTable: formatDataTable,\n    heading: formatHeading,\n    horizontalLine: formatHorizontalLine,\n    image: formatImage,\n    lineBreak: formatLineBreak,\n    orderedList: formatOrderedList,\n    paragraph: formatParagraph,\n    pre: formatPre,\n    table: formatTable,\n    unorderedList: formatUnorderedList,\n    wbr: formatWbr\n});\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */ const DEFAULT_OPTIONS = {\n    baseElements: {\n        selectors: [\n            \"body\"\n        ],\n        orderBy: \"selectors\",\n        returnDomByDefault: true\n    },\n    decodeEntities: true,\n    encodeCharacters: {},\n    formatters: {},\n    limits: {\n        ellipsis: \"...\",\n        maxBaseElements: undefined,\n        maxChildNodes: undefined,\n        maxDepth: undefined,\n        maxInputLength: 1 << 24 // 16_777_216\n    },\n    longWordSplit: {\n        forceWrapOnLimit: false,\n        wrapCharacters: []\n    },\n    preserveNewlines: false,\n    selectors: [\n        {\n            selector: \"*\",\n            format: \"inline\"\n        },\n        {\n            selector: \"a\",\n            format: \"anchor\",\n            options: {\n                baseUrl: null,\n                hideLinkHrefIfSameAsText: false,\n                ignoreHref: false,\n                linkBrackets: [\n                    \"[\",\n                    \"]\"\n                ],\n                noAnchorUrl: true\n            }\n        },\n        {\n            selector: \"article\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"aside\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"blockquote\",\n            format: \"blockquote\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                trimEmptyLines: true\n            }\n        },\n        {\n            selector: \"br\",\n            format: \"lineBreak\"\n        },\n        {\n            selector: \"div\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"footer\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"form\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"h1\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h2\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h3\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 3,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h4\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h5\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"h6\",\n            format: \"heading\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2,\n                uppercase: true\n            }\n        },\n        {\n            selector: \"header\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"hr\",\n            format: \"horizontalLine\",\n            options: {\n                leadingLineBreaks: 2,\n                length: undefined,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"img\",\n            format: \"image\",\n            options: {\n                baseUrl: null,\n                linkBrackets: [\n                    \"[\",\n                    \"]\"\n                ]\n            }\n        },\n        {\n            selector: \"main\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"nav\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"ol\",\n            format: \"orderedList\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"p\",\n            format: \"paragraph\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"pre\",\n            format: \"pre\",\n            options: {\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"section\",\n            format: \"block\",\n            options: {\n                leadingLineBreaks: 1,\n                trailingLineBreaks: 1\n            }\n        },\n        {\n            selector: \"table\",\n            format: \"table\",\n            options: {\n                colSpacing: 3,\n                leadingLineBreaks: 2,\n                maxColumnWidth: 60,\n                rowSpacing: 0,\n                trailingLineBreaks: 2,\n                uppercaseHeaderCells: true\n            }\n        },\n        {\n            selector: \"ul\",\n            format: \"unorderedList\",\n            options: {\n                itemPrefix: \" * \",\n                leadingLineBreaks: 2,\n                trailingLineBreaks: 2\n            }\n        },\n        {\n            selector: \"wbr\",\n            format: \"wbr\"\n        }\n    ],\n    tables: [],\n    whitespaceCharacters: \" \t\\r\\n\\f​\",\n    wordwrap: 80\n};\nconst concatMerge = (acc, src, options)=>[\n        ...acc,\n        ...src\n    ];\nconst overwriteMerge = (acc, src, options)=>[\n        ...src\n    ];\nconst selectorsMerge = (acc, src, options)=>acc.some((s)=>typeof s === \"object\") ? concatMerge(acc, src) // selectors\n     : overwriteMerge(acc, src) // baseElements.selectors\n;\n/**\n * Preprocess options, compile selectors into a decision tree,\n * return a function intended for batch processing.\n *\n * @param   { Options } [options = {}]   HtmlToText options.\n * @returns { (html: string, metadata?: any) => string } Pre-configured converter function.\n * @static\n */ function compile(options = {}) {\n    options = deepmerge__WEBPACK_IMPORTED_MODULE_2__(DEFAULT_OPTIONS, options, {\n        arrayMerge: overwriteMerge,\n        customMerge: (key)=>key === \"selectors\" ? selectorsMerge : undefined\n    });\n    options.formatters = Object.assign({}, genericFormatters, textFormatters, options.formatters);\n    options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);\n    handleDeprecatedOptions(options);\n    return compile$1(options);\n}\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @param   { any }     [metadata]     Optional metadata for HTML document, for use in formatters.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { convert } = require('html-to-text');\n * const text = convert('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */ function convert(html, options = {}, metadata = undefined) {\n    return compile(options)(html, metadata);\n}\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */ function handleDeprecatedOptions(options) {\n    if (options.tags) {\n        const tagDefinitions = Object.entries(options.tags).map(([selector, definition])=>({\n                ...definition,\n                selector: selector || \"*\"\n            }));\n        options.selectors.push(...tagDefinitions);\n        options.selectors = mergeDuplicatesPreferLast(options.selectors, (s)=>s.selector);\n    }\n    function set(obj, path, value) {\n        const valueKey = path.pop();\n        for (const key of path){\n            let nested = obj[key];\n            if (!nested) {\n                nested = {};\n                obj[key] = nested;\n            }\n            obj = nested;\n        }\n        obj[valueKey] = value;\n    }\n    if (options[\"baseElement\"]) {\n        const baseElement = options[\"baseElement\"];\n        set(options, [\n            \"baseElements\",\n            \"selectors\"\n        ], Array.isArray(baseElement) ? baseElement : [\n            baseElement\n        ]);\n    }\n    if (options[\"returnDomByDefault\"] !== undefined) {\n        set(options, [\n            \"baseElements\",\n            \"returnDomByDefault\"\n        ], options[\"returnDomByDefault\"]);\n    }\n    for (const definition of options.selectors){\n        if (definition.format === \"anchor\" && get(definition, [\n            \"options\",\n            \"noLinkBrackets\"\n        ])) {\n            set(definition, [\n                \"options\",\n                \"linkBrackets\"\n            ], false);\n        }\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/html-to-text/lib/html-to-text.mjs\n");

/***/ })

};
;