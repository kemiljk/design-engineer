"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@liveblocks";
exports.ids = ["vendor-chunks/@liveblocks"];
exports.modules = {

/***/ "(ssr)/./node_modules/@liveblocks/core/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@liveblocks/core/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientMsgCode: () => (/* binding */ ClientMsgCode),\n/* harmony export */   CommentsApiError: () => (/* binding */ CommentsApiError),\n/* harmony export */   CrdtType: () => (/* binding */ CrdtType),\n/* harmony export */   LiveList: () => (/* binding */ LiveList),\n/* harmony export */   LiveMap: () => (/* binding */ LiveMap),\n/* harmony export */   LiveObject: () => (/* binding */ LiveObject),\n/* harmony export */   OpCode: () => (/* binding */ OpCode),\n/* harmony export */   ServerMsgCode: () => (/* binding */ ServerMsgCode),\n/* harmony export */   WebsocketCloseCodes: () => (/* binding */ WebsocketCloseCodes),\n/* harmony export */   ackOp: () => (/* binding */ ackOp),\n/* harmony export */   asPos: () => (/* binding */ asPos),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertNever: () => (/* binding */ assertNever),\n/* harmony export */   b64decode: () => (/* binding */ b64decode),\n/* harmony export */   cloneLson: () => (/* binding */ cloneLson),\n/* harmony export */   console: () => (/* binding */ fancy_console_exports),\n/* harmony export */   convertToCommentData: () => (/* binding */ convertToCommentData),\n/* harmony export */   convertToCommentUserReaction: () => (/* binding */ convertToCommentUserReaction),\n/* harmony export */   convertToThreadData: () => (/* binding */ convertToThreadData),\n/* harmony export */   createAsyncCache: () => (/* binding */ createAsyncCache),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createCommentsApi: () => (/* binding */ createCommentsApi),\n/* harmony export */   deprecate: () => (/* binding */ deprecate),\n/* harmony export */   deprecateIf: () => (/* binding */ deprecateIf),\n/* harmony export */   detectDupes: () => (/* binding */ detectDupes),\n/* harmony export */   errorIf: () => (/* binding */ errorIf),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   getMentionedIdsFromCommentBody: () => (/* binding */ getMentionedIdsFromCommentBody),\n/* harmony export */   isChildCrdt: () => (/* binding */ isChildCrdt),\n/* harmony export */   isJsonArray: () => (/* binding */ isJsonArray),\n/* harmony export */   isJsonObject: () => (/* binding */ isJsonObject),\n/* harmony export */   isJsonScalar: () => (/* binding */ isJsonScalar),\n/* harmony export */   isLiveNode: () => (/* binding */ isLiveNode),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRootCrdt: () => (/* binding */ isRootCrdt),\n/* harmony export */   legacy_patchImmutableObject: () => (/* binding */ legacy_patchImmutableObject),\n/* harmony export */   lsonToJson: () => (/* binding */ lsonToJson),\n/* harmony export */   makeEventSource: () => (/* binding */ makeEventSource),\n/* harmony export */   makePoller: () => (/* binding */ makePoller),\n/* harmony export */   makePosition: () => (/* binding */ makePosition),\n/* harmony export */   nn: () => (/* binding */ nn),\n/* harmony export */   patchLiveObjectKey: () => (/* binding */ patchLiveObjectKey),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   shallow: () => (/* binding */ shallow),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   stringifyCommentBody: () => (/* binding */ stringifyCommentBody),\n/* harmony export */   throwUsageError: () => (/* binding */ throwUsageError),\n/* harmony export */   toPlainLson: () => (/* binding */ toPlainLson),\n/* harmony export */   tryParseJson: () => (/* binding */ tryParseJson),\n/* harmony export */   withTimeout: () => (/* binding */ withTimeout)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/core\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/dupe-detection.ts\nvar g = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : {};\nvar crossLinkedDocs = \"https://liveblocks.io/docs/errors/cross-linked\";\nvar dupesDocs = \"https://liveblocks.io/docs/errors/dupes\";\nvar SPACE = \" \";\nfunction error(msg) {\n    if (false) {} else {\n        throw new Error(msg);\n    }\n}\nfunction detectDupes(pkgName, pkgVersion, pkgFormat) {\n    const pkgId = Symbol.for(pkgName);\n    const pkgBuildInfo = pkgFormat ? `${pkgVersion || \"dev\"} (${pkgFormat})` : pkgVersion || \"dev\";\n    if (!g[pkgId]) {\n        g[pkgId] = pkgBuildInfo;\n    } else if (g[pkgId] === pkgBuildInfo) {} else {\n        const msg = [\n            `Multiple copies of Liveblocks are being loaded in your project. This will cause issues! See ${dupesDocs + SPACE}`,\n            \"\",\n            \"Conflicts:\",\n            `- ${pkgName} ${g[pkgId]} (already loaded)`,\n            `- ${pkgName} ${pkgBuildInfo} (trying to load this now)`\n        ].join(\"\\n\");\n        error(msg);\n    }\n    if (pkgVersion && PKG_VERSION && pkgVersion !== PKG_VERSION) {\n        error([\n            `Cross-linked versions of Liveblocks found, which will cause issues! See ${crossLinkedDocs + SPACE}`,\n            \"\",\n            \"Conflicts:\",\n            `- ${PKG_NAME} is at ${PKG_VERSION}`,\n            `- ${pkgName} is at ${pkgVersion}`,\n            \"\",\n            \"Always upgrade all Liveblocks packages to the same version number.\"\n        ].join(\"\\n\"));\n    }\n}\n// src/lib/assert.ts\nfunction assertNever(_value, errmsg) {\n    throw new Error(errmsg);\n}\nfunction assert(condition, errmsg) {\n    if (true) {\n        if (!condition) {\n            const err = new Error(errmsg);\n            err.name = \"Assertion failure\";\n            throw err;\n        }\n    }\n}\nfunction nn(value, errmsg = \"Expected value to be non-nullable\") {\n    assert(value !== null && value !== void 0, errmsg);\n    return value;\n}\n// src/lib/controlledPromise.ts\nfunction controlledPromise() {\n    let flagger;\n    const promise = new Promise((res)=>{\n        flagger = res;\n    });\n    if (!flagger) {\n        throw new Error(\"Should never happen\");\n    }\n    return [\n        promise,\n        flagger\n    ];\n}\n// src/lib/EventSource.ts\nfunction makeEventSource() {\n    const _onetimeObservers = /* @__PURE__ */ new Set();\n    const _observers = /* @__PURE__ */ new Set();\n    let _buffer = null;\n    function pause() {\n        _buffer = [];\n    }\n    function unpause() {\n        if (_buffer === null) {\n            return;\n        }\n        for (const event of _buffer){\n            notify(event);\n        }\n        _buffer = null;\n    }\n    function subscribe(callback) {\n        _observers.add(callback);\n        return ()=>_observers.delete(callback);\n    }\n    function subscribeOnce(callback) {\n        _onetimeObservers.add(callback);\n        return ()=>_onetimeObservers.delete(callback);\n    }\n    async function waitUntil(predicate) {\n        let unsub;\n        return new Promise((res)=>{\n            unsub = subscribe((event)=>{\n                if (predicate === void 0 || predicate(event)) {\n                    res(event);\n                }\n            });\n        }).finally(()=>unsub?.());\n    }\n    function notifyOrBuffer(event) {\n        if (_buffer !== null) {\n            _buffer.push(event);\n        } else {\n            notify(event);\n        }\n    }\n    function notify(event) {\n        _onetimeObservers.forEach((callback)=>callback(event));\n        _onetimeObservers.clear();\n        _observers.forEach((callback)=>callback(event));\n    }\n    function clear() {\n        _onetimeObservers.clear();\n        _observers.clear();\n    }\n    function count() {\n        return _onetimeObservers.size + _observers.size;\n    }\n    return {\n        // Private/internal control over event emission\n        notify: notifyOrBuffer,\n        subscribe,\n        subscribeOnce,\n        clear,\n        count,\n        waitUntil,\n        pause,\n        unpause,\n        // Publicly exposable subscription API\n        observable: {\n            subscribe,\n            subscribeOnce,\n            waitUntil\n        }\n    };\n}\n// src/lib/fancy-console.ts\nvar fancy_console_exports = {};\n__export(fancy_console_exports, {\n    error: ()=>error2,\n    errorWithTitle: ()=>errorWithTitle,\n    warn: ()=>warn,\n    warnWithTitle: ()=>warnWithTitle\n});\nvar badge = \"background:#0e0d12;border-radius:9999px;color:#fff;padding:3px 7px;font-family:sans-serif;font-weight:600;\";\nvar bold = \"font-weight:600\";\nfunction wrap(method) {\n    return  true ? console[method] : /* istanbul ignore next */ 0;\n}\nvar warn = wrap(\"warn\");\nvar error2 = wrap(\"error\");\nfunction wrapWithTitle(method) {\n    return  true ? console[method] : /* istanbul ignore next */ 0;\n}\nvar warnWithTitle = wrapWithTitle(\"warn\");\nvar errorWithTitle = wrapWithTitle(\"error\");\n// src/lib/fsm.ts\nfunction distance(state1, state2) {\n    if (state1 === state2) {\n        return [\n            0,\n            0\n        ];\n    }\n    const chunks1 = state1.split(\".\");\n    const chunks2 = state2.split(\".\");\n    const minLen = Math.min(chunks1.length, chunks2.length);\n    let shared = 0;\n    for(; shared < minLen; shared++){\n        if (chunks1[shared] !== chunks2[shared]) {\n            break;\n        }\n    }\n    const up = chunks1.length - shared;\n    const down = chunks2.length - shared;\n    return [\n        up,\n        down\n    ];\n}\nfunction patterns(targetState, levels) {\n    const parts = targetState.split(\".\");\n    if (levels < 1 || levels > parts.length + 1) {\n        throw new Error(\"Invalid number of levels\");\n    }\n    const result = [];\n    if (levels > parts.length) {\n        result.push(\"*\");\n    }\n    for(let i = parts.length - levels + 1; i < parts.length; i++){\n        const slice = parts.slice(0, i);\n        if (slice.length > 0) {\n            result.push(slice.join(\".\") + \".*\");\n        }\n    }\n    result.push(targetState);\n    return result;\n}\nvar SafeContext = class {\n    constructor(initialContext){\n        this.curr = initialContext;\n    }\n    get current() {\n        return this.curr;\n    }\n    /**\n   * Call a callback function that allows patching of the context, by\n   * calling `context.patch()`. Patching is only allowed for the duration\n   * of this window.\n   */ allowPatching(callback) {\n        const self = this;\n        let allowed = true;\n        const patchableContext = {\n            ...this.curr,\n            patch (patch) {\n                if (allowed) {\n                    self.curr = Object.assign({}, self.curr, patch);\n                    for (const pair of Object.entries(patch)){\n                        const [key, value] = pair;\n                        if (key !== \"patch\") {\n                            this[key] = value;\n                        }\n                    }\n                } else {\n                    throw new Error(\"Can no longer patch stale context\");\n                }\n            }\n        };\n        callback(patchableContext);\n        allowed = false;\n        return;\n    }\n};\nvar nextId = 1;\nvar FSM = class {\n    /**\n   * Returns the initial state, which is defined by the first call made to\n   * .addState().\n   */ get initialState() {\n        const result = this.states.values()[Symbol.iterator]().next();\n        if (result.done) {\n            throw new Error(\"No states defined yet\");\n        } else {\n            return result.value;\n        }\n    }\n    get currentState() {\n        if (this.currentStateOrNull === null) {\n            if (this.runningState === 0 /* NOT_STARTED_YET */ ) {\n                throw new Error(\"Not started yet\");\n            } else {\n                throw new Error(\"Already stopped\");\n            }\n        }\n        return this.currentStateOrNull;\n    }\n    /**\n   * Starts the machine by entering the initial state.\n   */ start() {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"State machine has already started\");\n        }\n        this.runningState = 1 /* STARTED */ ;\n        this.currentStateOrNull = this.initialState;\n        this.enter(null);\n        return this;\n    }\n    /**\n   * Stops the state machine. Stopping the state machine will call exit\n   * handlers for the current state, but not enter a new state.\n   */ stop() {\n        if (this.runningState !== 1 /* STARTED */ ) {\n            throw new Error(\"Cannot stop a state machine that hasn't started yet\");\n        }\n        this.exit(null);\n        this.runningState = 2 /* STOPPED */ ;\n        this.currentStateOrNull = null;\n    }\n    constructor(initialContext){\n        this.id = nextId++;\n        this.runningState = 0 /* NOT_STARTED_YET */ ;\n        this.currentStateOrNull = null;\n        this.states = /* @__PURE__ */ new Set();\n        this.enterFns = /* @__PURE__ */ new Map();\n        this.cleanupStack = [];\n        this.knownEventTypes = /* @__PURE__ */ new Set();\n        this.allowedTransitions = /* @__PURE__ */ new Map();\n        this.currentContext = new SafeContext(initialContext);\n        this.eventHub = {\n            didReceiveEvent: makeEventSource(),\n            willTransition: makeEventSource(),\n            didIgnoreEvent: makeEventSource(),\n            willExitState: makeEventSource(),\n            didEnterState: makeEventSource()\n        };\n        this.events = {\n            didReceiveEvent: this.eventHub.didReceiveEvent.observable,\n            willTransition: this.eventHub.willTransition.observable,\n            didIgnoreEvent: this.eventHub.didIgnoreEvent.observable,\n            willExitState: this.eventHub.willExitState.observable,\n            didEnterState: this.eventHub.didEnterState.observable\n        };\n    }\n    get context() {\n        return this.currentContext.current;\n    }\n    /**\n   * Define an explicit finite state in the state machine.\n   */ addState(state) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        this.states.add(state);\n        return this;\n    }\n    onEnter(nameOrPattern, enterFn) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        } else if (this.enterFns.has(nameOrPattern)) {\n            throw new Error(// TODO We _currently_ don't support multiple .onEnters() for the same\n            // state, but this is not a fundamental limitation. Just not\n            // implemented yet. If we wanted to, we could make this an array.\n            `enter/exit function for ${nameOrPattern} already exists`);\n        }\n        this.enterFns.set(nameOrPattern, enterFn);\n        return this;\n    }\n    onEnterAsync(nameOrPattern, promiseFn, onOK, onError) {\n        return this.onEnter(nameOrPattern, ()=>{\n            let cancelled = false;\n            void promiseFn(this.currentContext.current).then(// On OK\n            (data)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_OK\",\n                        data\n                    }, onOK);\n                }\n            }, // On Error\n            (reason)=>{\n                if (!cancelled) {\n                    this.transition({\n                        type: \"ASYNC_ERROR\",\n                        reason\n                    }, onError);\n                }\n            });\n            return ()=>{\n                cancelled = true;\n            };\n        });\n    }\n    getStatesMatching(nameOrPattern) {\n        const matches = [];\n        if (nameOrPattern === \"*\") {\n            for (const state of this.states){\n                matches.push(state);\n            }\n        } else if (nameOrPattern.endsWith(\".*\")) {\n            const prefix = nameOrPattern.slice(0, -1);\n            for (const state of this.states){\n                if (state.startsWith(prefix)) {\n                    matches.push(state);\n                }\n            }\n        } else {\n            const name = nameOrPattern;\n            if (this.states.has(name)) {\n                matches.push(name);\n            }\n        }\n        if (matches.length === 0) {\n            throw new Error(`No states match ${JSON.stringify(nameOrPattern)}`);\n        }\n        return matches;\n    }\n    /**\n   * Define all allowed outgoing transitions for a state.\n   *\n   * The targets for each event can be defined as a function which returns the\n   * next state to transition to. These functions can look at the `event` or\n   * `context` params to conditionally decide which next state to transition\n   * to.\n   *\n   * If you set it to `null`, then the transition will be explicitly forbidden\n   * and throw an error. If you don't define a target for a transition, then\n   * such events will get ignored.\n   */ addTransitions(nameOrPattern, mapping) {\n        if (this.runningState !== 0 /* NOT_STARTED_YET */ ) {\n            throw new Error(\"Already started\");\n        }\n        for (const srcState of this.getStatesMatching(nameOrPattern)){\n            let map = this.allowedTransitions.get(srcState);\n            if (map === void 0) {\n                map = /* @__PURE__ */ new Map();\n                this.allowedTransitions.set(srcState, map);\n            }\n            for (const [type, target_] of Object.entries(mapping)){\n                if (map.has(type)) {\n                    throw new Error(`Trying to set transition \"${type}\" on \"${srcState}\" (via \"${nameOrPattern}\"), but a transition already exists there.`);\n                }\n                const target = target_;\n                this.knownEventTypes.add(type);\n                if (target !== void 0) {\n                    const targetFn = typeof target === \"function\" ? target : ()=>target;\n                    map.set(type, targetFn);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n   * Like `.addTransition()`, but takes an (anonymous) transition whenever the\n   * timer fires.\n   *\n   * @param stateOrPattern The state name, or state group pattern name.\n   * @param after          Number of milliseconds after which to take the\n   *                       transition. If in the mean time, another transition\n   *                       is taken, the timer will get cancelled.\n   * @param target     The target state to go to.\n   */ addTimedTransition(stateOrPattern, after2, target) {\n        return this.onEnter(stateOrPattern, ()=>{\n            const ms = typeof after2 === \"function\" ? after2(this.currentContext.current) : after2;\n            const timeoutID = setTimeout(()=>{\n                this.transition({\n                    type: \"TIMER\"\n                }, target);\n            }, ms);\n            return ()=>{\n                clearTimeout(timeoutID);\n            };\n        });\n    }\n    getTargetFn(eventName) {\n        return this.allowedTransitions.get(this.currentState)?.get(eventName);\n    }\n    /**\n   * Exits the current state, and executes any necessary cleanup functions.\n   * Call this before changing the current state to the next state.\n   *\n   * @param levels Defines how many \"levels\" of nesting will be\n   * exited. For example, if you transition from `foo.bar.qux` to\n   * `foo.bar.baz`, then the level is 1. But if you transition from\n   * `foo.bar.qux` to `bla.bla`, then the level is 3.\n   * If `null`, it will exit all levels.\n   */ exit(levels) {\n        this.eventHub.willExitState.notify(this.currentState);\n        this.currentContext.allowPatching((patchableContext)=>{\n            levels = levels ?? this.cleanupStack.length;\n            for(let i = 0; i < levels; i++){\n                this.cleanupStack.pop()?.(patchableContext);\n            }\n        });\n    }\n    /**\n   * Enters the current state, and executes any necessary onEnter handlers.\n   * Call this directly _after_ setting the current state to the next state.\n   */ enter(levels) {\n        const enterPatterns = patterns(this.currentState, levels ?? this.currentState.split(\".\").length + 1);\n        this.currentContext.allowPatching((patchableContext)=>{\n            for (const pattern of enterPatterns){\n                const enterFn = this.enterFns.get(pattern);\n                const cleanupFn = enterFn?.(patchableContext);\n                if (typeof cleanupFn === \"function\") {\n                    this.cleanupStack.push(cleanupFn);\n                } else {\n                    this.cleanupStack.push(null);\n                }\n            }\n        });\n        this.eventHub.didEnterState.notify(this.currentState);\n    }\n    /**\n   * Sends an event to the machine, which may cause an internal state\n   * transition to happen. When that happens, will trigger side effects.\n   */ send(event) {\n        if (!this.knownEventTypes.has(event.type)) {\n            throw new Error(`Invalid event ${JSON.stringify(event.type)}`);\n        }\n        if (this.runningState === 2 /* STOPPED */ ) {\n            return;\n        }\n        const targetFn = this.getTargetFn(event.type);\n        if (targetFn !== void 0) {\n            return this.transition(event, targetFn);\n        } else {\n            this.eventHub.didIgnoreEvent.notify(event);\n        }\n    }\n    transition(event, target) {\n        this.eventHub.didReceiveEvent.notify(event);\n        const oldState = this.currentState;\n        const targetFn = typeof target === \"function\" ? target : ()=>target;\n        const nextTarget = targetFn(event, this.currentContext.current);\n        let nextState;\n        let effects = void 0;\n        if (nextTarget === null) {\n            this.eventHub.didIgnoreEvent.notify(event);\n            return;\n        }\n        if (typeof nextTarget === \"string\") {\n            nextState = nextTarget;\n        } else {\n            nextState = nextTarget.target;\n            effects = Array.isArray(nextTarget.effect) ? nextTarget.effect : [\n                nextTarget.effect\n            ];\n        }\n        if (!this.states.has(nextState)) {\n            throw new Error(`Invalid next state name: ${JSON.stringify(nextState)}`);\n        }\n        this.eventHub.willTransition.notify({\n            from: oldState,\n            to: nextState\n        });\n        const [up, down] = distance(this.currentState, nextState);\n        if (up > 0) {\n            this.exit(up);\n        }\n        this.currentStateOrNull = nextState;\n        if (effects !== void 0) {\n            const effectsToRun = effects;\n            this.currentContext.allowPatching((patchableContext)=>{\n                for (const effect of effectsToRun){\n                    if (typeof effect === \"function\") {\n                        effect(patchableContext, event);\n                    } else {\n                        patchableContext.patch(effect);\n                    }\n                }\n            });\n        }\n        if (down > 0) {\n            this.enter(down);\n        }\n    }\n};\n// src/lib/utils.ts\nfunction raise(msg) {\n    throw new Error(msg);\n}\nfunction isPlainObject(blob) {\n    return blob !== null && typeof blob === \"object\" && Object.prototype.toString.call(blob) === \"[object Object]\";\n}\nfunction entries(obj) {\n    return Object.entries(obj);\n}\nfunction tryParseJson(rawMessage) {\n    try {\n        return JSON.parse(rawMessage);\n    } catch (e) {\n        return void 0;\n    }\n}\nfunction deepClone(value) {\n    return JSON.parse(JSON.stringify(value));\n}\nfunction b64decode(b64value) {\n    try {\n        const formattedValue = b64value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        const decodedValue = decodeURIComponent(atob(formattedValue).split(\"\").map(function(c) {\n            return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return decodedValue;\n    } catch (err) {\n        return atob(b64value);\n    }\n}\nfunction compact(items) {\n    return items.filter((item)=>item !== null && item !== void 0);\n}\nfunction compactObject(obj) {\n    const newObj = {\n        ...obj\n    };\n    Object.keys(obj).forEach((k)=>{\n        const key = k;\n        if (newObj[key] === void 0) {\n            delete newObj[key];\n        }\n    });\n    return newObj;\n}\nasync function withTimeout(promise, millis, errmsg) {\n    let timerID;\n    const timer$ = new Promise((_, reject)=>{\n        timerID = setTimeout(()=>{\n            reject(new Error(errmsg));\n        }, millis);\n    });\n    return Promise.race([\n        promise,\n        timer$\n    ]).finally(()=>clearTimeout(timerID));\n}\n// src/protocol/ServerMsg.ts\nvar ServerMsgCode = /* @__PURE__ */ ((ServerMsgCode2)=>{\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_JOINED\"] = 101] = \"USER_JOINED\";\n    ServerMsgCode2[ServerMsgCode2[\"USER_LEFT\"] = 102] = \"USER_LEFT\";\n    ServerMsgCode2[ServerMsgCode2[\"BROADCASTED_EVENT\"] = 103] = \"BROADCASTED_EVENT\";\n    ServerMsgCode2[ServerMsgCode2[\"ROOM_STATE\"] = 104] = \"ROOM_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"INITIAL_STORAGE_STATE\"] = 200] = \"INITIAL_STORAGE_STATE\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ServerMsgCode2[ServerMsgCode2[\"REJECT_STORAGE_OP\"] = 299] = \"REJECT_STORAGE_OP\";\n    ServerMsgCode2[ServerMsgCode2[\"UPDATE_YDOC\"] = 300] = \"UPDATE_YDOC\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_CREATED\"] = 400] = \"THREAD_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"THREAD_METADATA_UPDATED\"] = 401] = \"THREAD_METADATA_UPDATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_CREATED\"] = 402] = \"COMMENT_CREATED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_EDITED\"] = 403] = \"COMMENT_EDITED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_DELETED\"] = 404] = \"COMMENT_DELETED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_ADDED\"] = 405] = \"COMMENT_REACTION_ADDED\";\n    ServerMsgCode2[ServerMsgCode2[\"COMMENT_REACTION_REMOVED\"] = 406] = \"COMMENT_REACTION_REMOVED\";\n    return ServerMsgCode2;\n})(ServerMsgCode || {});\n// src/types/IWebSocket.ts\nvar WebsocketCloseCodes = /* @__PURE__ */ ((WebsocketCloseCodes2)=>{\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_ABNORMAL\"] = 1006] = \"CLOSE_ABNORMAL\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"UNEXPECTED_CONDITION\"] = 1011] = \"UNEXPECTED_CONDITION\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TRY_AGAIN_LATER\"] = 1013] = \"TRY_AGAIN_LATER\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"INVALID_MESSAGE_FORMAT\"] = 4e3] = \"INVALID_MESSAGE_FORMAT\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"NOT_ALLOWED\"] = 4001] = \"NOT_ALLOWED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\"] = 4002] = \"MAX_NUMBER_OF_MESSAGES_PER_SECONDS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\"] = 4003] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\"] = 4004] = \"MAX_NUMBER_OF_MESSAGES_PER_DAY_PER_APP\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\"] = 4005] = \"MAX_NUMBER_OF_CONCURRENT_CONNECTIONS_PER_ROOM\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"TOKEN_EXPIRED\"] = 4109] = \"TOKEN_EXPIRED\";\n    WebsocketCloseCodes2[WebsocketCloseCodes2[\"CLOSE_WITHOUT_RETRY\"] = 4999] = \"CLOSE_WITHOUT_RETRY\";\n    return WebsocketCloseCodes2;\n})(WebsocketCloseCodes || {});\nfunction shouldDisconnect(code) {\n    return code === 4999 /* CLOSE_WITHOUT_RETRY */  || code >= 4e3 && code < 4100;\n}\nfunction shouldReauth(code) {\n    return code >= 4100 && code < 4200;\n}\nfunction shouldRetryWithoutReauth(code) {\n    return code === 1013 /* TRY_AGAIN_LATER */  || code >= 4200 && code < 4300;\n}\n// src/connection.ts\nfunction isIdle(status) {\n    return status === \"initial\" || status === \"disconnected\";\n}\nfunction newToLegacyStatus(status) {\n    switch(status){\n        case \"connecting\":\n            return \"connecting\";\n        case \"connected\":\n            return \"open\";\n        case \"reconnecting\":\n            return \"unavailable\";\n        case \"disconnected\":\n            return \"failed\";\n        case \"initial\":\n            return \"closed\";\n        default:\n            return \"closed\";\n    }\n}\nfunction toNewConnectionStatus(machine) {\n    const state = machine.currentState;\n    switch(state){\n        case \"@ok.connected\":\n        case \"@ok.awaiting-pong\":\n            return \"connected\";\n        case \"@idle.initial\":\n            return \"initial\";\n        case \"@auth.busy\":\n        case \"@auth.backoff\":\n        case \"@connecting.busy\":\n        case \"@connecting.backoff\":\n        case \"@idle.zombie\":\n            return machine.context.successCount > 0 ? \"reconnecting\" : \"connecting\";\n        case \"@idle.failed\":\n            return \"disconnected\";\n        default:\n            return assertNever(state, \"Unknown state\");\n    }\n}\nvar BACKOFF_DELAYS = [\n    250,\n    500,\n    1e3,\n    2e3,\n    4e3,\n    8e3,\n    1e4\n];\nvar RESET_DELAY = BACKOFF_DELAYS[0] - 1;\nvar BACKOFF_DELAYS_SLOW = [\n    2e3,\n    3e4,\n    6e4,\n    3e5\n];\nvar HEARTBEAT_INTERVAL = 3e4;\nvar PONG_TIMEOUT = 2e3;\nvar AUTH_TIMEOUT = 1e4;\nvar SOCKET_CONNECT_TIMEOUT = 1e4;\nvar StopRetrying = class extends Error {\n    constructor(reason){\n        super(reason);\n    }\n};\nvar LiveblocksError = class extends Error {\n    constructor(message, code){\n        super(message);\n        this.code = code;\n    }\n};\nfunction nextBackoffDelay(currentDelay, delays = BACKOFF_DELAYS) {\n    return delays.find((delay)=>delay > currentDelay) ?? delays[delays.length - 1];\n}\nfunction increaseBackoffDelay(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay)\n    });\n}\nfunction increaseBackoffDelayAggressively(context) {\n    context.patch({\n        backoffDelay: nextBackoffDelay(context.backoffDelay, BACKOFF_DELAYS_SLOW)\n    });\n}\nfunction resetSuccessCount(context) {\n    context.patch({\n        successCount: 0\n    });\n}\nfunction log(level, message) {\n    const logger = level === 2 /* ERROR */  ? error2 : level === 1 /* WARN */  ? warn : /* black hole */ ()=>{};\n    return ()=>{\n        logger(message);\n    };\n}\nfunction logPrematureErrorOrCloseEvent(e) {\n    const conn = \"Connection to Liveblocks websocket server\";\n    return (ctx)=>{\n        if (e instanceof Error) {\n            warn(`${conn} could not be established. ${String(e)}`);\n        } else {\n            warn(isCloseEvent(e) ? `${conn} closed prematurely (code: ${e.code}). Retrying in ${ctx.backoffDelay}ms.` : `${conn} could not be established.`);\n        }\n    };\n}\nfunction logCloseEvent(event) {\n    return (ctx)=>{\n        warn(`Connection to Liveblocks websocket server closed (code: ${event.code}). Retrying in ${ctx.backoffDelay}ms.`);\n    };\n}\nvar logPermanentClose = log(1 /* WARN */ , \"Connection to WebSocket closed permanently. Won't retry.\");\nfunction isCloseEvent(error3) {\n    return !(error3 instanceof Error) && error3.type === \"close\";\n}\nfunction enableTracing(machine) {\n    const start = /* @__PURE__ */ new Date().getTime();\n    function log2(...args) {\n        warn(`${((/* @__PURE__ */ new Date().getTime() - start) / 1e3).toFixed(2)} [FSM #${machine.id}]`, ...args);\n    }\n    const unsubs = [\n        machine.events.didReceiveEvent.subscribe((e)=>log2(`Event ${e.type}`)),\n        machine.events.willTransition.subscribe(({ from, to })=>log2(\"Transitioning\", from, \"→\", to)),\n        machine.events.didIgnoreEvent.subscribe((e)=>log2(\"Ignored event\", e.type, e, \"(current state won't handle it)\"))\n    ];\n    return ()=>{\n        for (const unsub of unsubs){\n            unsub();\n        }\n    };\n}\nfunction defineConnectivityEvents(machine) {\n    const statusDidChange = makeEventSource();\n    const didConnect = makeEventSource();\n    const didDisconnect = makeEventSource();\n    let lastStatus = null;\n    const unsubscribe = machine.events.didEnterState.subscribe(()=>{\n        const currStatus = toNewConnectionStatus(machine);\n        if (currStatus !== lastStatus) {\n            statusDidChange.notify(currStatus);\n        }\n        if (lastStatus === \"connected\" && currStatus !== \"connected\") {\n            didDisconnect.notify();\n        } else if (lastStatus !== \"connected\" && currStatus === \"connected\") {\n            didConnect.notify();\n        }\n        lastStatus = currStatus;\n    });\n    return {\n        statusDidChange: statusDidChange.observable,\n        didConnect: didConnect.observable,\n        didDisconnect: didDisconnect.observable,\n        unsubscribe\n    };\n}\nvar assign = (patch)=>(ctx)=>ctx.patch(patch);\nfunction createConnectionStateMachine(delegates, options) {\n    const onMessage = makeEventSource();\n    onMessage.pause();\n    const onLiveblocksError = makeEventSource();\n    function fireErrorEvent(errmsg, errcode) {\n        return ()=>{\n            const err = new LiveblocksError(errmsg, errcode);\n            onLiveblocksError.notify(err);\n        };\n    }\n    const initialContext = {\n        successCount: 0,\n        authValue: null,\n        socket: null,\n        backoffDelay: RESET_DELAY\n    };\n    const machine = new FSM(initialContext).addState(\"@idle.initial\").addState(\"@idle.failed\").addState(\"@idle.zombie\").addState(\"@auth.busy\").addState(\"@auth.backoff\").addState(\"@connecting.busy\").addState(\"@connecting.backoff\").addState(\"@ok.connected\").addState(\"@ok.awaiting-pong\");\n    machine.addTransitions(\"*\", {\n        RECONNECT: {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                resetSuccessCount\n            ]\n        },\n        DISCONNECT: \"@idle.initial\"\n    });\n    machine.onEnter(\"@idle.*\", resetSuccessCount).addTransitions(\"@idle.*\", {\n        CONNECT: (_, ctx)=>// If we still have a known authValue, try to reconnect to the socket directly,\n            // otherwise, try to obtain a new authValue\n            ctx.authValue !== null ? \"@connecting.busy\" : \"@auth.busy\"\n    });\n    machine.addTransitions(\"@auth.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@auth.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@auth.backoff\", (ctx)=>ctx.backoffDelay, \"@auth.busy\").onEnterAsync(\"@auth.busy\", ()=>withTimeout(delegates.authenticate(), AUTH_TIMEOUT, \"Timed out during auth\"), // On successful authentication\n    (okEvent)=>({\n            target: \"@connecting.busy\",\n            effect: assign({\n                authValue: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // Auth failed\n    (failedEvent)=>{\n        if (failedEvent.reason instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , failedEvent.reason.message),\n                    fireErrorEvent(failedEvent.reason.message, -1)\n                ]\n            };\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                log(2 /* ERROR */ , `Authentication failed: ${failedEvent.reason instanceof Error ? failedEvent.reason.message : String(failedEvent.reason)}`)\n            ]\n        };\n    });\n    const onSocketError = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_ERROR\",\n            event\n        });\n    const onSocketClose = (event)=>machine.send({\n            type: \"EXPLICIT_SOCKET_CLOSE\",\n            event\n        });\n    const onSocketMessage = (event)=>event.data === \"pong\" ? machine.send({\n            type: \"PONG\"\n        }) : onMessage.notify(event);\n    function teardownSocket(socket) {\n        if (socket) {\n            socket.removeEventListener(\"error\", onSocketError);\n            socket.removeEventListener(\"close\", onSocketClose);\n            socket.removeEventListener(\"message\", onSocketMessage);\n            socket.close();\n        }\n    }\n    machine.addTransitions(\"@connecting.backoff\", {\n        NAVIGATOR_ONLINE: {\n            target: \"@connecting.busy\",\n            effect: assign({\n                backoffDelay: RESET_DELAY\n            })\n        }\n    }).addTimedTransition(\"@connecting.backoff\", (ctx)=>ctx.backoffDelay, \"@connecting.busy\").onEnterAsync(\"@connecting.busy\", //\n    // Use the \"createSocket\" delegate function (provided to the\n    // ManagedSocket) to create the actual WebSocket connection instance.\n    // Then, set up all the necessary event listeners, and wait for the\n    // \"open\" event to occur.\n    //\n    // When the \"open\" event happens, we're ready to transition to the\n    // OK state. This is done by resolving the Promise.\n    //\n    async (ctx)=>{\n        let capturedPrematureEvent = null;\n        const connect$ = new Promise((resolve, rej)=>{\n            if (ctx.authValue === null) {\n                throw new Error(\"No auth authValue\");\n            }\n            const socket = delegates.createSocket(ctx.authValue);\n            function reject(event) {\n                capturedPrematureEvent = event;\n                socket.removeEventListener(\"message\", onSocketMessage);\n                rej(event);\n            }\n            const [actor$, didReceiveActor] = controlledPromise();\n            if (!options.waitForActorId) {\n                didReceiveActor();\n            }\n            function waitForActorId(event) {\n                const serverMsg = tryParseJson(event.data);\n                if (serverMsg?.type === 104 /* ROOM_STATE */ ) {\n                    didReceiveActor();\n                }\n            }\n            socket.addEventListener(\"message\", onSocketMessage);\n            if (options.waitForActorId) {\n                socket.addEventListener(\"message\", waitForActorId);\n            }\n            socket.addEventListener(\"error\", reject);\n            socket.addEventListener(\"close\", reject);\n            socket.addEventListener(\"open\", ()=>{\n                socket.addEventListener(\"error\", onSocketError);\n                socket.addEventListener(\"close\", onSocketClose);\n                const unsub = ()=>{\n                    socket.removeEventListener(\"error\", reject);\n                    socket.removeEventListener(\"close\", reject);\n                    socket.removeEventListener(\"message\", waitForActorId);\n                };\n                void actor$.then(()=>{\n                    resolve([\n                        socket,\n                        unsub\n                    ]);\n                });\n            });\n        });\n        return withTimeout(connect$, SOCKET_CONNECT_TIMEOUT, \"Timed out during websocket connection\").then(//\n        // Part 3:\n        // By now, our \"open\" event has fired, and the promise has been\n        // resolved. Two possible scenarios:\n        //\n        // 1. The happy path. Most likely.\n        // 2. Uh-oh. A premature close/error event has been observed. Let's\n        //    reject the promise after all.\n        //\n        // Any close/error event that will get scheduled after this point\n        // onwards, will be caught in the OK state, and dealt with\n        // accordingly.\n        //\n        ([socket, unsub])=>{\n            unsub();\n            if (capturedPrematureEvent) {\n                throw capturedPrematureEvent;\n            }\n            return socket;\n        });\n    }, // Only transition to OK state after a successfully opened WebSocket connection\n    (okEvent)=>({\n            target: \"@ok.connected\",\n            effect: assign({\n                socket: okEvent.data,\n                backoffDelay: RESET_DELAY\n            })\n        }), // If the WebSocket connection cannot be established\n    (failure)=>{\n        const err = failure.reason;\n        if (err instanceof StopRetrying) {\n            return {\n                target: \"@idle.failed\",\n                effect: [\n                    log(2 /* ERROR */ , err.message),\n                    fireErrorEvent(err.message, -1)\n                ]\n            };\n        }\n        if (isCloseEvent(err)) {\n            if (err.code === 4109 /* TOKEN_EXPIRED */ ) {\n                return \"@auth.busy\";\n            }\n            if (shouldRetryWithoutReauth(err.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logPrematureErrorOrCloseEvent(err)\n                    ]\n                };\n            }\n            if (shouldDisconnect(err.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        log(2 /* ERROR */ , err.reason),\n                        fireErrorEvent(err.reason, err.code)\n                    ]\n                };\n            }\n        }\n        return {\n            target: \"@auth.backoff\",\n            effect: [\n                increaseBackoffDelay,\n                logPrematureErrorOrCloseEvent(err)\n            ]\n        };\n    });\n    const sendHeartbeat = {\n        target: \"@ok.awaiting-pong\",\n        effect: (ctx)=>{\n            ctx.socket?.send(\"ping\");\n        }\n    };\n    const maybeHeartbeat = ()=>{\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const canZombie = doc?.visibilityState === \"hidden\" && delegates.canZombie();\n        return canZombie ? \"@idle.zombie\" : sendHeartbeat;\n    };\n    machine.addTimedTransition(\"@ok.connected\", HEARTBEAT_INTERVAL, maybeHeartbeat).addTransitions(\"@ok.connected\", {\n        NAVIGATOR_OFFLINE: maybeHeartbeat,\n        // Don't take the browser's word for it when it says it's offline. Do a ping/pong to make sure.\n        WINDOW_GOT_FOCUS: sendHeartbeat\n    });\n    machine.addTransitions(\"@idle.zombie\", {\n        WINDOW_GOT_FOCUS: \"@connecting.backoff\"\n    });\n    machine.onEnter(\"@ok.*\", (ctx)=>{\n        ctx.patch({\n            successCount: ctx.successCount + 1\n        });\n        const timerID = setTimeout(// On the next tick, start delivering all messages that have already\n        // been received, and continue synchronous delivery of all future\n        // incoming messages.\n        onMessage.unpause, 0);\n        return (ctx2)=>{\n            teardownSocket(ctx2.socket);\n            ctx2.patch({\n                socket: null\n            });\n            clearTimeout(timerID);\n            onMessage.pause();\n        };\n    }).addTransitions(\"@ok.awaiting-pong\", {\n        PONG: \"@ok.connected\"\n    }).addTimedTransition(\"@ok.awaiting-pong\", PONG_TIMEOUT, {\n        target: \"@connecting.busy\",\n        // Log implicit connection loss and drop the current open socket\n        effect: log(1 /* WARN */ , \"Received no pong from server, assume implicit connection loss.\")\n    }).addTransitions(\"@ok.*\", {\n        // When a socket receives an error, this can cause the closing of the\n        // socket, or not. So always check to see if the socket is still OPEN or\n        // not. When still OPEN, don't transition.\n        EXPLICIT_SOCKET_ERROR: (_, context)=>{\n            if (context.socket?.readyState === 1) {\n                return null;\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: increaseBackoffDelay\n            };\n        },\n        EXPLICIT_SOCKET_CLOSE: (e)=>{\n            if (shouldDisconnect(e.event.code)) {\n                return {\n                    target: \"@idle.failed\",\n                    effect: [\n                        logPermanentClose,\n                        fireErrorEvent(e.event.reason, e.event.code)\n                    ]\n                };\n            }\n            if (shouldReauth(e.event.code)) {\n                if (e.event.code === 4109 /* TOKEN_EXPIRED */ ) {\n                    return \"@auth.busy\";\n                } else {\n                    return {\n                        target: \"@auth.backoff\",\n                        effect: [\n                            increaseBackoffDelay,\n                            logCloseEvent(e.event)\n                        ]\n                    };\n                }\n            }\n            if (shouldRetryWithoutReauth(e.event.code)) {\n                return {\n                    target: \"@connecting.backoff\",\n                    effect: [\n                        increaseBackoffDelayAggressively,\n                        logCloseEvent(e.event)\n                    ]\n                };\n            }\n            return {\n                target: \"@connecting.backoff\",\n                effect: [\n                    increaseBackoffDelay,\n                    logCloseEvent(e.event)\n                ]\n            };\n        }\n    });\n    if (typeof document !== \"undefined\") {\n        const doc = typeof document !== \"undefined\" ? document : void 0;\n        const win =  false ? 0 : void 0;\n        const root = win ?? doc;\n        machine.onEnter(\"*\", (ctx)=>{\n            function onNetworkOffline() {\n                machine.send({\n                    type: \"NAVIGATOR_OFFLINE\"\n                });\n            }\n            function onNetworkBackOnline() {\n                machine.send({\n                    type: \"NAVIGATOR_ONLINE\"\n                });\n            }\n            function onVisibilityChange() {\n                if (doc?.visibilityState === \"visible\") {\n                    machine.send({\n                        type: \"WINDOW_GOT_FOCUS\"\n                    });\n                }\n            }\n            win?.addEventListener(\"online\", onNetworkBackOnline);\n            win?.addEventListener(\"offline\", onNetworkOffline);\n            root?.addEventListener(\"visibilitychange\", onVisibilityChange);\n            return ()=>{\n                root?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n                win?.removeEventListener(\"online\", onNetworkBackOnline);\n                win?.removeEventListener(\"offline\", onNetworkOffline);\n                teardownSocket(ctx.socket);\n            };\n        });\n    }\n    const cleanups = [];\n    const { statusDidChange, didConnect, didDisconnect, unsubscribe } = defineConnectivityEvents(machine);\n    cleanups.push(unsubscribe);\n    if (options.enableDebugLogging) {\n        cleanups.push(enableTracing(machine));\n    }\n    machine.start();\n    return {\n        machine,\n        cleanups,\n        // Observable events that will be emitted by this machine\n        events: {\n            statusDidChange,\n            didConnect,\n            didDisconnect,\n            onMessage: onMessage.observable,\n            onLiveblocksError: onLiveblocksError.observable\n        }\n    };\n}\nvar ManagedSocket = class {\n    constructor(delegates, enableDebugLogging = false, waitForActorId = true){\n        const { machine, events, cleanups } = createConnectionStateMachine(delegates, {\n            waitForActorId,\n            enableDebugLogging\n        });\n        this.machine = machine;\n        this.events = events;\n        this.cleanups = cleanups;\n    }\n    getLegacyStatus() {\n        return newToLegacyStatus(this.getStatus());\n    }\n    getStatus() {\n        try {\n            return toNewConnectionStatus(this.machine);\n        } catch  {\n            return \"initial\";\n        }\n    }\n    /**\n   * Returns the current auth authValue.\n   */ get authValue() {\n        return this.machine.context.authValue;\n    }\n    /**\n   * Call this method to try to connect to a WebSocket. This only has an effect\n   * if the machine is idle at the moment, otherwise this is a no-op.\n   */ connect() {\n        this.machine.send({\n            type: \"CONNECT\"\n        });\n    }\n    /**\n   * If idle, will try to connect. Otherwise, it will attempt to reconnect to\n   * the socket, potentially obtaining a new authValue first, if needed.\n   */ reconnect() {\n        this.machine.send({\n            type: \"RECONNECT\"\n        });\n    }\n    /**\n   * Call this method to disconnect from the current WebSocket. Is going to be\n   * a no-op if there is no active connection.\n   */ disconnect() {\n        this.machine.send({\n            type: \"DISCONNECT\"\n        });\n    }\n    /**\n   * Call this to stop the machine and run necessary cleanup functions. After\n   * calling destroy(), you can no longer use this instance. Call this before\n   * letting the instance get garbage collected.\n   */ destroy() {\n        this.machine.stop();\n        let cleanup;\n        while(cleanup = this.cleanups.pop()){\n            cleanup();\n        }\n    }\n    /**\n   * Safely send a message to the current WebSocket connection. Will emit a log\n   * message if this is somehow impossible.\n   */ send(data) {\n        const socket = this.machine.context?.socket;\n        if (socket === null) {\n            warn(\"Cannot send: not connected yet\", data);\n        } else if (socket.readyState !== 1) {\n            warn(\"Cannot send: WebSocket no longer open\", data);\n        } else {\n            socket.send(data);\n        }\n    }\n    /**\n   * NOTE: Used by the E2E app only, to simulate explicit events.\n   * Not ideal to keep exposed :(\n   */ _privateSendMachineEvent(event) {\n        this.machine.send(event);\n    }\n};\n// src/protocol/AuthToken.ts\nfunction canWriteStorage(scopes) {\n    return scopes.includes(\"room:write\" /* Write */ );\n}\nfunction canComment(scopes) {\n    return scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:write\" /* Write */ );\n}\nfunction isValidAuthTokenPayload(data) {\n    return isPlainObject(data) && (data.k === \"acc\" /* ACCESS_TOKEN */  || data.k === \"id\" /* ID_TOKEN */  || data.k === \"sec-legacy\" /* SECRET_LEGACY */ );\n}\nfunction parseAuthToken(rawTokenString) {\n    const tokenParts = rawTokenString.split(\".\");\n    if (tokenParts.length !== 3) {\n        throw new Error(\"Authentication error: invalid JWT token\");\n    }\n    const payload = tryParseJson(b64decode(tokenParts[1]));\n    if (!(payload && isValidAuthTokenPayload(payload))) {\n        throw new Error(\"Authentication error: expected a valid token but did not get one. Hint: if you are using a callback, ensure the room is passed when creating the token. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientCallback\");\n    }\n    return {\n        raw: rawTokenString,\n        parsed: payload\n    };\n}\n// src/auth-manager.ts\nfunction createAuthManager(authOptions) {\n    const authentication = prepareAuthentication(authOptions);\n    const seenTokens = /* @__PURE__ */ new Set();\n    const tokens = [];\n    const expiryTimes = [];\n    const requestPromises = /* @__PURE__ */ new Map();\n    function reset() {\n        seenTokens.clear();\n        tokens.length = 0;\n        expiryTimes.length = 0;\n        requestPromises.clear();\n    }\n    function hasCorrespondingScopes(requestedScope, scopes) {\n        if (requestedScope === \"comments:read\") {\n            return scopes.includes(\"comments:read\" /* CommentsRead */ ) || scopes.includes(\"comments:write\" /* CommentsWrite */ ) || scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        } else if (requestedScope === \"room:read\") {\n            return scopes.includes(\"room:read\" /* Read */ ) || scopes.includes(\"room:write\" /* Write */ );\n        }\n        return false;\n    }\n    function getCachedToken(requestedScope, roomId) {\n        const now = Math.ceil(Date.now() / 1e3);\n        for(let i = tokens.length - 1; i >= 0; i--){\n            const token = tokens[i];\n            const expiresAt = expiryTimes[i];\n            if (expiresAt <= now) {\n                tokens.splice(i, 1);\n                expiryTimes.splice(i, 1);\n                continue;\n            }\n            if (token.parsed.k === \"id\" /* ID_TOKEN */ ) {\n                return token;\n            } else if (token.parsed.k === \"acc\" /* ACCESS_TOKEN */ ) {\n                for (const [resource, scopes] of Object.entries(token.parsed.perms)){\n                    if (resource.includes(\"*\") && roomId.startsWith(resource.replace(\"*\", \"\")) || roomId === resource && hasCorrespondingScopes(requestedScope, scopes)) {\n                        return token;\n                    }\n                }\n            }\n        }\n        return void 0;\n    }\n    async function makeAuthRequest(roomId) {\n        const fetcher = authOptions.polyfills?.fetch ?? ( true ? void 0 : 0);\n        if (authentication.type === \"private\") {\n            if (fetcher === void 0) {\n                throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment with a url as auth endpoint, you need to provide a fetch polyfill.\");\n            }\n            const response = await fetchAuthEndpoint(fetcher, authentication.url, {\n                room: roomId\n            });\n            const parsed = parseAuthToken(response.token);\n            if (seenTokens.has(parsed.raw)) {\n                throw new StopRetrying(\"The same Liveblocks auth token was issued from the backend before. Caching Liveblocks tokens is not supported.\");\n            }\n            return parsed;\n        }\n        if (authentication.type === \"custom\") {\n            const response = await authentication.callback(roomId);\n            if (response && typeof response === \"object\") {\n                if (typeof response.token === \"string\") {\n                    return parseAuthToken(response.token);\n                } else if (typeof response.error === \"string\") {\n                    const reason = `Authentication failed: ${\"reason\" in response && typeof response.reason === \"string\" ? response.reason : \"Forbidden\"}`;\n                    if (response.error === \"forbidden\") {\n                        throw new StopRetrying(reason);\n                    } else {\n                        throw new Error(reason);\n                    }\n                }\n            }\n            throw new Error('Your authentication callback function should return a token, but it did not. Hint: the return value should look like: { token: \"...\" }');\n        }\n        throw new Error(\"Unexpected authentication type. Must be private or custom.\");\n    }\n    async function getAuthValue(requestedScope, roomId) {\n        if (authentication.type === \"public\") {\n            return {\n                type: \"public\",\n                publicApiKey: authentication.publicApiKey\n            };\n        }\n        const cachedToken = getCachedToken(requestedScope, roomId);\n        if (cachedToken !== void 0) {\n            return {\n                type: \"secret\",\n                token: cachedToken\n            };\n        }\n        let currentPromise = requestPromises.get(roomId);\n        if (currentPromise === void 0) {\n            currentPromise = makeAuthRequest(roomId);\n            requestPromises.set(roomId, currentPromise);\n        }\n        try {\n            const token = await currentPromise;\n            const BUFFER = 30;\n            const expiresAt = Math.floor(Date.now() / 1e3) + (token.parsed.exp - token.parsed.iat) - BUFFER;\n            seenTokens.add(token.raw);\n            if (token.parsed.k !== \"sec-legacy\" /* SECRET_LEGACY */ ) {\n                tokens.push(token);\n                expiryTimes.push(expiresAt);\n            }\n            return {\n                type: \"secret\",\n                token\n            };\n        } finally{\n            requestPromises.delete(roomId);\n        }\n    }\n    return {\n        reset,\n        getAuthValue\n    };\n}\nfunction prepareAuthentication(authOptions) {\n    const { publicApiKey, authEndpoint } = authOptions;\n    if (authEndpoint !== void 0 && publicApiKey !== void 0) {\n        throw new Error(\"You cannot simultaneously use `publicApiKey` and `authEndpoint` options. Please pick one and leave the other option unspecified. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n    }\n    if (typeof publicApiKey === \"string\") {\n        if (publicApiKey.startsWith(\"sk_\")) {\n            throw new Error(\"Invalid `publicApiKey` option. The value you passed is a secret key, which should not be used from the client. Please only ever pass a public key here. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        } else if (!publicApiKey.startsWith(\"pk_\")) {\n            throw new Error(\"Invalid key. Please use the public key format: pk_<public key>. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientPublicKey\");\n        }\n        return {\n            type: \"public\",\n            publicApiKey\n        };\n    }\n    if (typeof authEndpoint === \"string\") {\n        return {\n            type: \"private\",\n            url: authEndpoint\n        };\n    } else if (typeof authEndpoint === \"function\") {\n        return {\n            type: \"custom\",\n            callback: authEndpoint\n        };\n    } else if (authEndpoint !== void 0) {\n        throw new Error(\"The `authEndpoint` option must be a string or a function. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClientAuthEndpoint\");\n    }\n    throw new Error(\"Invalid Liveblocks client options. Please provide either a `publicApiKey` or `authEndpoint` option. They cannot both be empty. For more information: https://liveblocks.io/docs/api-reference/liveblocks-client#createClient\");\n}\nasync function fetchAuthEndpoint(fetch2, endpoint, body) {\n    const res = await fetch2(endpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n    });\n    if (!res.ok) {\n        const reason = `${(await res.text()).trim() || \"reason not provided in auth response\"} (${res.status} returned by POST ${endpoint})`;\n        if (res.status === 401 || res.status === 403) {\n            throw new StopRetrying(`Unauthorized: ${reason}`);\n        } else {\n            throw new Error(`Failed to authenticate: ${reason}`);\n        }\n    }\n    let data;\n    try {\n        data = await res.json();\n    } catch (er) {\n        throw new Error(`Expected a JSON response when doing a POST request on \"${endpoint}\". ${String(er)}`);\n    }\n    if (!isPlainObject(data) || typeof data.token !== \"string\") {\n        throw new Error(`Expected a JSON response of the form \\`{ token: \"...\" }\\` when doing a POST request on \"${endpoint}\", but got ${JSON.stringify(data)}`);\n    }\n    const { token } = data;\n    return {\n        token\n    };\n}\n// src/constants.ts\nvar DEFAULT_BASE_URL = \"https://api.liveblocks.io\";\n// src/devtools/bridge.ts\nvar _bridgeActive = false;\nfunction activateBridge(allowed) {\n    _bridgeActive = allowed;\n}\nfunction sendToPanel(message, options) {\n    if (true) {\n        return;\n    }\n    const fullMsg = {\n        ...message,\n        source: \"liveblocks-devtools-client\"\n    };\n    if (!(options?.force || _bridgeActive)) {\n        return;\n    }\n    window.postMessage(fullMsg, \"*\");\n}\nvar eventSource = makeEventSource();\nif (false) {}\nvar onMessageFromPanel = eventSource.observable;\n// src/devtools/index.ts\nvar VERSION = PKG_VERSION || \"dev\";\nvar _devtoolsSetupHasRun = false;\nfunction setupDevTools(getAllRooms) {\n    if (true) {\n        return;\n    }\n    if (_devtoolsSetupHasRun) {\n        return;\n    }\n    _devtoolsSetupHasRun = true;\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"connect\":\n                {\n                    activateBridge(true);\n                    for (const roomId of getAllRooms()){\n                        sendToPanel({\n                            msg: \"room::available\",\n                            roomId,\n                            clientVersion: VERSION\n                        });\n                    }\n                    break;\n                }\n        }\n    });\n    sendToPanel({\n        msg: \"wake-up-devtools\"\n    }, {\n        force: true\n    });\n}\nvar unsubsByRoomId = /* @__PURE__ */ new Map();\nfunction stopSyncStream(roomId) {\n    const unsubs = unsubsByRoomId.get(roomId) ?? [];\n    unsubsByRoomId.delete(roomId);\n    for (const unsub of unsubs){\n        unsub();\n    }\n}\nfunction startSyncStream(room) {\n    stopSyncStream(room.id);\n    fullSync(room);\n    unsubsByRoomId.set(room.id, [\n        // When the connection status changes\n        room.events.status.subscribe(()=>partialSyncConnection(room)),\n        // When storage initializes, send the update\n        room.events.storageDidLoad.subscribeOnce(()=>partialSyncStorage(room)),\n        // Any time storage updates, send the new storage root\n        room.events.storage.subscribe(()=>partialSyncStorage(room)),\n        // Any time \"me\" or \"others\" updates, send the new values accordingly\n        room.events.self.subscribe(()=>partialSyncMe(room)),\n        room.events.others.subscribe(()=>partialSyncOthers(room)),\n        // Any time ydoc is updated, forward the update\n        room.events.ydoc.subscribe((update)=>syncYdocUpdate(room, update)),\n        // Any time a custom room event is received, forward it\n        room.events.customEvent.subscribe((eventData)=>forwardEvent(room, eventData))\n    ]);\n}\nfunction syncYdocUpdate(room, update) {\n    sendToPanel({\n        msg: \"room::sync::ydoc\",\n        roomId: room.id,\n        update\n    });\n}\nvar loadedAt = Date.now();\nvar eventCounter = 0;\nfunction nextEventId() {\n    return `event-${loadedAt}-${eventCounter++}`;\n}\nfunction forwardEvent(room, eventData) {\n    sendToPanel({\n        msg: \"room::events::custom-event\",\n        roomId: room.id,\n        event: {\n            type: \"CustomEvent\",\n            id: nextEventId(),\n            key: \"Event\",\n            connectionId: eventData.connectionId,\n            payload: eventData.event\n        }\n    });\n}\nfunction partialSyncConnection(room) {\n    sendToPanel({\n        msg: \"room::sync::partial\",\n        roomId: room.id,\n        status: room.getStatus()\n    });\n}\nfunction partialSyncStorage(room) {\n    const root = room.getStorageSnapshot();\n    if (root) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            storage: root.toTreeNode(\"root\").payload\n        });\n    }\n}\nfunction partialSyncMe(room) {\n    const me = room.__internal.getSelf_forDevTools();\n    if (me) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            me\n        });\n    }\n}\nfunction partialSyncOthers(room) {\n    const others = room.__internal.getOthers_forDevTools();\n    if (others) {\n        sendToPanel({\n            msg: \"room::sync::partial\",\n            roomId: room.id,\n            others\n        });\n    }\n}\nfunction fullSync(room) {\n    const root = room.getStorageSnapshot();\n    const me = room.__internal.getSelf_forDevTools();\n    const others = room.__internal.getOthers_forDevTools();\n    room.fetchYDoc(\"\");\n    sendToPanel({\n        msg: \"room::sync::full\",\n        roomId: room.id,\n        status: room.getStatus(),\n        storage: root?.toTreeNode(\"root\").payload ?? null,\n        me,\n        others\n    });\n}\nvar roomChannelListeners = /* @__PURE__ */ new Map();\nfunction stopRoomChannelListener(roomId) {\n    const listener = roomChannelListeners.get(roomId);\n    roomChannelListeners.delete(roomId);\n    if (listener) {\n        listener();\n    }\n}\nfunction linkDevTools(roomId, room) {\n    if (true) {\n        return;\n    }\n    sendToPanel({\n        msg: \"room::available\",\n        roomId,\n        clientVersion: VERSION\n    });\n    stopRoomChannelListener(roomId);\n    roomChannelListeners.set(roomId, // Returns the unsubscribe callback, that we store in the\n    // roomChannelListeners registry\n    onMessageFromPanel.subscribe((msg)=>{\n        switch(msg.msg){\n            case \"room::subscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        startSyncStream(room);\n                    }\n                    break;\n                }\n            case \"room::unsubscribe\":\n                {\n                    if (msg.roomId === roomId) {\n                        stopSyncStream(roomId);\n                    }\n                    break;\n                }\n        }\n    }));\n}\nfunction unlinkDevTools(roomId) {\n    if (true) {\n        return;\n    }\n    stopSyncStream(roomId);\n    stopRoomChannelListener(roomId);\n    sendToPanel({\n        msg: \"room::unavailable\",\n        roomId\n    });\n}\n// src/lib/deprecation.ts\nvar _emittedDeprecationWarnings = /* @__PURE__ */ new Set();\nfunction deprecate(message, key = message) {\n    if (true) {\n        if (!_emittedDeprecationWarnings.has(key)) {\n            _emittedDeprecationWarnings.add(key);\n            errorWithTitle(\"Deprecation warning\", message);\n        }\n    }\n}\nfunction deprecateIf(condition, message, key = message) {\n    if (true) {\n        if (condition) {\n            deprecate(message, key);\n        }\n    }\n}\nfunction throwUsageError(message) {\n    if (true) {\n        const usageError = new Error(message);\n        usageError.name = \"Usage error\";\n        errorWithTitle(\"Usage error\", message);\n        throw usageError;\n    }\n}\nfunction errorIf(condition, message) {\n    if (true) {\n        if (condition) {\n            throwUsageError(message);\n        }\n    }\n}\n// src/comments/comment-body.ts\nfunction isCommentBodyParagraph(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyText(element) {\n    return \"text\" in element && typeof element.text === \"string\";\n}\nfunction isCommentBodyMention(element) {\n    return \"type\" in element && element.type === \"mention\";\n}\nfunction isCommentBodyLink(element) {\n    return \"type\" in element && element.type === \"link\";\n}\nvar commentBodyElementsGuards = {\n    paragraph: isCommentBodyParagraph,\n    text: isCommentBodyText,\n    link: isCommentBodyLink,\n    mention: isCommentBodyMention\n};\nvar commentBodyElementsTypes = {\n    paragraph: \"block\",\n    text: \"inline\",\n    link: \"inline\",\n    mention: \"inline\"\n};\nfunction traverseCommentBody(body, elementOrVisitor, possiblyVisitor) {\n    if (!body || !body?.content) {\n        return;\n    }\n    const element = typeof elementOrVisitor === \"string\" ? elementOrVisitor : void 0;\n    const type = element ? commentBodyElementsTypes[element] : \"all\";\n    const guard = element ? commentBodyElementsGuards[element] : ()=>true;\n    const visitor = typeof elementOrVisitor === \"function\" ? elementOrVisitor : possiblyVisitor;\n    for (const block of body.content){\n        if (type === \"all\" || type === \"block\") {\n            if (guard(block)) {\n                visitor?.(block);\n            }\n        }\n        if (type === \"all\" || type === \"inline\") {\n            for (const inline of block.children){\n                if (guard(inline)) {\n                    visitor?.(inline);\n                }\n            }\n        }\n    }\n}\nfunction getMentionedIdsFromCommentBody(body) {\n    const mentionedIds = /* @__PURE__ */ new Set();\n    traverseCommentBody(body, \"mention\", (mention)=>mentionedIds.add(mention.id));\n    return Array.from(mentionedIds);\n}\nasync function resolveUsersInCommentBody(body, resolveUsers) {\n    const resolvedUsers = /* @__PURE__ */ new Map();\n    if (!resolveUsers) {\n        return resolvedUsers;\n    }\n    const userIds = getMentionedIdsFromCommentBody(body);\n    const users = await resolveUsers({\n        userIds\n    });\n    for (const [index, userId] of userIds.entries()){\n        const user = users?.[index];\n        if (user) {\n            resolvedUsers.set(userId, user);\n        }\n    }\n    return resolvedUsers;\n}\nvar htmlEscapables = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n};\nvar htmlEscapablesRegex = new RegExp(Object.keys(htmlEscapables).map((entity)=>`\\\\${entity}`).join(\"|\"), \"g\");\nfunction htmlSafe(value) {\n    return new HtmlSafeString([\n        String(value)\n    ], []);\n}\nfunction joinHtml(strings) {\n    if (strings.length <= 0) {\n        return new HtmlSafeString([\n            \"\"\n        ], []);\n    }\n    return new HtmlSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeHtml(value) {\n    if (value instanceof HtmlSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinHtml(value).toString();\n    }\n    return String(value).replace(htmlEscapablesRegex, (character)=>htmlEscapables[character]);\n}\nvar HtmlSafeString = class {\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeHtml(nn(this._values[i - 1])) + str;\n        });\n    }\n};\nfunction html(strings, ...values) {\n    return new HtmlSafeString(strings, values);\n}\nvar markdownEscapables = {\n    _: \"\\\\_\",\n    \"*\": \"\\\\*\",\n    \"#\": \"\\\\#\",\n    \"`\": \"\\\\`\",\n    \"~\": \"\\\\~\",\n    \"!\": \"\\\\!\",\n    \"|\": \"\\\\|\",\n    \"(\": \"\\\\(\",\n    \")\": \"\\\\)\",\n    \"{\": \"\\\\{\",\n    \"}\": \"\\\\}\",\n    \"[\": \"\\\\[\",\n    \"]\": \"\\\\]\"\n};\nvar markdownEscapablesRegex = new RegExp(Object.keys(markdownEscapables).map((entity)=>`\\\\${entity}`).join(\"|\"), \"g\");\nfunction joinMarkdown(strings) {\n    if (strings.length <= 0) {\n        return new MarkdownSafeString([\n            \"\"\n        ], []);\n    }\n    return new MarkdownSafeString([\n        \"\",\n        ...Array(strings.length - 1).fill(\"\"),\n        \"\"\n    ], strings);\n}\nfunction escapeMarkdown(value) {\n    if (value instanceof MarkdownSafeString) {\n        return value.toString();\n    }\n    if (Array.isArray(value)) {\n        return joinMarkdown(value).toString();\n    }\n    return String(value).replace(markdownEscapablesRegex, (character)=>markdownEscapables[character]);\n}\nvar MarkdownSafeString = class {\n    constructor(strings, values){\n        this._strings = strings;\n        this._values = values;\n    }\n    toString() {\n        return this._strings.reduce((result, str, i)=>{\n            return result + escapeMarkdown(nn(this._values[i - 1])) + str;\n        });\n    }\n};\nfunction markdown(strings, ...values) {\n    return new MarkdownSafeString(strings, values);\n}\nfunction toAbsoluteUrl(url) {\n    if (url.startsWith(\"http://\") || url.startsWith(\"https://\")) {\n        return url;\n    } else if (url.startsWith(\"www.\")) {\n        return \"https://\" + url;\n    }\n    return;\n}\nvar stringifyCommentBodyPlainElements = {\n    paragraph: ({ children })=>children,\n    text: ({ element })=>element.text,\n    link: ({ element })=>element.url,\n    mention: ({ element, user })=>{\n        return `@${user?.name ?? element.id}`;\n    }\n};\nvar stringifyCommentBodyHtmlElements = {\n    paragraph: ({ children })=>{\n        return children ? html`<p>${htmlSafe(children)}</p>` : children;\n    },\n    text: ({ element })=>{\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = html`<strong>${children}</strong>`;\n        }\n        if (element.italic) {\n            children = html`<em>${children}</em>`;\n        }\n        if (element.strikethrough) {\n            children = html`<s>${children}</s>`;\n        }\n        if (element.code) {\n            children = html`<code>${children}</code>`;\n        }\n        return children;\n    },\n    link: ({ element, href })=>{\n        return html`<a href=\"${href}\" target=\"_blank\" rel=\"noopener noreferrer\">${element.url}</a>`;\n    },\n    mention: ({ element, user })=>{\n        return html`<span data-mention>@${user?.name ?? element.id}</span>`;\n    }\n};\nvar stringifyCommentBodyMarkdownElements = {\n    paragraph: ({ children })=>{\n        return children;\n    },\n    text: ({ element })=>{\n        let children = element.text;\n        if (!children) {\n            return children;\n        }\n        if (element.bold) {\n            children = markdown`**${children}**`;\n        }\n        if (element.italic) {\n            children = markdown`_${children}_`;\n        }\n        if (element.strikethrough) {\n            children = markdown`~~${children}~~`;\n        }\n        if (element.code) {\n            children = markdown`\\`${children}\\``;\n        }\n        return children;\n    },\n    link: ({ element, href })=>{\n        return markdown`[${element.url}](${href})`;\n    },\n    mention: ({ element, user })=>{\n        return markdown`@${user?.name ?? element.id}`;\n    }\n};\nasync function stringifyCommentBody(body, options) {\n    const format = options?.format ?? \"plain\";\n    const separator = options?.separator ?? (format === \"markdown\" ? \"\\n\\n\" : \"\\n\");\n    const elements = {\n        ...format === \"html\" ? stringifyCommentBodyHtmlElements : format === \"markdown\" ? stringifyCommentBodyMarkdownElements : stringifyCommentBodyPlainElements,\n        ...options?.elements\n    };\n    const resolvedUsers = await resolveUsersInCommentBody(body, options?.resolveUsers);\n    const blocks = body.content.flatMap((block, blockIndex)=>{\n        switch(block.type){\n            case \"paragraph\":\n                {\n                    const inlines = block.children.flatMap((inline, inlineIndex)=>{\n                        if (isCommentBodyMention(inline)) {\n                            return inline.id ? [\n                                elements.mention({\n                                    element: inline,\n                                    user: resolvedUsers.get(inline.id)\n                                }, inlineIndex)\n                            ] : [];\n                        }\n                        if (isCommentBodyLink(inline)) {\n                            return [\n                                elements.link({\n                                    element: inline,\n                                    href: toAbsoluteUrl(inline.url) ?? inline.url\n                                }, inlineIndex)\n                            ];\n                        }\n                        if (isCommentBodyText(inline)) {\n                            return [\n                                elements.text({\n                                    element: inline\n                                }, inlineIndex)\n                            ];\n                        }\n                        return [];\n                    });\n                    return [\n                        elements.paragraph({\n                            element: block,\n                            children: inlines.join(\"\")\n                        }, blockIndex)\n                    ];\n                }\n            default:\n                return [];\n        }\n    });\n    return blocks.join(separator);\n}\nfunction convertToCommentData(data) {\n    const editedAt = data.editedAt ? new Date(data.editedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const reactions = data.reactions.map((reaction)=>({\n            ...reaction,\n            createdAt: new Date(reaction.createdAt)\n        }));\n    if (data.body) {\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt\n        };\n    } else {\n        const deletedAt = new Date(data.deletedAt);\n        return {\n            ...data,\n            reactions,\n            createdAt,\n            editedAt,\n            deletedAt\n        };\n    }\n}\nfunction convertToThreadData(data) {\n    const updatedAt = data.updatedAt ? new Date(data.updatedAt) : void 0;\n    const createdAt = new Date(data.createdAt);\n    const comments = data.comments.map((comment)=>convertToCommentData(comment));\n    return {\n        ...data,\n        createdAt,\n        updatedAt,\n        comments\n    };\n}\nfunction convertToCommentUserReaction(data) {\n    return {\n        ...data,\n        createdAt: new Date(data.createdAt)\n    };\n}\n// src/comments/index.ts\nfunction getAuthBearerHeaderFromAuthValue(authValue) {\n    if (authValue.type === \"public\") {\n        return authValue.publicApiKey;\n    } else {\n        return authValue.token.raw;\n    }\n}\nvar CommentsApiError = class extends Error {\n    constructor(message, status, details){\n        super(message);\n        this.message = message;\n        this.status = status;\n        this.details = details;\n    }\n};\nfunction createCommentsApi(roomId, getAuthValue, config) {\n    async function fetchJson(endpoint, options) {\n        const response = await fetchApi(roomId, endpoint, options);\n        if (!response.ok) {\n            if (response.status >= 400 && response.status < 600) {\n                let error3;\n                try {\n                    const errorBody = await response.json();\n                    error3 = new CommentsApiError(errorBody.message, response.status, errorBody);\n                } catch  {\n                    error3 = new CommentsApiError(response.statusText, response.status);\n                }\n                throw error3;\n            }\n        }\n        let body;\n        try {\n            body = await response.json();\n        } catch  {\n            body = {};\n        }\n        return body;\n    }\n    async function fetchApi(roomId2, endpoint, options) {\n        const authValue = await getAuthValue();\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(roomId2)}${endpoint}`, config.baseUrl);\n        return await fetch(url.toString(), {\n            ...options,\n            headers: {\n                ...options?.headers,\n                Authorization: `Bearer ${getAuthBearerHeaderFromAuthValue(authValue)}`\n            }\n        });\n    }\n    async function getThreads(options) {\n        const response = await fetchApi(roomId, \"/threads/search\", {\n            body: JSON.stringify({\n                ...options?.query?.metadata && {\n                    metadata: options.query.metadata\n                }\n            }),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\"\n        });\n        if (response.ok) {\n            const json = await response.json();\n            return json.data.map((thread)=>convertToThreadData(thread));\n        } else if (response.status === 404) {\n            return [];\n        } else {\n            throw new Error(\"There was an error while getting threads.\");\n        }\n    }\n    async function createThread({ metadata, body, commentId, threadId }) {\n        const thread = await fetchJson(\"/threads\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: threadId,\n                comment: {\n                    id: commentId,\n                    body\n                },\n                metadata\n            })\n        });\n        return convertToThreadData(thread);\n    }\n    async function editThreadMetadata({ metadata, threadId }) {\n        return await fetchJson(`/threads/${encodeURIComponent(threadId)}/metadata`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(metadata)\n        });\n    }\n    async function createComment({ threadId, commentId, body }) {\n        const comment = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id: commentId,\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function editComment({ threadId, commentId, body }) {\n        const comment = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                body\n            })\n        });\n        return convertToCommentData(comment);\n    }\n    async function deleteComment({ threadId, commentId }) {\n        await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}`, {\n            method: \"DELETE\"\n        });\n    }\n    async function addReaction({ threadId, commentId, emoji }) {\n        const reaction = await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}/reactions`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                emoji\n            })\n        });\n        return convertToCommentUserReaction(reaction);\n    }\n    async function removeReaction({ threadId, commentId, emoji }) {\n        await fetchJson(`/threads/${encodeURIComponent(threadId)}/comments/${encodeURIComponent(commentId)}/reactions/${encodeURIComponent(emoji)}`, {\n            method: \"DELETE\"\n        });\n    }\n    return {\n        getThreads,\n        createThread,\n        editThreadMetadata,\n        createComment,\n        editComment,\n        deleteComment,\n        addReaction,\n        removeReaction\n    };\n}\n// src/lib/position.ts\nvar MIN_CODE = 32;\nvar MAX_CODE = 126;\nvar NUM_DIGITS = MAX_CODE - MIN_CODE + 1;\nvar ZERO = nthDigit(0);\nvar ONE = nthDigit(1);\nvar ZERO_NINE = ZERO + nthDigit(-1);\nfunction nthDigit(n) {\n    const code = MIN_CODE + (n < 0 ? NUM_DIGITS + n : n);\n    if (code < MIN_CODE || code > MAX_CODE) {\n        throw new Error(`Invalid n value: ${n}`);\n    }\n    return String.fromCharCode(code);\n}\nfunction makePosition(x, y) {\n    if (x !== void 0 && y !== void 0) {\n        return between(x, y);\n    } else if (x !== void 0) {\n        return after(x);\n    } else if (y !== void 0) {\n        return before(y);\n    } else {\n        return ONE;\n    }\n}\nfunction before(pos) {\n    const lastIndex = pos.length - 1;\n    for(let i = 0; i <= lastIndex; i++){\n        const code = pos.charCodeAt(i);\n        if (code <= MIN_CODE) {\n            continue;\n        }\n        if (i === lastIndex) {\n            if (code === MIN_CODE + 1) {\n                return pos.substring(0, i) + ZERO_NINE;\n            } else {\n                return pos.substring(0, i) + String.fromCharCode(code - 1);\n            }\n        } else {\n            return pos.substring(0, i + 1);\n        }\n    }\n    return ONE;\n}\nfunction after(pos) {\n    for(let i = 0; i <= pos.length - 1; i++){\n        const code = pos.charCodeAt(i);\n        if (code >= MAX_CODE) {\n            continue;\n        }\n        return pos.substring(0, i) + String.fromCharCode(code + 1);\n    }\n    return pos + ONE;\n}\nfunction between(lo, hi) {\n    if (lo < hi) {\n        return _between(lo, hi);\n    } else if (lo > hi) {\n        return _between(hi, lo);\n    } else {\n        throw new Error(\"Cannot compute value between two equal positions\");\n    }\n}\nfunction _between(lo, hi) {\n    let index = 0;\n    const loLen = lo.length;\n    const hiLen = hi.length;\n    while(true){\n        const loCode = index < loLen ? lo.charCodeAt(index) : MIN_CODE;\n        const hiCode = index < hiLen ? hi.charCodeAt(index) : MAX_CODE;\n        if (loCode === hiCode) {\n            index++;\n            continue;\n        }\n        if (hiCode - loCode === 1) {\n            const size = index + 1;\n            let prefix = lo.substring(0, size);\n            if (prefix.length < size) {\n                prefix += ZERO.repeat(size - prefix.length);\n            }\n            const suffix = lo.substring(size);\n            const nines = \"\";\n            return prefix + _between(suffix, nines);\n        } else {\n            return takeN(lo, index) + String.fromCharCode(hiCode + loCode >> 1);\n        }\n    }\n}\nfunction takeN(pos, n) {\n    return n < pos.length ? pos.substring(0, n) : pos + ZERO.repeat(n - pos.length);\n}\nvar MIN_NON_ZERO_CODE = MIN_CODE + 1;\nfunction isPos(str) {\n    if (str === \"\") {\n        return false;\n    }\n    const lastIdx = str.length - 1;\n    const last = str.charCodeAt(lastIdx);\n    if (last < MIN_NON_ZERO_CODE || last > MAX_CODE) {\n        return false;\n    }\n    for(let i = 0; i < lastIdx; i++){\n        const code = str.charCodeAt(i);\n        if (code < MIN_CODE || code > MAX_CODE) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction convertToPos(str) {\n    const codes = [];\n    for(let i = 0; i < str.length; i++){\n        const code = str.charCodeAt(i);\n        codes.push(code < MIN_CODE ? MIN_CODE : code > MAX_CODE ? MAX_CODE : code);\n    }\n    while(codes.length > 0 && codes[codes.length - 1] === MIN_CODE){\n        codes.length--;\n    }\n    return codes.length > 0 ? String.fromCharCode(...codes) : // Edge case: the str was a 0-only string, which is invalid. Default back to .1\n    ONE;\n}\nfunction asPos(str) {\n    return isPos(str) ? str : convertToPos(str);\n}\n// src/protocol/Op.ts\nvar OpCode = /* @__PURE__ */ ((OpCode2)=>{\n    OpCode2[OpCode2[\"INIT\"] = 0] = \"INIT\";\n    OpCode2[OpCode2[\"SET_PARENT_KEY\"] = 1] = \"SET_PARENT_KEY\";\n    OpCode2[OpCode2[\"CREATE_LIST\"] = 2] = \"CREATE_LIST\";\n    OpCode2[OpCode2[\"UPDATE_OBJECT\"] = 3] = \"UPDATE_OBJECT\";\n    OpCode2[OpCode2[\"CREATE_OBJECT\"] = 4] = \"CREATE_OBJECT\";\n    OpCode2[OpCode2[\"DELETE_CRDT\"] = 5] = \"DELETE_CRDT\";\n    OpCode2[OpCode2[\"DELETE_OBJECT_KEY\"] = 6] = \"DELETE_OBJECT_KEY\";\n    OpCode2[OpCode2[\"CREATE_MAP\"] = 7] = \"CREATE_MAP\";\n    OpCode2[OpCode2[\"CREATE_REGISTER\"] = 8] = \"CREATE_REGISTER\";\n    return OpCode2;\n})(OpCode || {});\nfunction ackOp(opId) {\n    return {\n        type: 5 /* DELETE_CRDT */ ,\n        id: \"ACK\",\n        // (H)ACK\n        opId\n    };\n}\nfunction isAckOp(op) {\n    return op.type === 5 /* DELETE_CRDT */  && op.id === \"ACK\";\n}\n// src/crdts/AbstractCrdt.ts\nfunction crdtAsLiveNode(value) {\n    return value;\n}\nfunction HasParent(node, key, pos = asPos(key)) {\n    return Object.freeze({\n        type: \"HasParent\",\n        node,\n        key,\n        pos\n    });\n}\nvar NoParent = Object.freeze({\n    type: \"NoParent\"\n});\nfunction Orphaned(oldKey, oldPos = asPos(oldKey)) {\n    return Object.freeze({\n        type: \"Orphaned\",\n        oldKey,\n        oldPos\n    });\n}\nvar AbstractCrdt = class {\n    constructor(){\n        /** @internal */ this._parent = NoParent;\n    }\n    /** @internal */ _getParentKeyOrThrow() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _parentPos() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.pos;\n            case \"NoParent\":\n                throw new Error(\"Parent key is missing\");\n            case \"Orphaned\":\n                return this.parent.oldPos;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ get _pool() {\n        return this.__pool;\n    }\n    get roomId() {\n        return this.__pool ? this.__pool.roomId : null;\n    }\n    /** @internal */ get _id() {\n        return this.__id;\n    }\n    /** @internal */ get parent() {\n        return this._parent;\n    }\n    /** @internal */ get _parentKey() {\n        switch(this.parent.type){\n            case \"HasParent\":\n                return this.parent.key;\n            case \"NoParent\":\n                return null;\n            case \"Orphaned\":\n                return this.parent.oldKey;\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _apply(op, _isLocal) {\n        switch(op.type){\n            case 5 /* DELETE_CRDT */ :\n                {\n                    if (this.parent.type === \"HasParent\") {\n                        return this.parent.node._detachChild(crdtAsLiveNode(this));\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _setParentLink(newParentNode, newParentKey) {\n        switch(this.parent.type){\n            case \"HasParent\":\n                if (this.parent.node !== newParentNode) {\n                    throw new Error(\"Cannot set parent: node already has a parent\");\n                } else {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            case \"Orphaned\":\n            case \"NoParent\":\n                {\n                    this._parent = HasParent(newParentNode, newParentKey);\n                    return;\n                }\n            default:\n                return assertNever(this.parent, \"Unknown state\");\n        }\n    }\n    /** @internal */ _attach(id, pool) {\n        if (this.__id || this.__pool) {\n            throw new Error(\"Cannot attach node: already attached\");\n        }\n        pool.addNode(id, crdtAsLiveNode(this));\n        this.__id = id;\n        this.__pool = pool;\n    }\n    /** @internal */ _detach() {\n        if (this.__pool && this.__id) {\n            this.__pool.deleteNode(this.__id);\n        }\n        switch(this.parent.type){\n            case \"HasParent\":\n                {\n                    this._parent = Orphaned(this.parent.key, this.parent.pos);\n                    break;\n                }\n            case \"NoParent\":\n                {\n                    this._parent = NoParent;\n                    break;\n                }\n            case \"Orphaned\":\n                {\n                    break;\n                }\n            default:\n                assertNever(this.parent, \"Unknown state\");\n        }\n        this.__pool = void 0;\n    }\n    /**\n   * @internal\n   *\n   * Clear the Immutable cache, so that the next call to `.toImmutable()` will\n   * recompute the equivalent Immutable value again.  Call this after every\n   * mutation to the Live node.\n   */ invalidate() {\n        if (this._cachedImmutable !== void 0 || this._cachedTreeNode !== void 0) {\n            this._cachedImmutable = void 0;\n            this._cachedTreeNode = void 0;\n            if (this.parent.type === \"HasParent\") {\n                this.parent.node.invalidate();\n            }\n        }\n    }\n    /**\n   * @internal\n   *\n   * Return an snapshot of this Live tree for use in DevTools.\n   */ toTreeNode(key) {\n        if (this._cachedTreeNode === void 0 || this._cachedTreeNodeKey !== key) {\n            this._cachedTreeNodeKey = key;\n            this._cachedTreeNode = this._toTreeNode(key);\n        }\n        return this._cachedTreeNode;\n    }\n    /**\n   * Return an immutable snapshot of this Live node and its children.\n   */ toImmutable() {\n        if (this._cachedImmutable === void 0) {\n            this._cachedImmutable = this._toImmutable();\n        }\n        return this._cachedImmutable;\n    }\n};\n// src/protocol/SerializedCrdt.ts\nvar CrdtType = /* @__PURE__ */ ((CrdtType2)=>{\n    CrdtType2[CrdtType2[\"OBJECT\"] = 0] = \"OBJECT\";\n    CrdtType2[CrdtType2[\"LIST\"] = 1] = \"LIST\";\n    CrdtType2[CrdtType2[\"MAP\"] = 2] = \"MAP\";\n    CrdtType2[CrdtType2[\"REGISTER\"] = 3] = \"REGISTER\";\n    return CrdtType2;\n})(CrdtType || {});\nfunction isRootCrdt(crdt) {\n    return crdt.type === 0 /* OBJECT */  && !isChildCrdt(crdt);\n}\nfunction isChildCrdt(crdt) {\n    return crdt.parentId !== void 0 && crdt.parentKey !== void 0;\n}\n// src/lib/nanoid.ts\nfunction nanoid(length = 7) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,./;[]~!@#$%&*()_+=-\";\n    const len = alphabet.length;\n    return Array.from({\n        length\n    }, ()=>alphabet.charAt(Math.floor(Math.random() * len))).join(\"\");\n}\n// src/crdts/LiveRegister.ts\nvar LiveRegister = class _LiveRegister extends AbstractCrdt {\n    constructor(data){\n        super();\n        this._data = data;\n    }\n    get data() {\n        return this._data;\n    }\n    /** @internal */ static _deserialize([id, item], _parentToChildren, pool) {\n        const register = new _LiveRegister(item.data);\n        register._attach(id, pool);\n        return register;\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize register if parentId or parentKey is undefined\");\n        }\n        return [\n            {\n                type: 8 /* CREATE_REGISTER */ ,\n                opId: pool?.generateOpId(),\n                id: this._id,\n                parentId,\n                parentKey,\n                data: this.data\n            }\n        ];\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveRegister if parent is missing\");\n        }\n        return {\n            type: 3 /* REGISTER */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key,\n            data: this.data\n        };\n    }\n    /** @internal */ _attachChild(_op) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _detachChild(_crdt) {\n        throw new Error(\"Method not implemented.\");\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"Json\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: this._data\n        };\n    }\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    clone() {\n        return deepClone(this.data);\n    }\n};\n// src/crdts/LiveList.ts\nfunction compareNodePosition(itemA, itemB) {\n    const posA = itemA._parentPos;\n    const posB = itemB._parentPos;\n    return posA === posB ? 0 : posA < posB ? -1 : 1;\n}\nvar LiveList = class _LiveList extends AbstractCrdt {\n    constructor(items = []){\n        super();\n        this._items = [];\n        this._implicitlyDeletedItems = /* @__PURE__ */ new WeakSet();\n        this._unacknowledgedSets = /* @__PURE__ */ new Map();\n        let position = void 0;\n        for (const item of items){\n            const newPosition = makePosition(position);\n            const node = lsonToLiveNode(item);\n            node._setParentLink(this, newPosition);\n            this._items.push(node);\n            position = newPosition;\n        }\n    }\n    /** @internal */ static _deserialize([id], parentToChildren, pool) {\n        const list = new _LiveList();\n        list._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return list;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(list, crdt.parentKey);\n            list._insertAndSort(child);\n        }\n        return list;\n    }\n    /**\n   * @internal\n   * This function assumes that the resulting ops will be sent to the server if they have an 'opId'\n   * so we mutate _unacknowledgedSets to avoid potential flickering\n   * https://github.com/liveblocks/liveblocks/pull/1177\n   *\n   * This is quite unintuitive and should disappear as soon as\n   * we introduce an explicit LiveList.Set operation\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool?.generateOpId(),\n            type: 2 /* CREATE_LIST */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const item of this._items){\n            const parentKey2 = item._getParentKeyOrThrow();\n            const childOps = HACK_addIntentAndDeletedIdToOperation(item._toOps(this._id, parentKey2, pool), void 0);\n            const childOpId = childOps[0].opId;\n            if (childOpId !== void 0) {\n                this._unacknowledgedSets.set(parentKey2, childOpId);\n            }\n            ops.push(...childOps);\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   *\n   * Adds a new item into the sorted list, in the correct position.\n   */ _insertAndSort(item) {\n        this._items.push(item);\n        this._sortItems();\n    }\n    /** @internal */ _sortItems() {\n        this._items.sort(compareNodePosition);\n        this.invalidate();\n    }\n    /** @internal */ _indexOfPosition(position) {\n        return this._items.findIndex((item)=>item._getParentKeyOrThrow() === position);\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const item of this._items){\n            item._attach(pool.generateId(), pool);\n        }\n    }\n    /** @internal */ _detach() {\n        super._detach();\n        for (const item of this._items){\n            item._detach();\n        }\n    }\n    /** @internal */ _applySetRemote(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        child._attach(id, this._pool);\n        child._setParentLink(this, key);\n        const deletedId = op.deletedId;\n        const indexOfItemWithSamePosition = this._indexOfPosition(key);\n        if (indexOfItemWithSamePosition !== -1) {\n            const itemWithSamePosition = this._items[indexOfItemWithSamePosition];\n            if (itemWithSamePosition._id === deletedId) {\n                itemWithSamePosition._detach();\n                this._items[indexOfItemWithSamePosition] = child;\n                return {\n                    modified: makeUpdate(this, [\n                        setDelta(indexOfItemWithSamePosition, child)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                this._implicitlyDeletedItems.add(itemWithSamePosition);\n                this._items[indexOfItemWithSamePosition] = child;\n                const delta = [\n                    setDelta(indexOfItemWithSamePosition, child)\n                ];\n                const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n                if (deleteDelta2) {\n                    delta.push(deleteDelta2);\n                }\n                return {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            }\n        } else {\n            const updates = [];\n            const deleteDelta2 = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deleteDelta2) {\n                updates.push(deleteDelta2);\n            }\n            this._insertAndSort(child);\n            updates.push(insertDelta(this._indexOfPosition(key), child));\n            return {\n                reverse: [],\n                modified: makeUpdate(this, updates)\n            };\n        }\n    }\n    /** @internal */ _applySetAck(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const delta = [];\n        const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n        if (deletedDelta) {\n            delta.push(deletedDelta);\n        }\n        const unacknowledgedOpId = this._unacknowledgedSets.get(op.parentKey);\n        if (unacknowledgedOpId !== void 0) {\n            if (unacknowledgedOpId !== op.opId) {\n                return delta.length === 0 ? {\n                    modified: false\n                } : {\n                    modified: makeUpdate(this, delta),\n                    reverse: []\n                };\n            } else {\n                this._unacknowledgedSets.delete(op.parentKey);\n            }\n        }\n        const indexOfItemWithSamePosition = this._indexOfPosition(op.parentKey);\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        if (existingItem !== void 0) {\n            if (existingItem._parentKey === op.parentKey) {\n                return {\n                    modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                    reverse: []\n                };\n            }\n            if (indexOfItemWithSamePosition !== -1) {\n                this._implicitlyDeletedItems.add(this._items[indexOfItemWithSamePosition]);\n                this._items.splice(indexOfItemWithSamePosition, 1);\n                delta.push(deleteDelta(indexOfItemWithSamePosition));\n            }\n            const previousIndex = this._items.indexOf(existingItem);\n            existingItem._setParentLink(this, op.parentKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(existingItem);\n            if (newIndex !== previousIndex) {\n                delta.push(moveDelta(previousIndex, newIndex, existingItem));\n            }\n            return {\n                modified: delta.length > 0 ? makeUpdate(this, delta) : false,\n                reverse: []\n            };\n        } else {\n            const orphan = this._pool.getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, op.parentKey);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const recreatedItemIndex = this._items.indexOf(orphan);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(recreatedItemIndex, orphan) : setDelta(recreatedItemIndex, orphan),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (indexOfItemWithSamePosition !== -1) {\n                    this._items.splice(indexOfItemWithSamePosition, 1);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, op.parentKey);\n                return {\n                    modified: makeUpdate(this, [\n                        // If there is an item at this position, update is a set, else it's an insert\n                        indexOfItemWithSamePosition === -1 ? insertDelta(newIndex, newItem) : setDelta(newIndex, newItem),\n                        ...delta\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /**\n   * Returns the update delta of the deletion or null\n   * @internal\n   */ _detachItemAssociatedToSetOperation(deletedId) {\n        if (deletedId === void 0 || this._pool === void 0) {\n            return null;\n        }\n        const deletedItem = this._pool.getNode(deletedId);\n        if (deletedItem === void 0) {\n            return null;\n        }\n        const result = this._detachChild(deletedItem);\n        if (result.modified === false) {\n            return null;\n        }\n        return result.modified.updates[0];\n    }\n    /** @internal */ _applyRemoteInsert(op) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const key = asPos(op.parentKey);\n        const existingItemIndex = this._indexOfPosition(key);\n        if (existingItemIndex !== -1) {\n            this._shiftItemPosition(existingItemIndex, key);\n        }\n        const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, newItem)\n            ]),\n            reverse: []\n        };\n    }\n    /** @internal */ _applyInsertAck(op) {\n        const existingItem = this._items.find((item)=>item._id === op.id);\n        const key = asPos(op.parentKey);\n        const itemIndexAtPosition = this._indexOfPosition(key);\n        if (existingItem) {\n            if (existingItem._parentKey === key) {\n                return {\n                    modified: false\n                };\n            } else {\n                const oldPositionIndex = this._items.indexOf(existingItem);\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                existingItem._setParentLink(this, key);\n                this._sortItems();\n                const newIndex = this._indexOfPosition(key);\n                if (newIndex === oldPositionIndex) {\n                    return {\n                        modified: false\n                    };\n                }\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(oldPositionIndex, newIndex, existingItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        } else {\n            const orphan = nn(this._pool).getNode(op.id);\n            if (orphan && this._implicitlyDeletedItems.has(orphan)) {\n                orphan._setParentLink(this, key);\n                this._implicitlyDeletedItems.delete(orphan);\n                this._insertAndSort(orphan);\n                const newIndex = this._indexOfPosition(key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, orphan)\n                    ]),\n                    reverse: []\n                };\n            } else {\n                if (itemIndexAtPosition !== -1) {\n                    this._shiftItemPosition(itemIndexAtPosition, key);\n                }\n                const { newItem, newIndex } = this._createAttachItemAndSort(op, key);\n                return {\n                    modified: makeUpdate(this, [\n                        insertDelta(newIndex, newItem)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applyInsertUndoRedo(op) {\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (this._pool?.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const existingItemIndex = this._indexOfPosition(key);\n        let newKey = key;\n        if (existingItemIndex !== -1) {\n            const before2 = this._items[existingItemIndex]?._parentPos;\n            const after2 = this._items[existingItemIndex + 1]?._parentPos;\n            newKey = makePosition(before2, after2);\n            child._setParentLink(this, newKey);\n        }\n        this._insertAndSort(child);\n        const newIndex = this._indexOfPosition(newKey);\n        return {\n            modified: makeUpdate(this, [\n                insertDelta(newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ]\n        };\n    }\n    /** @internal */ _applySetUndoRedo(op) {\n        const { id, parentKey: key } = op;\n        const child = creationOpToLiveNode(op);\n        if (this._pool?.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        this._unacknowledgedSets.set(key, nn(op.opId));\n        const indexOfItemWithSameKey = this._indexOfPosition(key);\n        child._attach(id, nn(this._pool));\n        child._setParentLink(this, key);\n        const newKey = key;\n        if (indexOfItemWithSameKey !== -1) {\n            const existingItem = this._items[indexOfItemWithSameKey];\n            existingItem._detach();\n            this._items[indexOfItemWithSameKey] = child;\n            const reverse = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(nn(this._id), key, this._pool), op.id);\n            const delta = [\n                setDelta(indexOfItemWithSameKey, child)\n            ];\n            const deletedDelta = this._detachItemAssociatedToSetOperation(op.deletedId);\n            if (deletedDelta) {\n                delta.push(deletedDelta);\n            }\n            return {\n                modified: makeUpdate(this, delta),\n                reverse\n            };\n        } else {\n            this._insertAndSort(child);\n            this._detachItemAssociatedToSetOperation(op.deletedId);\n            const newIndex = this._indexOfPosition(newKey);\n            return {\n                reverse: [\n                    {\n                        type: 5 /* DELETE_CRDT */ ,\n                        id\n                    }\n                ],\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ])\n            };\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        let result;\n        if (op.intent === \"set\") {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applySetRemote(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applySetAck(op);\n            } else {\n                result = this._applySetUndoRedo(op);\n            }\n        } else {\n            if (source === 1 /* REMOTE */ ) {\n                result = this._applyRemoteInsert(op);\n            } else if (source === 2 /* ACK */ ) {\n                result = this._applyInsertAck(op);\n            } else {\n                result = this._applyInsertUndoRedo(op);\n            }\n        }\n        if (result.modified !== false) {\n            this.invalidate();\n        }\n        return result;\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(nn(this._id), parentKey, this._pool);\n            const indexToDelete = this._items.indexOf(child);\n            if (indexToDelete === -1) {\n                return {\n                    modified: false\n                };\n            }\n            this._items.splice(indexToDelete, 1);\n            this.invalidate();\n            child._detach();\n            return {\n                modified: makeUpdate(this, [\n                    deleteDelta(indexToDelete)\n                ]),\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /** @internal */ _applySetChildKeyRemote(newKey, child) {\n        if (this._implicitlyDeletedItems.has(child)) {\n            this._implicitlyDeletedItems.delete(child);\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            const newIndex = this._items.indexOf(child);\n            return {\n                modified: makeUpdate(this, [\n                    insertDelta(newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n        const previousKey = child._parentKey;\n        if (newKey === previousKey) {\n            return {\n                modified: false\n            };\n        }\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex === -1) {\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        } else {\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            const previousIndex = this._items.indexOf(child);\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (newIndex === previousIndex) {\n                return {\n                    modified: false\n                };\n            }\n            return {\n                modified: makeUpdate(this, [\n                    moveDelta(previousIndex, newIndex, child)\n                ]),\n                reverse: []\n            };\n        }\n    }\n    /** @internal */ _applySetChildKeyAck(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        if (this._implicitlyDeletedItems.has(child)) {\n            const existingItemIndex = this._indexOfPosition(newKey);\n            this._implicitlyDeletedItems.delete(child);\n            if (existingItemIndex !== -1) {\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._insertAndSort(child);\n            return {\n                modified: false\n            };\n        } else {\n            if (newKey === previousKey) {\n                return {\n                    modified: false\n                };\n            }\n            const previousIndex = this._items.indexOf(child);\n            const existingItemIndex = this._indexOfPosition(newKey);\n            if (existingItemIndex !== -1) {\n                this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n            }\n            child._setParentLink(this, newKey);\n            this._sortItems();\n            const newIndex = this._items.indexOf(child);\n            if (previousIndex === newIndex) {\n                return {\n                    modified: false\n                };\n            } else {\n                return {\n                    modified: makeUpdate(this, [\n                        moveDelta(previousIndex, newIndex, child)\n                    ]),\n                    reverse: []\n                };\n            }\n        }\n    }\n    /** @internal */ _applySetChildKeyUndoRedo(newKey, child) {\n        const previousKey = nn(child._parentKey);\n        const previousIndex = this._items.indexOf(child);\n        const existingItemIndex = this._indexOfPosition(newKey);\n        if (existingItemIndex !== -1) {\n            this._items[existingItemIndex]._setParentLink(this, makePosition(newKey, this._items[existingItemIndex + 1]?._parentPos));\n        }\n        child._setParentLink(this, newKey);\n        this._sortItems();\n        const newIndex = this._items.indexOf(child);\n        if (previousIndex === newIndex) {\n            return {\n                modified: false\n            };\n        }\n        return {\n            modified: makeUpdate(this, [\n                moveDelta(previousIndex, newIndex, child)\n            ]),\n            reverse: [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(child._id),\n                    parentKey: previousKey\n                }\n            ]\n        };\n    }\n    /** @internal */ _setChildKey(newKey, child, source) {\n        if (source === 1 /* REMOTE */ ) {\n            return this._applySetChildKeyRemote(newKey, child);\n        } else if (source === 2 /* ACK */ ) {\n            return this._applySetChildKeyAck(newKey, child);\n        } else {\n            return this._applySetChildKeyUndoRedo(newKey, child);\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        return super._apply(op, isLocal);\n    }\n    /** @internal */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveList if parent is missing\");\n        }\n        return {\n            type: 1 /* LIST */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns the number of elements.\n   */ get length() {\n        return this._items.length;\n    }\n    /**\n   * Adds one element to the end of the LiveList.\n   * @param element The element to add to the end of the LiveList.\n   */ push(element) {\n        this._pool?.assertStorageIsWritable();\n        return this.insert(element, this.length);\n    }\n    /**\n   * Inserts one element at a specified index.\n   * @param element The element to insert.\n   * @param index The index at which you want to insert the element.\n   */ insert(element, index) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index > this._items.length) {\n            throw new Error(`Cannot insert list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length}`);\n        }\n        const before2 = this._items[index - 1] ? this._items[index - 1]._parentPos : void 0;\n        const after2 = this._items[index] ? this._items[index]._parentPos : void 0;\n        const position = makePosition(before2, after2);\n        const value = lsonToLiveNode(element);\n        value._setParentLink(this, position);\n        this._insertAndSort(value);\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            this._pool.dispatch(value._toOps(this._id, position, this._pool), [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        insertDelta(index, value)\n                    ])\n                ]\n            ]));\n        }\n    }\n    /**\n   * Move one element from one index to another.\n   * @param index The index of the element to move\n   * @param targetIndex The index where the element should be after moving.\n   */ move(index, targetIndex) {\n        this._pool?.assertStorageIsWritable();\n        if (targetIndex < 0) {\n            throw new Error(\"targetIndex cannot be less than 0\");\n        }\n        if (targetIndex >= this._items.length) {\n            throw new Error(\"targetIndex cannot be greater or equal than the list length\");\n        }\n        if (index < 0) {\n            throw new Error(\"index cannot be less than 0\");\n        }\n        if (index >= this._items.length) {\n            throw new Error(\"index cannot be greater or equal than the list length\");\n        }\n        let beforePosition = null;\n        let afterPosition = null;\n        if (index < targetIndex) {\n            afterPosition = targetIndex === this._items.length - 1 ? void 0 : this._items[targetIndex + 1]._parentPos;\n            beforePosition = this._items[targetIndex]._parentPos;\n        } else {\n            afterPosition = this._items[targetIndex]._parentPos;\n            beforePosition = targetIndex === 0 ? void 0 : this._items[targetIndex - 1]._parentPos;\n        }\n        const position = makePosition(beforePosition, afterPosition);\n        const item = this._items[index];\n        const previousPosition = item._getParentKeyOrThrow();\n        item._setParentLink(this, position);\n        this._sortItems();\n        if (this._pool && this._id) {\n            const storageUpdates = /* @__PURE__ */ new Map([\n                [\n                    this._id,\n                    makeUpdate(this, [\n                        moveDelta(index, targetIndex, item)\n                    ])\n                ]\n            ]);\n            this._pool.dispatch([\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    opId: this._pool.generateOpId(),\n                    parentKey: position\n                }\n            ], [\n                {\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id: nn(item._id),\n                    parentKey: previousPosition\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Deletes an element at the specified index\n   * @param index The index of the element to delete\n   */ delete(index) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error(`Cannot delete list item at index \"${index}\". index should be between 0 and ${this._items.length - 1}`);\n        }\n        const item = this._items[index];\n        item._detach();\n        this._items.splice(index, 1);\n        this.invalidate();\n        if (this._pool) {\n            const childRecordId = item._id;\n            if (childRecordId) {\n                const storageUpdates = /* @__PURE__ */ new Map();\n                storageUpdates.set(nn(this._id), makeUpdate(this, [\n                    deleteDelta(index)\n                ]));\n                this._pool.dispatch([\n                    {\n                        id: childRecordId,\n                        opId: this._pool.generateOpId(),\n                        type: 5 /* DELETE_CRDT */ \n                    }\n                ], item._toOps(nn(this._id), item._getParentKeyOrThrow()), storageUpdates);\n            }\n        }\n    }\n    clear() {\n        this._pool?.assertStorageIsWritable();\n        if (this._pool) {\n            const ops = [];\n            const reverseOps = [];\n            const updateDelta = [];\n            for (const item of this._items){\n                item._detach();\n                const childId = item._id;\n                if (childId) {\n                    ops.push({\n                        type: 5 /* DELETE_CRDT */ ,\n                        id: childId,\n                        opId: this._pool.generateOpId()\n                    });\n                    reverseOps.push(...item._toOps(nn(this._id), item._getParentKeyOrThrow()));\n                    updateDelta.push(deleteDelta(0));\n                }\n            }\n            this._items = [];\n            this.invalidate();\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(nn(this._id), makeUpdate(this, updateDelta));\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        } else {\n            for (const item of this._items){\n                item._detach();\n            }\n            this._items = [];\n            this.invalidate();\n        }\n    }\n    set(index, item) {\n        this._pool?.assertStorageIsWritable();\n        if (index < 0 || index >= this._items.length) {\n            throw new Error(`Cannot set list item at index \"\u001d${index}\". index should be between 0 and ${this._items.length - 1}`);\n        }\n        const existingItem = this._items[index];\n        const position = existingItem._getParentKeyOrThrow();\n        const existingId = existingItem._id;\n        existingItem._detach();\n        const value = lsonToLiveNode(item);\n        value._setParentLink(this, position);\n        this._items[index] = value;\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            value._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, makeUpdate(this, [\n                setDelta(index, value)\n            ]));\n            const ops = HACK_addIntentAndDeletedIdToOperation(value._toOps(this._id, position, this._pool), existingId);\n            this._unacknowledgedSets.set(position, nn(ops[0].opId));\n            const reverseOps = HACK_addIntentAndDeletedIdToOperation(existingItem._toOps(this._id, position, void 0), id);\n            this._pool.dispatch(ops, reverseOps, storageUpdates);\n        }\n    }\n    /**\n   * Returns an Array of all the elements in the LiveList.\n   */ toArray() {\n        return this._items.map((entry)=>liveNodeToLson(entry));\n    }\n    /**\n   * Tests whether all elements pass the test implemented by the provided function.\n   * @param predicate Function to test for each element, taking two arguments (the element and its index).\n   * @returns true if the predicate function returns a truthy value for every element. Otherwise, false.\n   */ every(predicate) {\n        return this.toArray().every(predicate);\n    }\n    /**\n   * Creates an array with all elements that pass the test implemented by the provided function.\n   * @param predicate Function to test each element of the LiveList. Return a value that coerces to true to keep the element, or to false otherwise.\n   * @returns An array with the elements that pass the test.\n   */ filter(predicate) {\n        return this.toArray().filter(predicate);\n    }\n    /**\n   * Returns the first element that satisfies the provided testing function.\n   * @param predicate Function to execute on each value.\n   * @returns The value of the first element in the LiveList that satisfies the provided testing function. Otherwise, undefined is returned.\n   */ find(predicate) {\n        return this.toArray().find(predicate);\n    }\n    /**\n   * Returns the index of the first element in the LiveList that satisfies the provided testing function.\n   * @param predicate Function to execute on each value until the function returns true, indicating that the satisfying element was found.\n   * @returns The index of the first element in the LiveList that passes the test. Otherwise, -1.\n   */ findIndex(predicate) {\n        return this.toArray().findIndex(predicate);\n    }\n    /**\n   * Executes a provided function once for each element.\n   * @param callbackfn Function to execute on each element.\n   */ forEach(callbackfn) {\n        return this.toArray().forEach(callbackfn);\n    }\n    /**\n   * Get the element at the specified index.\n   * @param index The index on the element to get.\n   * @returns The element at the specified index or undefined.\n   */ get(index) {\n        if (index < 0 || index >= this._items.length) {\n            return void 0;\n        }\n        return liveNodeToLson(this._items[index]);\n    }\n    /**\n   * Returns the first index at which a given element can be found in the LiveList, or -1 if it is not present.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index to start the search at.\n   * @returns The first index of the element in the LiveList; -1 if not found.\n   */ indexOf(searchElement, fromIndex) {\n        return this.toArray().indexOf(searchElement, fromIndex);\n    }\n    /**\n   * Returns the last index at which a given element can be found in the LiveList, or -1 if it is not present. The LiveLsit is searched backwards, starting at fromIndex.\n   * @param searchElement Element to locate.\n   * @param fromIndex The index at which to start searching backwards.\n   * @returns\n   */ lastIndexOf(searchElement, fromIndex) {\n        return this.toArray().lastIndexOf(searchElement, fromIndex);\n    }\n    /**\n   * Creates an array populated with the results of calling a provided function on every element.\n   * @param callback Function that is called for every element.\n   * @returns An array with each element being the result of the callback function.\n   */ map(callback) {\n        return this._items.map((entry, i)=>callback(liveNodeToLson(entry), //                    ^^^^^^^^\n            //                    FIXME! This isn't safe.\n            i));\n    }\n    /**\n   * Tests whether at least one element in the LiveList passes the test implemented by the provided function.\n   * @param predicate Function to test for each element.\n   * @returns true if the callback function returns a truthy value for at least one element. Otherwise, false.\n   */ some(predicate) {\n        return this.toArray().some(predicate);\n    }\n    [Symbol.iterator]() {\n        return new LiveListIterator(this._items);\n    }\n    /** @internal */ _createAttachItemAndSort(op, key) {\n        const newItem = creationOpToLiveNode(op);\n        newItem._attach(op.id, nn(this._pool));\n        newItem._setParentLink(this, key);\n        this._insertAndSort(newItem);\n        const newIndex = this._indexOfPosition(key);\n        return {\n            newItem,\n            newIndex\n        };\n    }\n    /** @internal */ _shiftItemPosition(index, key) {\n        const shiftedPosition = makePosition(key, this._items.length > index + 1 ? this._items[index + 1]?._parentPos : void 0);\n        this._items[index]._setParentLink(this, shiftedPosition);\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"LiveList\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: this._items.map((item, index)=>item.toTreeNode(index.toString()))\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = this._items.map((node)=>node.toImmutable());\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveList(this._items.map((item)=>item.clone()));\n    }\n};\nvar LiveListIterator = class {\n    constructor(items){\n        this._innerIterator = items[Symbol.iterator]();\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const result = this._innerIterator.next();\n        if (result.done) {\n            return {\n                done: true,\n                value: void 0\n            };\n        }\n        const value = liveNodeToLson(result.value);\n        return {\n            value\n        };\n    }\n};\nfunction makeUpdate(liveList, deltaUpdates) {\n    return {\n        node: liveList,\n        type: \"LiveList\",\n        updates: deltaUpdates\n    };\n}\nfunction setDelta(index, item) {\n    return {\n        index,\n        type: \"set\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction deleteDelta(index) {\n    return {\n        index,\n        type: \"delete\"\n    };\n}\nfunction insertDelta(index, item) {\n    return {\n        index,\n        type: \"insert\",\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction moveDelta(previousIndex, index, item) {\n    return {\n        index,\n        type: \"move\",\n        previousIndex,\n        item: item instanceof LiveRegister ? item.data : item\n    };\n}\nfunction HACK_addIntentAndDeletedIdToOperation(ops, deletedId) {\n    return ops.map((op, index)=>{\n        if (index === 0) {\n            const firstOp = op;\n            return {\n                ...firstOp,\n                intent: \"set\",\n                deletedId\n            };\n        } else {\n            return op;\n        }\n    });\n}\n// src/lib/freeze.ts\nvar freeze =  false ? /* istanbul ignore next */ 0 : Object.freeze;\n// src/crdts/LiveMap.ts\nvar LiveMap = class _LiveMap extends AbstractCrdt {\n    constructor(entries2){\n        super();\n        this.unacknowledgedSet = /* @__PURE__ */ new Map();\n        if (entries2) {\n            const mappedEntries = [];\n            for (const [key, value] of entries2){\n                const node = lsonToLiveNode(value);\n                node._setParentLink(this, key);\n                mappedEntries.push([\n                    key,\n                    node\n                ]);\n            }\n            this._map = new Map(mappedEntries);\n        } else {\n            this._map = /* @__PURE__ */ new Map();\n        }\n    }\n    /**\n   * @internal\n   */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const ops = [];\n        const op = {\n            id: this._id,\n            opId: pool?.generateOpId(),\n            type: 7 /* CREATE_MAP */ ,\n            parentId,\n            parentKey\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            ops.push(...value._toOps(this._id, key, pool));\n        }\n        return ops;\n    }\n    /**\n   * @internal\n   */ static _deserialize([id, _item], parentToChildren, pool) {\n        const map = new _LiveMap();\n        map._attach(id, pool);\n        const children = parentToChildren.get(id);\n        if (children === void 0) {\n            return map;\n        }\n        for (const [id2, crdt] of children){\n            const child = deserialize([\n                id2,\n                crdt\n            ], parentToChildren, pool);\n            child._setParentLink(map, crdt.parentKey);\n            map._map.set(crdt.parentKey, child);\n            map.invalidate();\n        }\n        return map;\n    }\n    /**\n   * @internal\n   */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /**\n   * @internal\n   */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, parentKey, opId } = op;\n        const key = parentKey;\n        const child = creationOpToLiveNode(op);\n        if (this._pool.getNode(id) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        if (source === 2 /* ACK */ ) {\n            const lastUpdateOpId = this.unacknowledgedSet.get(key);\n            if (lastUpdateOpId === opId) {\n                this.unacknowledgedSet.delete(key);\n                return {\n                    modified: false\n                };\n            } else if (lastUpdateOpId !== void 0) {\n                return {\n                    modified: false\n                };\n            }\n        } else if (source === 1 /* REMOTE */ ) {\n            this.unacknowledgedSet.delete(key);\n        }\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (previousValue) {\n            const thisId = nn(this._id);\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else {\n            reverse = [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ];\n        }\n        child._setParentLink(this, key);\n        child._attach(id, this._pool);\n        this._map.set(key, child);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const item of this._map.values()){\n            item._detach();\n        }\n    }\n    /**\n   * @internal\n   */ _detachChild(child) {\n        const id = nn(this._id);\n        const parentKey = nn(child._parentKey);\n        const reverse = child._toOps(id, parentKey, this._pool);\n        for (const [key, value] of this._map){\n            if (value === child) {\n                this._map.delete(key);\n                this.invalidate();\n            }\n        }\n        child._detach();\n        const storageUpdate = {\n            node: this,\n            type: \"LiveMap\",\n            updates: {\n                [parentKey]: {\n                    type: \"delete\"\n                }\n            }\n        };\n        return {\n            modified: storageUpdate,\n            reverse\n        };\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        if (this.parent.type !== \"HasParent\") {\n            throw new Error(\"Cannot serialize LiveMap if parent is missing\");\n        }\n        return {\n            type: 2 /* MAP */ ,\n            parentId: nn(this.parent.node._id, \"Parent node expected to have ID\"),\n            parentKey: this.parent.key\n        };\n    }\n    /**\n   * Returns a specified element from the LiveMap.\n   * @param key The key of the element to return.\n   * @returns The element associated with the specified key, or undefined if the key can't be found in the LiveMap.\n   */ get(key) {\n        const value = this._map.get(key);\n        if (value === void 0) {\n            return void 0;\n        }\n        return liveNodeToLson(value);\n    }\n    /**\n   * Adds or updates an element with a specified key and a value.\n   * @param key The key of the element to add. Should be a string.\n   * @param value The value of the element to add. Should be serializable to JSON.\n   */ set(key, value) {\n        this._pool?.assertStorageIsWritable();\n        const oldValue = this._map.get(key);\n        if (oldValue) {\n            oldValue._detach();\n        }\n        const item = lsonToLiveNode(value);\n        item._setParentLink(this, key);\n        this._map.set(key, item);\n        this.invalidate();\n        if (this._pool && this._id) {\n            const id = this._pool.generateId();\n            item._attach(id, this._pool);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(this._id, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            });\n            const ops = item._toOps(this._id, key, this._pool);\n            this.unacknowledgedSet.set(key, nn(ops[0].opId));\n            this._pool.dispatch(item._toOps(this._id, key, this._pool), oldValue ? oldValue._toOps(this._id, key) : [\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id\n                }\n            ], storageUpdates);\n        }\n    }\n    /**\n   * Returns the number of elements in the LiveMap.\n   */ get size() {\n        return this._map.size;\n    }\n    /**\n   * Returns a boolean indicating whether an element with the specified key exists or not.\n   * @param key The key of the element to test for presence.\n   */ has(key) {\n        return this._map.has(key);\n    }\n    /**\n   * Removes the specified element by key.\n   * @param key The key of the element to remove.\n   * @returns true if an element existed and has been removed, or false if the element does not exist.\n   */ delete(key) {\n        this._pool?.assertStorageIsWritable();\n        const item = this._map.get(key);\n        if (item === void 0) {\n            return false;\n        }\n        item._detach();\n        this._map.delete(key);\n        this.invalidate();\n        if (this._pool && item._id) {\n            const thisId = nn(this._id);\n            const storageUpdates = /* @__PURE__ */ new Map();\n            storageUpdates.set(thisId, {\n                node: this,\n                type: \"LiveMap\",\n                updates: {\n                    [key]: {\n                        type: \"delete\"\n                    }\n                }\n            });\n            this._pool.dispatch([\n                {\n                    type: 5 /* DELETE_CRDT */ ,\n                    id: item._id,\n                    opId: this._pool.generateOpId()\n                }\n            ], item._toOps(thisId, key), storageUpdates);\n        }\n        return true;\n    }\n    /**\n   * Returns a new Iterator object that contains the [key, value] pairs for each element.\n   */ entries() {\n        const innerIterator = this._map.entries();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const entry = iteratorValue.value;\n                const key = entry[0];\n                const value = liveNodeToLson(iteratorValue.value[1]);\n                return {\n                    value: [\n                        key,\n                        value\n                    ]\n                };\n            }\n        };\n    }\n    /**\n   * Same function object as the initial value of the entries method.\n   */ [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n   * Returns a new Iterator object that contains the keys for each element.\n   */ keys() {\n        return this._map.keys();\n    }\n    /**\n   * Returns a new Iterator object that contains the values for each element.\n   */ values() {\n        const innerIterator = this._map.values();\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                const iteratorValue = innerIterator.next();\n                if (iteratorValue.done) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const value = liveNodeToLson(iteratorValue.value);\n                return {\n                    value\n                };\n            }\n        };\n    }\n    /**\n   * Executes a provided function once per each key/value pair in the Map object, in insertion order.\n   * @param callback Function to execute for each entry in the map.\n   */ forEach(callback) {\n        for (const entry of this){\n            callback(entry[1], entry[0], this);\n        }\n    }\n    /** @internal */ _toTreeNode(key) {\n        return {\n            type: \"LiveMap\",\n            id: this._id ?? nanoid(),\n            key,\n            payload: Array.from(this._map.entries()).map(([key2, val])=>val.toTreeNode(key2))\n        };\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ _toImmutable() {\n        const result = /* @__PURE__ */ new Map();\n        for (const [key, value] of this._map){\n            result.set(key, value.toImmutable());\n        }\n        return freeze(result);\n    }\n    clone() {\n        return new _LiveMap(Array.from(this._map).map(([key, node])=>[\n                key,\n                node.clone()\n            ]));\n    }\n};\n// src/crdts/LiveObject.ts\nvar LiveObject = class _LiveObject extends AbstractCrdt {\n    constructor(obj = {}){\n        super();\n        this._propToLastUpdate = /* @__PURE__ */ new Map();\n        for(const key in obj){\n            const value = obj[key];\n            if (value === void 0) {\n                continue;\n            } else if (isLiveNode(value)) {\n                value._setParentLink(this, key);\n            }\n        }\n        this._map = new Map(Object.entries(obj));\n    }\n    /** @internal */ static _buildRootAndParentToChildren(items) {\n        const parentToChildren = /* @__PURE__ */ new Map();\n        let root = null;\n        for (const [id, crdt] of items){\n            if (isRootCrdt(crdt)) {\n                root = [\n                    id,\n                    crdt\n                ];\n            } else {\n                const tuple = [\n                    id,\n                    crdt\n                ];\n                const children = parentToChildren.get(crdt.parentId);\n                if (children !== void 0) {\n                    children.push(tuple);\n                } else {\n                    parentToChildren.set(crdt.parentId, [\n                        tuple\n                    ]);\n                }\n            }\n        }\n        if (root === null) {\n            throw new Error(\"Root can't be null\");\n        }\n        return [\n            root,\n            parentToChildren\n        ];\n    }\n    /** @internal */ static _fromItems(items, pool) {\n        const [root, parentToChildren] = _LiveObject._buildRootAndParentToChildren(items);\n        return _LiveObject._deserialize(root, parentToChildren, pool);\n    }\n    /** @internal */ _toOps(parentId, parentKey, pool) {\n        if (this._id === void 0) {\n            throw new Error(\"Cannot serialize item is not attached\");\n        }\n        const opId = pool?.generateOpId();\n        const ops = [];\n        const op = {\n            type: 4 /* CREATE_OBJECT */ ,\n            id: this._id,\n            opId,\n            parentId,\n            parentKey,\n            data: {}\n        };\n        ops.push(op);\n        for (const [key, value] of this._map){\n            if (isLiveNode(value)) {\n                ops.push(...value._toOps(this._id, key, pool));\n            } else {\n                op.data[key] = value;\n            }\n        }\n        return ops;\n    }\n    /** @internal */ static _deserialize([id, item], parentToChildren, pool) {\n        const liveObj = new _LiveObject(item.data);\n        liveObj._attach(id, pool);\n        return this._deserializeChildren(liveObj, parentToChildren, pool);\n    }\n    /** @internal */ static _deserializeChildren(liveObj, parentToChildren, pool) {\n        const children = parentToChildren.get(nn(liveObj._id));\n        if (children === void 0) {\n            return liveObj;\n        }\n        for (const [id, crdt] of children){\n            const child = deserializeToLson([\n                id,\n                crdt\n            ], parentToChildren, pool);\n            if (isLiveStructure(child)) {\n                child._setParentLink(liveObj, crdt.parentKey);\n            }\n            liveObj._map.set(crdt.parentKey, child);\n            liveObj.invalidate();\n        }\n        return liveObj;\n    }\n    /** @internal */ _attach(id, pool) {\n        super._attach(id, pool);\n        for (const [_key, value] of this._map){\n            if (isLiveNode(value)) {\n                value._attach(pool.generateId(), pool);\n            }\n        }\n    }\n    /** @internal */ _attachChild(op, source) {\n        if (this._pool === void 0) {\n            throw new Error(\"Can't attach child if managed pool is not present\");\n        }\n        const { id, opId, parentKey: key } = op;\n        const child = creationOpToLson(op);\n        if (this._pool.getNode(id) !== void 0) {\n            if (this._propToLastUpdate.get(key) === opId) {\n                this._propToLastUpdate.delete(key);\n            }\n            return {\n                modified: false\n            };\n        }\n        if (source === 0 /* UNDOREDO_RECONNECT */ ) {\n            this._propToLastUpdate.set(key, nn(opId));\n        } else if (this._propToLastUpdate.get(key) === void 0) {} else if (this._propToLastUpdate.get(key) === opId) {\n            this._propToLastUpdate.delete(key);\n            return {\n                modified: false\n            };\n        } else {\n            return {\n                modified: false\n            };\n        }\n        const thisId = nn(this._id);\n        const previousValue = this._map.get(key);\n        let reverse;\n        if (isLiveNode(previousValue)) {\n            reverse = previousValue._toOps(thisId, key);\n            previousValue._detach();\n        } else if (previousValue === void 0) {\n            reverse = [\n                {\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: thisId,\n                    key\n                }\n            ];\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id: thisId,\n                    data: {\n                        [key]: previousValue\n                    }\n                }\n            ];\n        }\n        this._map.set(key, child);\n        this.invalidate();\n        if (isLiveStructure(child)) {\n            child._setParentLink(this, key);\n            child._attach(id, this._pool);\n        }\n        return {\n            reverse,\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [key]: {\n                        type: \"update\"\n                    }\n                }\n            }\n        };\n    }\n    /** @internal */ _detachChild(child) {\n        if (child) {\n            const id = nn(this._id);\n            const parentKey = nn(child._parentKey);\n            const reverse = child._toOps(id, parentKey, this._pool);\n            for (const [key, value] of this._map){\n                if (value === child) {\n                    this._map.delete(key);\n                    this.invalidate();\n                }\n            }\n            child._detach();\n            const storageUpdate = {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [parentKey]: {\n                        type: \"delete\"\n                    }\n                }\n            };\n            return {\n                modified: storageUpdate,\n                reverse\n            };\n        }\n        return {\n            modified: false\n        };\n    }\n    /**\n   * @internal\n   */ _detach() {\n        super._detach();\n        for (const value of this._map.values()){\n            if (isLiveNode(value)) {\n                value._detach();\n            }\n        }\n    }\n    /** @internal */ _apply(op, isLocal) {\n        if (op.type === 3 /* UPDATE_OBJECT */ ) {\n            return this._applyUpdate(op, isLocal);\n        } else if (op.type === 6 /* DELETE_OBJECT_KEY */ ) {\n            return this._applyDeleteObjectKey(op, isLocal);\n        }\n        return super._apply(op, isLocal);\n    }\n    /**\n   * @internal\n   */ _serialize() {\n        const data = {};\n        for (const [key, value] of this._map){\n            if (!isLiveNode(value)) {\n                data[key] = value;\n            }\n        }\n        if (this.parent.type === \"HasParent\" && this.parent.node._id) {\n            return {\n                type: 0 /* OBJECT */ ,\n                parentId: this.parent.node._id,\n                parentKey: this.parent.key,\n                data\n            };\n        } else {\n            return {\n                type: 0 /* OBJECT */ ,\n                data\n            };\n        }\n    }\n    /** @internal */ _applyUpdate(op, isLocal) {\n        let isModified = false;\n        const id = nn(this._id);\n        const reverse = [];\n        const reverseUpdate = {\n            type: 3 /* UPDATE_OBJECT */ ,\n            id,\n            data: {}\n        };\n        for(const key in op.data){\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverse.push(...oldValue._toOps(id, key));\n                oldValue._detach();\n            } else if (oldValue !== void 0) {\n                reverseUpdate.data[key] = oldValue;\n            } else if (oldValue === void 0) {\n                reverse.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id,\n                    key\n                });\n            }\n        }\n        const updateDelta = {};\n        for(const key in op.data){\n            const value = op.data[key];\n            if (value === void 0) {\n                continue;\n            }\n            if (isLocal) {\n                this._propToLastUpdate.set(key, nn(op.opId));\n            } else if (this._propToLastUpdate.get(key) === void 0) {\n                isModified = true;\n            } else if (this._propToLastUpdate.get(key) === op.opId) {\n                this._propToLastUpdate.delete(key);\n                continue;\n            } else {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            isModified = true;\n            updateDelta[key] = {\n                type: \"update\"\n            };\n            this._map.set(key, value);\n            this.invalidate();\n        }\n        if (Object.keys(reverseUpdate.data).length !== 0) {\n            reverse.unshift(reverseUpdate);\n        }\n        return isModified ? {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: updateDelta\n            },\n            reverse\n        } : {\n            modified: false\n        };\n    }\n    /** @internal */ _applyDeleteObjectKey(op, isLocal) {\n        const key = op.key;\n        if (this._map.has(key) === false) {\n            return {\n                modified: false\n            };\n        }\n        if (!isLocal && this._propToLastUpdate.get(key) !== void 0) {\n            return {\n                modified: false\n            };\n        }\n        const oldValue = this._map.get(key);\n        const id = nn(this._id);\n        let reverse = [];\n        if (isLiveNode(oldValue)) {\n            reverse = oldValue._toOps(id, op.key);\n            oldValue._detach();\n        } else if (oldValue !== void 0) {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    id,\n                    data: {\n                        [key]: oldValue\n                    }\n                }\n            ];\n        }\n        this._map.delete(key);\n        this.invalidate();\n        return {\n            modified: {\n                node: this,\n                type: \"LiveObject\",\n                updates: {\n                    [op.key]: {\n                        type: \"delete\"\n                    }\n                }\n            },\n            reverse\n        };\n    }\n    /**\n   * Transform the LiveObject into a javascript object\n   */ toObject() {\n        return Object.fromEntries(this._map);\n    }\n    /**\n   * Adds or updates a property with a specified key and a value.\n   * @param key The key of the property to add\n   * @param value The value of the property to add\n   */ set(key, value) {\n        this._pool?.assertStorageIsWritable();\n        this.update({\n            [key]: value\n        });\n    }\n    /**\n   * Returns a specified property from the LiveObject.\n   * @param key The key of the property to get\n   */ get(key) {\n        return this._map.get(key);\n    }\n    /**\n   * Deletes a key from the LiveObject\n   * @param key The key of the property to delete\n   */ delete(key) {\n        this._pool?.assertStorageIsWritable();\n        const keyAsString = key;\n        const oldValue = this._map.get(keyAsString);\n        if (oldValue === void 0) {\n            return;\n        }\n        if (this._pool === void 0 || this._id === void 0) {\n            if (isLiveNode(oldValue)) {\n                oldValue._detach();\n            }\n            this._map.delete(keyAsString);\n            this.invalidate();\n            return;\n        }\n        let reverse;\n        if (isLiveNode(oldValue)) {\n            oldValue._detach();\n            reverse = oldValue._toOps(this._id, keyAsString);\n        } else {\n            reverse = [\n                {\n                    type: 3 /* UPDATE_OBJECT */ ,\n                    data: {\n                        [keyAsString]: oldValue\n                    },\n                    id: this._id\n                }\n            ];\n        }\n        this._map.delete(keyAsString);\n        this.invalidate();\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: {\n                [key]: {\n                    type: \"delete\"\n                }\n            }\n        });\n        this._pool.dispatch([\n            {\n                type: 6 /* DELETE_OBJECT_KEY */ ,\n                key: keyAsString,\n                id: this._id,\n                opId: this._pool.generateOpId()\n            }\n        ], reverse, storageUpdates);\n    }\n    /**\n   * Adds or updates multiple properties at once with an object.\n   * @param patch The object used to overrides properties\n   */ update(patch) {\n        this._pool?.assertStorageIsWritable();\n        if (this._pool === void 0 || this._id === void 0) {\n            for(const key in patch){\n                const newValue = patch[key];\n                if (newValue === void 0) {\n                    continue;\n                }\n                const oldValue = this._map.get(key);\n                if (isLiveNode(oldValue)) {\n                    oldValue._detach();\n                }\n                if (isLiveNode(newValue)) {\n                    newValue._setParentLink(this, key);\n                }\n                this._map.set(key, newValue);\n                this.invalidate();\n            }\n            return;\n        }\n        const ops = [];\n        const reverseOps = [];\n        const opId = this._pool.generateOpId();\n        const updatedProps = {};\n        const reverseUpdateOp = {\n            id: this._id,\n            type: 3 /* UPDATE_OBJECT */ ,\n            data: {}\n        };\n        const updateDelta = {};\n        for(const key in patch){\n            const newValue = patch[key];\n            if (newValue === void 0) {\n                continue;\n            }\n            const oldValue = this._map.get(key);\n            if (isLiveNode(oldValue)) {\n                reverseOps.push(...oldValue._toOps(this._id, key));\n                oldValue._detach();\n            } else if (oldValue === void 0) {\n                reverseOps.push({\n                    type: 6 /* DELETE_OBJECT_KEY */ ,\n                    id: this._id,\n                    key\n                });\n            } else {\n                reverseUpdateOp.data[key] = oldValue;\n            }\n            if (isLiveNode(newValue)) {\n                newValue._setParentLink(this, key);\n                newValue._attach(this._pool.generateId(), this._pool);\n                const newAttachChildOps = newValue._toOps(this._id, key, this._pool);\n                const createCrdtOp = newAttachChildOps.find((op)=>op.parentId === this._id);\n                if (createCrdtOp) {\n                    this._propToLastUpdate.set(key, nn(createCrdtOp.opId));\n                }\n                ops.push(...newAttachChildOps);\n            } else {\n                updatedProps[key] = newValue;\n                this._propToLastUpdate.set(key, opId);\n            }\n            this._map.set(key, newValue);\n            this.invalidate();\n            updateDelta[key] = {\n                type: \"update\"\n            };\n        }\n        if (Object.keys(reverseUpdateOp.data).length !== 0) {\n            reverseOps.unshift(reverseUpdateOp);\n        }\n        if (Object.keys(updatedProps).length !== 0) {\n            ops.unshift({\n                opId,\n                id: this._id,\n                type: 3 /* UPDATE_OBJECT */ ,\n                data: updatedProps\n            });\n        }\n        const storageUpdates = /* @__PURE__ */ new Map();\n        storageUpdates.set(this._id, {\n            node: this,\n            type: \"LiveObject\",\n            updates: updateDelta\n        });\n        this._pool.dispatch(ops, reverseOps, storageUpdates);\n    }\n    toImmutable() {\n        return super.toImmutable();\n    }\n    /** @internal */ toTreeNode(key) {\n        return super.toTreeNode(key);\n    }\n    /** @internal */ _toTreeNode(key) {\n        const nodeId = this._id ?? nanoid();\n        return {\n            type: \"LiveObject\",\n            id: nodeId,\n            key,\n            payload: Array.from(this._map.entries()).map(([key2, value])=>isLiveNode(value) ? value.toTreeNode(key2) : {\n                    type: \"Json\",\n                    id: `${nodeId}:${key2}`,\n                    key: key2,\n                    payload: value\n                })\n        };\n    }\n    /** @internal */ _toImmutable() {\n        const result = {};\n        for (const [key, val] of this._map){\n            result[key] = isLiveStructure(val) ? val.toImmutable() : val;\n        }\n        return  false ? 0 : Object.freeze(result);\n    }\n    clone() {\n        return new _LiveObject(Object.fromEntries(Array.from(this._map).map(([key, value])=>[\n                key,\n                isLiveStructure(value) ? value.clone() : deepClone(value)\n            ])));\n    }\n};\n// src/crdts/liveblocks-helpers.ts\nfunction creationOpToLiveNode(op) {\n    return lsonToLiveNode(creationOpToLson(op));\n}\nfunction creationOpToLson(op) {\n    switch(op.type){\n        case 8 /* CREATE_REGISTER */ :\n            return op.data;\n        case 4 /* CREATE_OBJECT */ :\n            return new LiveObject(op.data);\n        case 7 /* CREATE_MAP */ :\n            return new LiveMap();\n        case 2 /* CREATE_LIST */ :\n            return new LiveList();\n        default:\n            return assertNever(op, \"Unknown creation Op\");\n    }\n}\nfunction isSameNodeOrChildOf(node, parent) {\n    if (node === parent) {\n        return true;\n    }\n    if (node.parent.type === \"HasParent\") {\n        return isSameNodeOrChildOf(node.parent.node, parent);\n    }\n    return false;\n}\nfunction deserialize([id, crdt], parentToChildren, pool) {\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return LiveRegister._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction deserializeToLson([id, crdt], parentToChildren, pool) {\n    switch(crdt.type){\n        case 0 /* OBJECT */ :\n            {\n                return LiveObject._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 1 /* LIST */ :\n            {\n                return LiveList._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 2 /* MAP */ :\n            {\n                return LiveMap._deserialize([\n                    id,\n                    crdt\n                ], parentToChildren, pool);\n            }\n        case 3 /* REGISTER */ :\n            {\n                return crdt.data;\n            }\n        default:\n            {\n                throw new Error(\"Unexpected CRDT type\");\n            }\n    }\n}\nfunction isLiveStructure(value) {\n    return isLiveList(value) || isLiveMap(value) || isLiveObject(value);\n}\nfunction isLiveNode(value) {\n    return isLiveStructure(value) || isLiveRegister(value);\n}\nfunction isLiveList(value) {\n    return value instanceof LiveList;\n}\nfunction isLiveMap(value) {\n    return value instanceof LiveMap;\n}\nfunction isLiveObject(value) {\n    return value instanceof LiveObject;\n}\nfunction isLiveRegister(value) {\n    return value instanceof LiveRegister;\n}\nfunction cloneLson(value) {\n    return value === void 0 ? void 0 : isLiveStructure(value) ? value.clone() : deepClone(value);\n}\nfunction liveNodeToLson(obj) {\n    if (obj instanceof LiveRegister) {\n        return obj.data;\n    } else if (obj instanceof LiveList || obj instanceof LiveMap || obj instanceof LiveObject) {\n        return obj;\n    } else {\n        return assertNever(obj, \"Unknown AbstractCrdt\");\n    }\n}\nfunction lsonToLiveNode(value) {\n    if (value instanceof LiveObject || value instanceof LiveMap || value instanceof LiveList) {\n        return value;\n    } else {\n        return new LiveRegister(value);\n    }\n}\nfunction getTreesDiffOperations(currentItems, newItems) {\n    const ops = [];\n    currentItems.forEach((_, id)=>{\n        if (!newItems.get(id)) {\n            ops.push({\n                type: 5 /* DELETE_CRDT */ ,\n                id\n            });\n        }\n    });\n    newItems.forEach((crdt, id)=>{\n        const currentCrdt = currentItems.get(id);\n        if (currentCrdt) {\n            if (crdt.type === 0 /* OBJECT */ ) {\n                if (currentCrdt.type !== 0 /* OBJECT */  || JSON.stringify(crdt.data) !== JSON.stringify(currentCrdt.data)) {\n                    ops.push({\n                        type: 3 /* UPDATE_OBJECT */ ,\n                        id,\n                        data: crdt.data\n                    });\n                }\n            }\n            if (crdt.parentKey !== currentCrdt.parentKey) {\n                ops.push({\n                    type: 1 /* SET_PARENT_KEY */ ,\n                    id,\n                    parentKey: nn(crdt.parentKey, \"Parent key must not be missing\")\n                });\n            }\n        } else {\n            switch(crdt.type){\n                case 3 /* REGISTER */ :\n                    ops.push({\n                        type: 8 /* CREATE_REGISTER */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 1 /* LIST */ :\n                    ops.push({\n                        type: 2 /* CREATE_LIST */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n                case 0 /* OBJECT */ :\n                    if (crdt.parentId === void 0 || crdt.parentKey === void 0) {\n                        throw new Error(\"Internal error. Cannot serialize storage root into an operation\");\n                    }\n                    ops.push({\n                        type: 4 /* CREATE_OBJECT */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey,\n                        data: crdt.data\n                    });\n                    break;\n                case 2 /* MAP */ :\n                    ops.push({\n                        type: 7 /* CREATE_MAP */ ,\n                        id,\n                        parentId: crdt.parentId,\n                        parentKey: crdt.parentKey\n                    });\n                    break;\n            }\n        }\n    });\n    return ops;\n}\nfunction mergeObjectStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeMapStorageUpdates(first, second) {\n    const updates = first.updates;\n    for (const [key, value] of entries(second.updates)){\n        updates[key] = value;\n    }\n    return {\n        ...second,\n        updates\n    };\n}\nfunction mergeListStorageUpdates(first, second) {\n    const updates = first.updates;\n    return {\n        ...second,\n        updates: updates.concat(second.updates)\n    };\n}\nfunction mergeStorageUpdates(first, second) {\n    if (first === void 0) {\n        return second;\n    }\n    if (first.type === \"LiveObject\" && second.type === \"LiveObject\") {\n        return mergeObjectStorageUpdates(first, second);\n    } else if (first.type === \"LiveMap\" && second.type === \"LiveMap\") {\n        return mergeMapStorageUpdates(first, second);\n    } else if (first.type === \"LiveList\" && second.type === \"LiveList\") {\n        return mergeListStorageUpdates(first, second);\n    } else {}\n    return second;\n}\nfunction isPlain(value) {\n    const type = typeof value;\n    return value === void 0 || value === null || type === \"string\" || type === \"boolean\" || type === \"number\" || Array.isArray(value) || isPlainObject(value);\n}\nfunction findNonSerializableValue(value, path = \"\") {\n    if (!isPlain) {\n        return {\n            path: path || \"root\",\n            value\n        };\n    }\n    if (typeof value !== \"object\" || value === null) {\n        return false;\n    }\n    for (const [key, nestedValue] of Object.entries(value)){\n        const nestedPath = path ? path + \".\" + key : key;\n        if (!isPlain(nestedValue)) {\n            return {\n                path: nestedPath,\n                value: nestedValue\n            };\n        }\n        if (typeof nestedValue === \"object\") {\n            const nonSerializableNestedValue = findNonSerializableValue(nestedValue, nestedPath);\n            if (nonSerializableNestedValue) {\n                return nonSerializableNestedValue;\n            }\n        }\n    }\n    return false;\n}\n// src/lib/debug.ts\nfunction captureStackTrace(msg, traceRoot) {\n    const errorLike = {\n        name: msg\n    };\n    if (typeof Error.captureStackTrace !== \"function\") {\n        return void 0;\n    }\n    Error.captureStackTrace(errorLike, traceRoot);\n    return errorLike.stack;\n}\n// src/lib/Json.ts\nfunction isJsonScalar(data) {\n    return data === null || typeof data === \"string\" || typeof data === \"number\" || typeof data === \"boolean\";\n}\nfunction isJsonArray(data) {\n    return Array.isArray(data);\n}\nfunction isJsonObject(data) {\n    return !isJsonScalar(data) && !isJsonArray(data);\n}\n// src/protocol/ClientMsg.ts\nvar ClientMsgCode = /* @__PURE__ */ ((ClientMsgCode2)=>{\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_PRESENCE\"] = 100] = \"UPDATE_PRESENCE\";\n    ClientMsgCode2[ClientMsgCode2[\"BROADCAST_EVENT\"] = 103] = \"BROADCAST_EVENT\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_STORAGE\"] = 200] = \"FETCH_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_STORAGE\"] = 201] = \"UPDATE_STORAGE\";\n    ClientMsgCode2[ClientMsgCode2[\"FETCH_YDOC\"] = 300] = \"FETCH_YDOC\";\n    ClientMsgCode2[ClientMsgCode2[\"UPDATE_YDOC\"] = 301] = \"UPDATE_YDOC\";\n    return ClientMsgCode2;\n})(ClientMsgCode || {});\n// src/refs/ImmutableRef.ts\nfunction merge(target, patch) {\n    let updated = false;\n    const newValue = {\n        ...target\n    };\n    Object.keys(patch).forEach((k)=>{\n        const key = k;\n        const val = patch[key];\n        if (newValue[key] !== val) {\n            if (val === void 0) {\n                delete newValue[key];\n            } else {\n                newValue[key] = val;\n            }\n            updated = true;\n        }\n    });\n    return updated ? newValue : target;\n}\nvar ImmutableRef = class {\n    constructor(){\n        this._ev = makeEventSource();\n    }\n    get didInvalidate() {\n        return this._ev.observable;\n    }\n    invalidate() {\n        if (this._cache !== void 0) {\n            this._cache = void 0;\n            this._ev.notify();\n        }\n    }\n    get current() {\n        return this._cache ?? (this._cache = this._toImmutable());\n    }\n};\n// src/refs/OthersRef.ts\nfunction makeUser(conn, presence) {\n    const { connectionId, id, info } = conn;\n    const canWrite = canWriteStorage(conn.scopes);\n    return freeze(compactObject({\n        connectionId,\n        id,\n        info,\n        canWrite,\n        canComment: canComment(conn.scopes),\n        isReadOnly: !canWrite,\n        // Deprecated, kept for backward-compatibility\n        presence\n    }));\n}\nvar OthersRef = class extends ImmutableRef {\n    //\n    // --------------------------------------------------------------\n    //\n    constructor(){\n        super();\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n    }\n    connectionIds() {\n        return this._connections.keys();\n    }\n    /** @internal */ _toImmutable() {\n        const users = compact(Array.from(this._presences.keys()).map((connectionId)=>this.getUser(Number(connectionId))));\n        return users;\n    }\n    clearOthers() {\n        this._connections = /* @__PURE__ */ new Map();\n        this._presences = /* @__PURE__ */ new Map();\n        this._users = /* @__PURE__ */ new Map();\n        this.invalidate();\n    }\n    /** @internal */ _getUser(connectionId) {\n        const conn = this._connections.get(connectionId);\n        const presence = this._presences.get(connectionId);\n        if (conn !== void 0 && presence !== void 0) {\n            return makeUser(conn, presence);\n        }\n        return void 0;\n    }\n    getUser(connectionId) {\n        const cachedUser = this._users.get(connectionId);\n        if (cachedUser) {\n            return cachedUser;\n        }\n        const computedUser = this._getUser(connectionId);\n        if (computedUser) {\n            this._users.set(connectionId, computedUser);\n            return computedUser;\n        }\n        return void 0;\n    }\n    /** @internal */ _invalidateUser(connectionId) {\n        if (this._users.has(connectionId)) {\n            this._users.delete(connectionId);\n        }\n        this.invalidate();\n    }\n    /**\n   * Records a known connection. This records the connection ID and the\n   * associated metadata.\n   */ setConnection(connectionId, metaUserId, metaUserInfo, scopes) {\n        this._connections.set(connectionId, freeze({\n            connectionId,\n            id: metaUserId,\n            info: metaUserInfo,\n            scopes\n        }));\n        if (this._presences.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Removes a known connectionId. Removes both the connection's metadata and\n   * the presence information.\n   */ removeConnection(connectionId) {\n        this._connections.delete(connectionId);\n        this._presences.delete(connectionId);\n        this._invalidateUser(connectionId);\n    }\n    /**\n   * Stores a new user from a full presence update. If the user already exists,\n   * its known presence data is overwritten.\n   */ setOther(connectionId, presence) {\n        this._presences.set(connectionId, freeze(compactObject(presence)));\n        if (this._connections.has(connectionId)) {\n            this._invalidateUser(connectionId);\n        }\n    }\n    /**\n   * Patches the presence data for an existing \"other\". If we don't know the\n   * initial presence data for this user yet, discard this patch and await the\n   * full .setOther() call first.\n   */ patchOther(connectionId, patch) {\n        const oldPresence = this._presences.get(connectionId);\n        if (oldPresence === void 0) {\n            return;\n        }\n        const newPresence = merge(oldPresence, patch);\n        if (oldPresence !== newPresence) {\n            this._presences.set(connectionId, freeze(newPresence));\n            this._invalidateUser(connectionId);\n        }\n    }\n};\n// src/refs/PatchableRef.ts\nvar PatchableRef = class extends ImmutableRef {\n    constructor(data){\n        super();\n        this._data = freeze(compactObject(data));\n    }\n    /** @internal */ _toImmutable() {\n        return this._data;\n    }\n    /**\n   * Patches the current object.\n   */ patch(patch) {\n        const oldData = this._data;\n        const newData = merge(oldData, patch);\n        if (oldData !== newData) {\n            this._data = freeze(newData);\n            this.invalidate();\n        }\n    }\n};\n// src/refs/ValueRef.ts\nvar ValueRef = class extends ImmutableRef {\n    constructor(initialValue){\n        super();\n        this._value = freeze(initialValue);\n    }\n    /** @internal */ _toImmutable() {\n        return this._value;\n    }\n    set(newValue) {\n        this._value = freeze(newValue);\n        this.invalidate();\n    }\n};\nvar DerivedRef = class extends ImmutableRef {\n    constructor(...args){\n        super();\n        const transformFn = args.pop();\n        const otherRefs = args;\n        this._refs = otherRefs;\n        this._refs.forEach((ref)=>{\n            ref.didInvalidate.subscribe(()=>this.invalidate());\n        });\n        this._transform = transformFn;\n    }\n    /** @internal */ _toImmutable() {\n        return this._transform(...this._refs.map((ref)=>ref.current));\n    }\n};\n// src/room.ts\nvar MAX_SOCKET_MESSAGE_SIZE = 1024 * 1024 - 1024;\nfunction makeIdFactory(connectionId) {\n    let count = 0;\n    return ()=>`${connectionId}:${count++}`;\n}\nfunction userToTreeNode(key, user) {\n    return {\n        type: \"User\",\n        id: `${user.connectionId}`,\n        key,\n        payload: user\n    };\n}\nfunction installBackgroundTabSpy() {\n    const doc = typeof document !== \"undefined\" ? document : void 0;\n    const inBackgroundSince = {\n        current: null\n    };\n    function onVisibilityChange() {\n        if (doc?.visibilityState === \"hidden\") {\n            inBackgroundSince.current = inBackgroundSince.current ?? Date.now();\n        } else {\n            inBackgroundSince.current = null;\n        }\n    }\n    doc?.addEventListener(\"visibilitychange\", onVisibilityChange);\n    const unsub = ()=>{\n        doc?.removeEventListener(\"visibilitychange\", onVisibilityChange);\n    };\n    return [\n        inBackgroundSince,\n        unsub\n    ];\n}\nfunction createRoom(options, config) {\n    const initialPresence = typeof options.initialPresence === \"function\" ? options.initialPresence(config.roomId) : options.initialPresence;\n    const initialStorage = typeof options.initialStorage === \"function\" ? options.initialStorage(config.roomId) : options.initialStorage;\n    const [inBackgroundSince, uninstallBgTabSpy] = installBackgroundTabSpy();\n    const delegates = {\n        ...config.delegates,\n        // A connection is allowed to go into \"zombie state\" only if all of the\n        // following conditions apply:\n        //\n        // - The `backgroundKeepAliveTimeout` client option is configured\n        // - The browser window has been in the background for at least\n        //   `backgroundKeepAliveTimeout` milliseconds\n        // - There are no pending changes\n        //\n        canZombie () {\n            return config.backgroundKeepAliveTimeout !== void 0 && inBackgroundSince.current !== null && Date.now() > inBackgroundSince.current + config.backgroundKeepAliveTimeout && getStorageStatus() !== \"synchronizing\";\n        }\n    };\n    const managedSocket = new ManagedSocket(delegates, config.enableDebugLogging);\n    const context = {\n        buffer: {\n            flushTimerID: void 0,\n            lastFlushedAt: 0,\n            presenceUpdates: // Queue up the initial presence message as a Full Presence™ update\n            {\n                type: \"full\",\n                data: initialPresence\n            },\n            messages: [],\n            storageOperations: []\n        },\n        staticSessionInfo: new ValueRef(null),\n        dynamicSessionInfo: new ValueRef(null),\n        myPresence: new PatchableRef(initialPresence),\n        others: new OthersRef(),\n        initialStorage,\n        idFactory: null,\n        // Storage\n        clock: 0,\n        opClock: 0,\n        nodes: /* @__PURE__ */ new Map(),\n        root: void 0,\n        undoStack: [],\n        redoStack: [],\n        pausedHistory: null,\n        activeBatch: null,\n        unacknowledgedOps: /* @__PURE__ */ new Map(),\n        // Debug\n        opStackTraces:  true ? /* @__PURE__ */ new Map() : 0\n    };\n    const doNotBatchUpdates = (cb)=>cb();\n    const batchUpdates = config.unstable_batchedUpdates ?? doNotBatchUpdates;\n    let lastTokenKey;\n    function onStatusDidChange(newStatus) {\n        const authValue = managedSocket.authValue;\n        if (authValue !== null) {\n            const tokenKey = authValue.type === \"secret\" ? authValue.token.raw : authValue.publicApiKey;\n            if (tokenKey !== lastTokenKey) {\n                lastTokenKey = tokenKey;\n                if (authValue.type === \"secret\") {\n                    const token = authValue.token.parsed;\n                    context.staticSessionInfo.set({\n                        userId: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.id : token.uid,\n                        userInfo: token.k === \"sec-legacy\" /* SECRET_LEGACY */  ? token.info : token.ui\n                    });\n                } else {\n                    context.staticSessionInfo.set({\n                        userId: void 0,\n                        userInfo: void 0\n                    });\n                }\n            }\n        }\n        batchUpdates(()=>{\n            eventHub.status.notify(newStatus);\n            notifySelfChanged(doNotBatchUpdates);\n        });\n    }\n    let _connectionLossTimerId;\n    let _hasLostConnection = false;\n    function handleConnectionLossEvent(newStatus) {\n        if (newStatus === \"reconnecting\") {\n            _connectionLossTimerId = setTimeout(()=>{\n                batchUpdates(()=>{\n                    eventHub.lostConnection.notify(\"lost\");\n                    _hasLostConnection = true;\n                    context.others.clearOthers();\n                    notify({\n                        others: [\n                            {\n                                type: \"reset\"\n                            }\n                        ]\n                    }, doNotBatchUpdates);\n                });\n            }, config.lostConnectionTimeout);\n        } else {\n            clearTimeout(_connectionLossTimerId);\n            if (_hasLostConnection) {\n                if (newStatus === \"disconnected\") {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"failed\");\n                    });\n                } else {\n                    batchUpdates(()=>{\n                        eventHub.lostConnection.notify(\"restored\");\n                    });\n                }\n                _hasLostConnection = false;\n            }\n        }\n    }\n    function onDidConnect() {\n        context.buffer.presenceUpdates = {\n            type: \"full\",\n            data: // Because context.me.current is a readonly object, we'll have to\n            // make a copy here. Otherwise, type errors happen later when\n            // \"patching\" my presence.\n            {\n                ...context.myPresence.current\n            }\n        };\n        if (_getStorage$ !== null) {\n            refreshStorage({\n                flush: false\n            });\n        }\n        flushNowOrSoon();\n    }\n    function onDidDisconnect() {\n        clearTimeout(context.buffer.flushTimerID);\n    }\n    managedSocket.events.onMessage.subscribe(handleServerMessage);\n    managedSocket.events.statusDidChange.subscribe(onStatusDidChange);\n    managedSocket.events.statusDidChange.subscribe(handleConnectionLossEvent);\n    managedSocket.events.didConnect.subscribe(onDidConnect);\n    managedSocket.events.didDisconnect.subscribe(onDidDisconnect);\n    managedSocket.events.onLiveblocksError.subscribe((err)=>{\n        batchUpdates(()=>{\n            if (true) {\n                error2(`Connection to websocket server closed. Reason: ${err.message} (code: ${err.code}).`);\n            }\n            eventHub.error.notify(err);\n        });\n    });\n    const pool = {\n        roomId: config.roomId,\n        getNode: (id)=>context.nodes.get(id),\n        addNode: (id, node)=>void context.nodes.set(id, node),\n        deleteNode: (id)=>void context.nodes.delete(id),\n        generateId: ()=>`${getConnectionId()}:${context.clock++}`,\n        generateOpId: ()=>`${getConnectionId()}:${context.opClock++}`,\n        dispatch (ops, reverse, storageUpdates) {\n            const activeBatch = context.activeBatch;\n            if (true) {\n                const stackTrace = captureStackTrace(\"Storage mutation\", this.dispatch);\n                if (stackTrace) {\n                    for (const op of ops){\n                        if (op.opId) {\n                            nn(context.opStackTraces).set(op.opId, stackTrace);\n                        }\n                    }\n                }\n            }\n            if (activeBatch) {\n                activeBatch.ops.push(...ops);\n                for (const [key, value] of storageUpdates){\n                    activeBatch.updates.storageUpdates.set(key, mergeStorageUpdates(activeBatch.updates.storageUpdates.get(key), value));\n                }\n                activeBatch.reverseOps.unshift(...reverse);\n            } else {\n                batchUpdates(()=>{\n                    addToUndoStack(reverse, doNotBatchUpdates);\n                    context.redoStack.length = 0;\n                    dispatchOps(ops);\n                    notify({\n                        storageUpdates\n                    }, doNotBatchUpdates);\n                });\n            }\n        },\n        assertStorageIsWritable: ()=>{\n            const scopes = context.dynamicSessionInfo.current?.scopes;\n            if (scopes === void 0) {\n                return;\n            }\n            const canWrite = canWriteStorage(scopes);\n            if (!canWrite) {\n                throw new Error(\"Cannot write to storage with a read only user, please ensure the user has write permissions\");\n            }\n        }\n    };\n    const eventHub = {\n        connection: makeEventSource(),\n        // Old/deprecated API\n        status: makeEventSource(),\n        // New/recommended API\n        lostConnection: makeEventSource(),\n        customEvent: makeEventSource(),\n        self: makeEventSource(),\n        myPresence: makeEventSource(),\n        others: makeEventSource(),\n        error: makeEventSource(),\n        storage: makeEventSource(),\n        history: makeEventSource(),\n        storageDidLoad: makeEventSource(),\n        storageStatus: makeEventSource(),\n        ydoc: makeEventSource(),\n        comments: makeEventSource()\n    };\n    async function streamFetch(authTokenOrPublicApiKey, roomId) {\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(roomId)}/storage`, config.baseUrl).toString();\n        const fetcher = config.polyfills?.fetch || /* istanbul ignore next */ fetch;\n        return fetcher(url.toString(), {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${authTokenOrPublicApiKey}`\n            }\n        });\n    }\n    async function httpPostToRoom(endpoint, body) {\n        if (!managedSocket.authValue) {\n            throw new Error(\"Not authorized\");\n        }\n        const authTokenOrPublicApiKey = managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw;\n        const url = new URL(`/v2/c/rooms/${encodeURIComponent(config.roomId)}${endpoint}`, config.baseUrl).toString();\n        const fetcher = config.polyfills?.fetch || /* istanbul ignore next */ fetch;\n        return fetcher(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${authTokenOrPublicApiKey}`\n            },\n            body: JSON.stringify(body)\n        });\n    }\n    function sendMessages(messages) {\n        const serializedPayload = JSON.stringify(messages);\n        const nonce = context.dynamicSessionInfo.current?.nonce;\n        if (config.unstable_fallbackToHTTP && nonce) {\n            const size = new TextEncoder().encode(serializedPayload).length;\n            if (size > MAX_SOCKET_MESSAGE_SIZE) {\n                void httpPostToRoom(\"/send-message\", {\n                    nonce,\n                    messages\n                }).then((resp)=>{\n                    if (!resp.ok && resp.status === 403) {\n                        managedSocket.reconnect();\n                    }\n                });\n                warn(\"Message was too large for websockets and sent over HTTP instead\");\n                return;\n            }\n        }\n        managedSocket.send(serializedPayload);\n    }\n    const self = new DerivedRef(context.staticSessionInfo, context.dynamicSessionInfo, context.myPresence, (staticSession, dynamicSession, myPresence)=>{\n        if (staticSession === null || dynamicSession === null) {\n            return null;\n        } else {\n            const canWrite = canWriteStorage(dynamicSession.scopes);\n            return {\n                connectionId: dynamicSession.actor,\n                id: staticSession.userId,\n                info: staticSession.userInfo,\n                presence: myPresence,\n                canWrite,\n                canComment: canComment(dynamicSession.scopes),\n                isReadOnly: !canWrite\n            };\n        }\n    });\n    let _lastSelf;\n    function notifySelfChanged(batchedUpdatesWrapper) {\n        const currSelf = self.current;\n        if (currSelf !== null && currSelf !== _lastSelf) {\n            batchedUpdatesWrapper(()=>{\n                eventHub.self.notify(currSelf);\n            });\n            _lastSelf = currSelf;\n        }\n    }\n    const selfAsTreeNode = new DerivedRef(self, (me)=>me !== null ? userToTreeNode(\"Me\", me) : null);\n    function createOrUpdateRootFromMessage(message, batchedUpdatesWrapper) {\n        if (message.items.length === 0) {\n            throw new Error(\"Internal error: cannot load storage without items\");\n        }\n        if (context.root !== void 0) {\n            updateRoot(message.items, batchedUpdatesWrapper);\n        } else {\n            context.root = LiveObject._fromItems(message.items, pool);\n        }\n        const stackSizeBefore = context.undoStack.length;\n        for(const key in context.initialStorage){\n            if (context.root.get(key) === void 0) {\n                context.root.set(key, cloneLson(context.initialStorage[key]));\n            }\n        }\n        context.undoStack.length = stackSizeBefore;\n    }\n    function updateRoot(items, batchedUpdatesWrapper) {\n        if (context.root === void 0) {\n            return;\n        }\n        const currentItems = /* @__PURE__ */ new Map();\n        for (const [id, node] of context.nodes){\n            currentItems.set(id, node._serialize());\n        }\n        const ops = getTreesDiffOperations(currentItems, new Map(items));\n        const result = applyOps(ops, false);\n        notify(result.updates, batchedUpdatesWrapper);\n    }\n    function _addToRealUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.undoStack.length >= 50) {\n            context.undoStack.shift();\n        }\n        context.undoStack.push(historyOps);\n        onHistoryChange(batchedUpdatesWrapper);\n    }\n    function addToUndoStack(historyOps, batchedUpdatesWrapper) {\n        if (context.pausedHistory !== null) {\n            context.pausedHistory.unshift(...historyOps);\n        } else {\n            _addToRealUndoStack(historyOps, batchedUpdatesWrapper);\n        }\n    }\n    function notify(updates, batchedUpdatesWrapper) {\n        const storageUpdates = updates.storageUpdates;\n        const othersUpdates = updates.others;\n        batchedUpdatesWrapper(()=>{\n            if (othersUpdates !== void 0 && othersUpdates.length > 0) {\n                const others = context.others.current;\n                for (const event of othersUpdates){\n                    eventHub.others.notify({\n                        ...event,\n                        others\n                    });\n                }\n            }\n            if (updates.presence ?? false) {\n                notifySelfChanged(doNotBatchUpdates);\n                eventHub.myPresence.notify(context.myPresence.current);\n            }\n            if (storageUpdates !== void 0 && storageUpdates.size > 0) {\n                const updates2 = Array.from(storageUpdates.values());\n                eventHub.storage.notify(updates2);\n            }\n            notifyStorageStatus();\n        });\n    }\n    function getConnectionId() {\n        const info = context.dynamicSessionInfo.current;\n        if (info) {\n            return info.actor;\n        }\n        throw new Error(\"Internal. Tried to get connection id but connection was never open\");\n    }\n    function applyOps(rawOps, isLocal) {\n        const output = {\n            reverse: [],\n            storageUpdates: /* @__PURE__ */ new Map(),\n            presence: false\n        };\n        const createdNodeIds = /* @__PURE__ */ new Set();\n        const ops = rawOps.map((op)=>{\n            if (op.type !== \"presence\" && !op.opId) {\n                return {\n                    ...op,\n                    opId: pool.generateOpId()\n                };\n            } else {\n                return op;\n            }\n        });\n        for (const op of ops){\n            if (op.type === \"presence\") {\n                const reverse = {\n                    type: \"presence\",\n                    data: {}\n                };\n                for(const key in op.data){\n                    reverse.data[key] = context.myPresence.current[key];\n                }\n                context.myPresence.patch(op.data);\n                if (context.buffer.presenceUpdates === null) {\n                    context.buffer.presenceUpdates = {\n                        type: \"partial\",\n                        data: op.data\n                    };\n                } else {\n                    for(const key in op.data){\n                        context.buffer.presenceUpdates.data[key] = op.data[key];\n                    }\n                }\n                output.reverse.unshift(reverse);\n                output.presence = true;\n            } else {\n                let source;\n                if (isLocal) {\n                    source = 0 /* UNDOREDO_RECONNECT */ ;\n                } else {\n                    const opId = nn(op.opId);\n                    if (true) {\n                        nn(context.opStackTraces).delete(opId);\n                    }\n                    const deleted = context.unacknowledgedOps.delete(opId);\n                    source = deleted ? 2 /* ACK */  : 1 /* REMOTE */ ;\n                }\n                const applyOpResult = applyOp(op, source);\n                if (applyOpResult.modified) {\n                    const nodeId = applyOpResult.modified.node._id;\n                    if (!(nodeId && createdNodeIds.has(nodeId))) {\n                        output.storageUpdates.set(nn(applyOpResult.modified.node._id), mergeStorageUpdates(output.storageUpdates.get(nn(applyOpResult.modified.node._id)), applyOpResult.modified));\n                        output.reverse.unshift(...applyOpResult.reverse);\n                    }\n                    if (op.type === 2 /* CREATE_LIST */  || op.type === 7 /* CREATE_MAP */  || op.type === 4 /* CREATE_OBJECT */ ) {\n                        createdNodeIds.add(nn(op.id));\n                    }\n                }\n            }\n        }\n        return {\n            ops,\n            reverse: output.reverse,\n            updates: {\n                storageUpdates: output.storageUpdates,\n                presence: output.presence\n            }\n        };\n    }\n    function applyOp(op, source) {\n        if (isAckOp(op)) {\n            return {\n                modified: false\n            };\n        }\n        switch(op.type){\n            case 6 /* DELETE_OBJECT_KEY */ :\n            case 3 /* UPDATE_OBJECT */ :\n            case 5 /* DELETE_CRDT */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return node._apply(op, source === 0 /* UNDOREDO_RECONNECT */ );\n                }\n            case 1 /* SET_PARENT_KEY */ :\n                {\n                    const node = context.nodes.get(op.id);\n                    if (node === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    if (node.parent.type === \"HasParent\" && isLiveList(node.parent.node)) {\n                        return node.parent.node._setChildKey(asPos(op.parentKey), node, source);\n                    }\n                    return {\n                        modified: false\n                    };\n                }\n            case 4 /* CREATE_OBJECT */ :\n            case 2 /* CREATE_LIST */ :\n            case 7 /* CREATE_MAP */ :\n            case 8 /* CREATE_REGISTER */ :\n                {\n                    if (op.parentId === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    const parentNode = context.nodes.get(op.parentId);\n                    if (parentNode === void 0) {\n                        return {\n                            modified: false\n                        };\n                    }\n                    return parentNode._attachChild(op, source);\n                }\n        }\n    }\n    function updatePresence(patch, options2) {\n        const oldValues = {};\n        if (context.buffer.presenceUpdates === null) {\n            context.buffer.presenceUpdates = {\n                type: \"partial\",\n                data: {}\n            };\n        }\n        for(const key in patch){\n            const overrideValue = patch[key];\n            if (overrideValue === void 0) {\n                continue;\n            }\n            context.buffer.presenceUpdates.data[key] = overrideValue;\n            oldValues[key] = context.myPresence.current[key];\n        }\n        context.myPresence.patch(patch);\n        if (context.activeBatch) {\n            if (options2?.addToHistory) {\n                context.activeBatch.reverseOps.unshift({\n                    type: \"presence\",\n                    data: oldValues\n                });\n            }\n            context.activeBatch.updates.presence = true;\n        } else {\n            flushNowOrSoon();\n            batchUpdates(()=>{\n                if (options2?.addToHistory) {\n                    addToUndoStack([\n                        {\n                            type: \"presence\",\n                            data: oldValues\n                        }\n                    ], doNotBatchUpdates);\n                }\n                notify({\n                    presence: true\n                }, doNotBatchUpdates);\n            });\n        }\n    }\n    function onUpdatePresenceMessage(message) {\n        if (message.targetActor !== void 0) {\n            const oldUser = context.others.getUser(message.actor);\n            context.others.setOther(message.actor, message.data);\n            const newUser = context.others.getUser(message.actor);\n            if (oldUser === void 0 && newUser !== void 0) {\n                return {\n                    type: \"enter\",\n                    user: newUser\n                };\n            }\n        } else {\n            context.others.patchOther(message.actor, message.data), message;\n        }\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            return {\n                type: \"update\",\n                updates: message.data,\n                user\n            };\n        } else {\n            return void 0;\n        }\n    }\n    function onUserLeftMessage(message) {\n        const user = context.others.getUser(message.actor);\n        if (user) {\n            context.others.removeConnection(message.actor);\n            return {\n                type: \"leave\",\n                user\n            };\n        }\n        return null;\n    }\n    function onRoomStateMessage(message, batchedUpdatesWrapper) {\n        context.dynamicSessionInfo.set({\n            actor: message.actor,\n            nonce: message.nonce,\n            scopes: message.scopes\n        });\n        context.idFactory = makeIdFactory(message.actor);\n        notifySelfChanged(batchedUpdatesWrapper);\n        for (const connectionId of context.others.connectionIds()){\n            const user = message.users[connectionId];\n            if (user === void 0) {\n                context.others.removeConnection(connectionId);\n            }\n        }\n        for(const key in message.users){\n            const user = message.users[key];\n            const connectionId = Number(key);\n            context.others.setConnection(connectionId, user.id, user.info, user.scopes);\n        }\n        return {\n            type: \"reset\"\n        };\n    }\n    function canUndo() {\n        return context.undoStack.length > 0;\n    }\n    function canRedo() {\n        return context.redoStack.length > 0;\n    }\n    function onHistoryChange(batchedUpdatesWrapper) {\n        batchedUpdatesWrapper(()=>{\n            eventHub.history.notify({\n                canUndo: canUndo(),\n                canRedo: canRedo()\n            });\n        });\n    }\n    function onUserJoinedMessage(message) {\n        context.others.setConnection(message.actor, message.id, message.info, message.scopes);\n        context.buffer.messages.push({\n            type: 100 /* UPDATE_PRESENCE */ ,\n            data: context.myPresence.current,\n            targetActor: message.actor\n        });\n        flushNowOrSoon();\n        const user = context.others.getUser(message.actor);\n        return user ? {\n            type: \"enter\",\n            user\n        } : void 0;\n    }\n    function parseServerMessage(data) {\n        if (!isJsonObject(data)) {\n            return null;\n        }\n        return data;\n    }\n    function parseServerMessages(text) {\n        const data = tryParseJson(text);\n        if (data === void 0) {\n            return null;\n        } else if (isJsonArray(data)) {\n            return compact(data.map((item)=>parseServerMessage(item)));\n        } else {\n            return compact([\n                parseServerMessage(data)\n            ]);\n        }\n    }\n    function applyAndSendOps(offlineOps, batchedUpdatesWrapper) {\n        if (offlineOps.size === 0) {\n            return;\n        }\n        const messages = [];\n        const ops = Array.from(offlineOps.values());\n        const result = applyOps(ops, true);\n        messages.push({\n            type: 201 /* UPDATE_STORAGE */ ,\n            ops: result.ops\n        });\n        notify(result.updates, batchedUpdatesWrapper);\n        sendMessages(messages);\n    }\n    function handleServerMessage(event) {\n        if (typeof event.data !== \"string\") {\n            return;\n        }\n        const messages = parseServerMessages(event.data);\n        if (messages === null || messages.length === 0) {\n            return;\n        }\n        const updates = {\n            storageUpdates: /* @__PURE__ */ new Map(),\n            others: []\n        };\n        batchUpdates(()=>{\n            for (const message of messages){\n                switch(message.type){\n                    case 101 /* USER_JOINED */ :\n                        {\n                            const userJoinedUpdate = onUserJoinedMessage(message);\n                            if (userJoinedUpdate) {\n                                updates.others.push(userJoinedUpdate);\n                            }\n                            break;\n                        }\n                    case 100 /* UPDATE_PRESENCE */ :\n                        {\n                            const othersPresenceUpdate = onUpdatePresenceMessage(message);\n                            if (othersPresenceUpdate) {\n                                updates.others.push(othersPresenceUpdate);\n                            }\n                            break;\n                        }\n                    case 103 /* BROADCASTED_EVENT */ :\n                        {\n                            const others = context.others.current;\n                            eventHub.customEvent.notify({\n                                connectionId: message.actor,\n                                user: message.actor < 0 ? null : others.find((u)=>u.connectionId === message.actor) ?? null,\n                                event: message.event\n                            });\n                            break;\n                        }\n                    case 102 /* USER_LEFT */ :\n                        {\n                            const event2 = onUserLeftMessage(message);\n                            if (event2) {\n                                updates.others.push(event2);\n                            }\n                            break;\n                        }\n                    case 300 /* UPDATE_YDOC */ :\n                        {\n                            eventHub.ydoc.notify(message);\n                            break;\n                        }\n                    case 104 /* ROOM_STATE */ :\n                        {\n                            updates.others.push(onRoomStateMessage(message, doNotBatchUpdates));\n                            break;\n                        }\n                    case 200 /* INITIAL_STORAGE_STATE */ :\n                        {\n                            processInitialStorage(message);\n                            break;\n                        }\n                    case 201 /* UPDATE_STORAGE */ :\n                        {\n                            const applyResult = applyOps(message.ops, false);\n                            for (const [key, value] of applyResult.updates.storageUpdates){\n                                updates.storageUpdates.set(key, mergeStorageUpdates(updates.storageUpdates.get(key), value));\n                            }\n                            break;\n                        }\n                    case 299 /* REJECT_STORAGE_OP */ :\n                        {\n                            errorWithTitle(\"Storage mutation rejection error\", message.reason);\n                            if (true) {\n                                const traces = /* @__PURE__ */ new Set();\n                                for (const opId of message.opIds){\n                                    const trace = context.opStackTraces?.get(opId);\n                                    if (trace) {\n                                        traces.add(trace);\n                                    }\n                                }\n                                if (traces.size > 0) {\n                                    warnWithTitle(\"The following function calls caused the rejected storage mutations:\", `\n\n${Array.from(traces).join(\"\\n\\n\")}`);\n                                }\n                                throw new Error(`Storage mutations rejected by server: ${message.reason}`);\n                            }\n                            break;\n                        }\n                    case 400 /* THREAD_CREATED */ :\n                    case 401 /* THREAD_METADATA_UPDATED */ :\n                    case 405 /* COMMENT_REACTION_ADDED */ :\n                    case 406 /* COMMENT_REACTION_REMOVED */ :\n                    case 402 /* COMMENT_CREATED */ :\n                    case 403 /* COMMENT_EDITED */ :\n                    case 404 /* COMMENT_DELETED */ :\n                        {\n                            eventHub.comments.notify(message);\n                            break;\n                        }\n                }\n            }\n            notify(updates, doNotBatchUpdates);\n        });\n    }\n    function flushNowOrSoon() {\n        const storageOps = context.buffer.storageOperations;\n        if (storageOps.length > 0) {\n            for (const op of storageOps){\n                context.unacknowledgedOps.set(nn(op.opId), op);\n            }\n            notifyStorageStatus();\n        }\n        if (managedSocket.getStatus() !== \"connected\") {\n            context.buffer.storageOperations = [];\n            return;\n        }\n        const now = Date.now();\n        const elapsedMillis = now - context.buffer.lastFlushedAt;\n        if (elapsedMillis >= config.throttleDelay) {\n            const messagesToFlush = serializeBuffer();\n            if (messagesToFlush.length === 0) {\n                return;\n            }\n            sendMessages(messagesToFlush);\n            context.buffer = {\n                flushTimerID: void 0,\n                lastFlushedAt: now,\n                messages: [],\n                storageOperations: [],\n                presenceUpdates: null\n            };\n        } else {\n            clearTimeout(context.buffer.flushTimerID);\n            context.buffer.flushTimerID = setTimeout(flushNowOrSoon, config.throttleDelay - elapsedMillis);\n        }\n    }\n    function serializeBuffer() {\n        const messages = [];\n        if (context.buffer.presenceUpdates) {\n            messages.push(context.buffer.presenceUpdates.type === \"full\" ? {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                // Populating the `targetActor` field turns this message into\n                // a Full Presence™ update message (not a patch), which will get\n                // interpreted by other clients as such.\n                targetActor: -1,\n                data: context.buffer.presenceUpdates.data\n            } : {\n                type: 100 /* UPDATE_PRESENCE */ ,\n                data: context.buffer.presenceUpdates.data\n            });\n        }\n        for (const event of context.buffer.messages){\n            messages.push(event);\n        }\n        if (context.buffer.storageOperations.length > 0) {\n            messages.push({\n                type: 201 /* UPDATE_STORAGE */ ,\n                ops: context.buffer.storageOperations\n            });\n        }\n        return messages;\n    }\n    function updateYDoc(update, guid) {\n        const clientMsg = {\n            type: 301 /* UPDATE_YDOC */ ,\n            update,\n            guid\n        };\n        context.buffer.messages.push(clientMsg);\n        eventHub.ydoc.notify(clientMsg);\n        flushNowOrSoon();\n    }\n    function broadcastEvent(event, options2 = {\n        shouldQueueEventIfNotReady: false\n    }) {\n        if (managedSocket.getStatus() !== \"connected\" && !options2.shouldQueueEventIfNotReady) {\n            return;\n        }\n        context.buffer.messages.push({\n            type: 103 /* BROADCAST_EVENT */ ,\n            event\n        });\n        flushNowOrSoon();\n    }\n    function dispatchOps(ops) {\n        context.buffer.storageOperations.push(...ops);\n        flushNowOrSoon();\n    }\n    let _getStorage$ = null;\n    let _resolveStoragePromise = null;\n    function processInitialStorage(message) {\n        const unacknowledgedOps = new Map(context.unacknowledgedOps);\n        createOrUpdateRootFromMessage(message, doNotBatchUpdates);\n        applyAndSendOps(unacknowledgedOps, doNotBatchUpdates);\n        _resolveStoragePromise?.();\n        notifyStorageStatus();\n        eventHub.storageDidLoad.notify();\n    }\n    async function streamStorage() {\n        if (!managedSocket.authValue) {\n            return;\n        }\n        const result = await streamFetch(managedSocket.authValue.type === \"public\" ? managedSocket.authValue.publicApiKey : managedSocket.authValue.token.raw, config.roomId);\n        const items = await result.json();\n        processInitialStorage({\n            type: 200 /* INITIAL_STORAGE_STATE */ ,\n            items\n        });\n    }\n    function refreshStorage(options2) {\n        const messages = context.buffer.messages;\n        if (config.unstable_streamData) {\n            void streamStorage();\n        } else if (!messages.some((msg)=>msg.type === 200 /* FETCH_STORAGE */ )) {\n            messages.push({\n                type: 200 /* FETCH_STORAGE */ \n            });\n        }\n        if (options2.flush) {\n            flushNowOrSoon();\n        }\n    }\n    function startLoadingStorage() {\n        if (_getStorage$ === null) {\n            refreshStorage({\n                flush: true\n            });\n            _getStorage$ = new Promise((resolve)=>{\n                _resolveStoragePromise = resolve;\n            });\n            notifyStorageStatus();\n        }\n        return _getStorage$;\n    }\n    function getStorageSnapshot() {\n        const root = context.root;\n        if (root !== void 0) {\n            return root;\n        } else {\n            void startLoadingStorage();\n            return null;\n        }\n    }\n    async function getStorage() {\n        if (context.root !== void 0) {\n            return Promise.resolve({\n                root: context.root\n            });\n        }\n        await startLoadingStorage();\n        return {\n            root: nn(context.root)\n        };\n    }\n    function fetchYDoc(vector, guid) {\n        if (!context.buffer.messages.find((m)=>{\n            return m.type === 300 /* FETCH_YDOC */  && m.vector === vector && m.guid === guid;\n        })) {\n            context.buffer.messages.push({\n                type: 300 /* FETCH_YDOC */ ,\n                vector,\n                guid\n            });\n        }\n        flushNowOrSoon();\n    }\n    function undo() {\n        if (context.activeBatch) {\n            throw new Error(\"undo is not allowed during a batch\");\n        }\n        const historyOps = context.undoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.redoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function redo() {\n        if (context.activeBatch) {\n            throw new Error(\"redo is not allowed during a batch\");\n        }\n        const historyOps = context.redoStack.pop();\n        if (historyOps === void 0) {\n            return;\n        }\n        context.pausedHistory = null;\n        const result = applyOps(historyOps, true);\n        batchUpdates(()=>{\n            notify(result.updates, doNotBatchUpdates);\n            context.undoStack.push(result.reverse);\n            onHistoryChange(doNotBatchUpdates);\n        });\n        for (const op of result.ops){\n            if (op.type !== \"presence\") {\n                context.buffer.storageOperations.push(op);\n            }\n        }\n        flushNowOrSoon();\n    }\n    function clear() {\n        context.undoStack.length = 0;\n        context.redoStack.length = 0;\n    }\n    function batch(callback) {\n        if (context.activeBatch) {\n            return callback();\n        }\n        let returnValue = void 0;\n        batchUpdates(()=>{\n            context.activeBatch = {\n                ops: [],\n                updates: {\n                    storageUpdates: /* @__PURE__ */ new Map(),\n                    presence: false,\n                    others: []\n                },\n                reverseOps: []\n            };\n            try {\n                returnValue = callback();\n            } finally{\n                const currentBatch = context.activeBatch;\n                context.activeBatch = null;\n                if (currentBatch.reverseOps.length > 0) {\n                    addToUndoStack(currentBatch.reverseOps, doNotBatchUpdates);\n                }\n                if (currentBatch.ops.length > 0) {\n                    context.redoStack.length = 0;\n                }\n                if (currentBatch.ops.length > 0) {\n                    dispatchOps(currentBatch.ops);\n                }\n                notify(currentBatch.updates, doNotBatchUpdates);\n                flushNowOrSoon();\n            }\n        });\n        return returnValue;\n    }\n    function pauseHistory() {\n        if (context.pausedHistory === null) {\n            context.pausedHistory = [];\n        }\n    }\n    function resumeHistory() {\n        const historyOps = context.pausedHistory;\n        context.pausedHistory = null;\n        if (historyOps !== null && historyOps.length > 0) {\n            _addToRealUndoStack(historyOps, batchUpdates);\n        }\n    }\n    function getStorageStatus() {\n        if (context.root === void 0) {\n            return _getStorage$ === null ? \"not-loaded\" : \"loading\";\n        } else {\n            return context.unacknowledgedOps.size === 0 ? \"synchronized\" : \"synchronizing\";\n        }\n    }\n    let _lastStorageStatus = getStorageStatus();\n    function notifyStorageStatus() {\n        const storageStatus = getStorageStatus();\n        if (_lastStorageStatus !== storageStatus) {\n            _lastStorageStatus = storageStatus;\n            eventHub.storageStatus.notify(storageStatus);\n        }\n    }\n    const others_forDevTools = new DerivedRef(context.others, (others)=>others.map((other, index)=>userToTreeNode(`Other ${index}`, other)));\n    const events = {\n        status: eventHub.status.observable,\n        lostConnection: eventHub.lostConnection.observable,\n        customEvent: eventHub.customEvent.observable,\n        others: eventHub.others.observable,\n        self: eventHub.self.observable,\n        myPresence: eventHub.myPresence.observable,\n        error: eventHub.error.observable,\n        storage: eventHub.storage.observable,\n        history: eventHub.history.observable,\n        storageDidLoad: eventHub.storageDidLoad.observable,\n        storageStatus: eventHub.storageStatus.observable,\n        ydoc: eventHub.ydoc.observable,\n        comments: eventHub.comments.observable\n    };\n    const commentsApi = createCommentsApi(config.roomId, delegates.authenticate, {\n        baseUrl: config.baseUrl\n    });\n    return Object.defineProperty({\n        /* NOTE: Exposing __internal here only to allow testing implementation details in unit tests */ __internal: {\n            get presenceBuffer () {\n                return deepClone(context.buffer.presenceUpdates?.data ?? null);\n            },\n            // prettier-ignore\n            get undoStack () {\n                return deepClone(context.undoStack);\n            },\n            // prettier-ignore\n            get nodeCount () {\n                return context.nodes.size;\n            },\n            // prettier-ignore\n            // Support for the Liveblocks browser extension\n            getSelf_forDevTools: ()=>selfAsTreeNode.current,\n            getOthers_forDevTools: ()=>others_forDevTools.current,\n            // prettier-ignore\n            simulate: {\n                // These exist only for our E2E testing app\n                explicitClose: (event)=>managedSocket._privateSendMachineEvent({\n                        type: \"EXPLICIT_SOCKET_CLOSE\",\n                        event\n                    }),\n                rawSend: (data)=>managedSocket.send(data)\n            }\n        },\n        id: config.roomId,\n        subscribe: makeClassicSubscribeFn(events),\n        connect: ()=>managedSocket.connect(),\n        reconnect: ()=>managedSocket.reconnect(),\n        disconnect: ()=>managedSocket.disconnect(),\n        destroy: ()=>{\n            uninstallBgTabSpy();\n            managedSocket.destroy();\n        },\n        // Presence\n        updatePresence,\n        updateYDoc,\n        broadcastEvent,\n        // Storage\n        batch,\n        history: {\n            undo,\n            redo,\n            canUndo,\n            canRedo,\n            clear,\n            pause: pauseHistory,\n            resume: resumeHistory\n        },\n        fetchYDoc,\n        getStorage,\n        getStorageSnapshot,\n        getStorageStatus,\n        events,\n        // Core\n        getStatus: ()=>managedSocket.getStatus(),\n        getConnectionState: ()=>managedSocket.getLegacyStatus(),\n        getSelf: ()=>self.current,\n        // Presence\n        getPresence: ()=>context.myPresence.current,\n        getOthers: ()=>context.others.current,\n        ...commentsApi\n    }, // Explictly make the __internal field non-enumerable, to avoid aggressive\n    // freezing when used with Immer\n    \"__internal\", {\n        enumerable: false\n    });\n}\nfunction makeClassicSubscribeFn(events) {\n    function subscribeToLiveStructureDeeply(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            const relatedUpdates = updates.filter((update)=>isSameNodeOrChildOf(update.node, node));\n            if (relatedUpdates.length > 0) {\n                callback(relatedUpdates);\n            }\n        });\n    }\n    function subscribeToLiveStructureShallowly(node, callback) {\n        return events.storage.subscribe((updates)=>{\n            for (const update of updates){\n                if (update.node._id === node._id) {\n                    callback(update.node);\n                }\n            }\n        });\n    }\n    function subscribe(first, second, options) {\n        if (typeof first === \"string\" && isRoomEventName(first)) {\n            if (typeof second !== \"function\") {\n                throw new Error(\"Second argument must be a callback function\");\n            }\n            const callback = second;\n            switch(first){\n                case \"event\":\n                    return events.customEvent.subscribe(callback);\n                case \"my-presence\":\n                    return events.myPresence.subscribe(callback);\n                case \"others\":\n                    {\n                        const cb = callback;\n                        return events.others.subscribe((event)=>{\n                            const { others, ...internalEvent } = event;\n                            return cb(others, internalEvent);\n                        });\n                    }\n                case \"error\":\n                    return events.error.subscribe(callback);\n                case \"connection\":\n                    {\n                        const cb = callback;\n                        return events.status.subscribe((status)=>cb(newToLegacyStatus(status)));\n                    }\n                case \"status\":\n                    return events.status.subscribe(callback);\n                case \"lost-connection\":\n                    return events.lostConnection.subscribe(callback);\n                case \"history\":\n                    return events.history.subscribe(callback);\n                case \"storage-status\":\n                    return events.storageStatus.subscribe(callback);\n                default:\n                    return assertNever(first, `\"${String(first)}\" is not a valid event name`);\n            }\n        }\n        if (second === void 0 || typeof first === \"function\") {\n            if (typeof first === \"function\") {\n                const storageCallback = first;\n                return events.storage.subscribe(storageCallback);\n            } else {\n                throw new Error(\"Please specify a listener callback\");\n            }\n        }\n        if (isLiveNode(first)) {\n            const node = first;\n            if (options?.isDeep) {\n                const storageCallback = second;\n                return subscribeToLiveStructureDeeply(node, storageCallback);\n            } else {\n                const nodeCallback = second;\n                return subscribeToLiveStructureShallowly(node, nodeCallback);\n            }\n        }\n        throw new Error(`${String(first)} is not a value that can be subscribed to.`);\n    }\n    return subscribe;\n}\nfunction isRoomEventName(value) {\n    return value === \"my-presence\" || value === \"others\" || value === \"event\" || value === \"error\" || value === \"history\" || value === \"status\" || value === \"storage-status\" || value === \"lost-connection\" || value === \"connection\";\n}\nfunction makeAuthDelegateForRoom(roomId, authManager) {\n    return async ()=>{\n        return authManager.getAuthValue(\"room:read\", roomId);\n    };\n}\nfunction makeCreateSocketDelegateForRoom(roomId, baseUrl, WebSocketPolyfill) {\n    return (authValue)=>{\n        const ws = WebSocketPolyfill ?? (typeof WebSocket === \"undefined\" ? void 0 : WebSocket);\n        if (ws === void 0) {\n            throw new StopRetrying(\"To use Liveblocks client in a non-DOM environment, you need to provide a WebSocket polyfill.\");\n        }\n        const url = new URL(baseUrl);\n        url.protocol = url.protocol === \"http:\" ? \"ws\" : \"wss\";\n        url.pathname = \"/v7\";\n        url.searchParams.set(\"roomId\", roomId);\n        if (authValue.type === \"secret\") {\n            url.searchParams.set(\"tok\", authValue.token.raw);\n        } else if (authValue.type === \"public\") {\n            url.searchParams.set(\"pubkey\", authValue.publicApiKey);\n        } else {\n            return assertNever(authValue, \"Unhandled case\");\n        }\n        url.searchParams.set(\"version\", PKG_VERSION || \"dev\");\n        return new ws(url.toString());\n    };\n}\n// src/client.ts\nvar MIN_THROTTLE = 16;\nvar MAX_THROTTLE = 1e3;\nvar DEFAULT_THROTTLE = 100;\nvar MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT = 15e3;\nvar MIN_LOST_CONNECTION_TIMEOUT = 200;\nvar RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT = 1e3;\nvar MAX_LOST_CONNECTION_TIMEOUT = 3e4;\nvar DEFAULT_LOST_CONNECTION_TIMEOUT = 5e3;\nfunction getBaseUrlFromClientOptions(clientOptions) {\n    if (\"liveblocksServer\" in clientOptions) {\n        throw new Error(\"Client option no longer supported\");\n    }\n    if (typeof clientOptions.baseUrl === \"string\" && clientOptions.baseUrl.startsWith(\"http\")) {\n        return clientOptions.baseUrl;\n    } else {\n        return DEFAULT_BASE_URL;\n    }\n}\nfunction createClient(options) {\n    const clientOptions = options;\n    const throttleDelay = getThrottle(clientOptions.throttle ?? DEFAULT_THROTTLE);\n    const lostConnectionTimeout = getLostConnectionTimeout(clientOptions.lostConnectionTimeout ?? DEFAULT_LOST_CONNECTION_TIMEOUT);\n    const backgroundKeepAliveTimeout = getBackgroundKeepAliveTimeout(clientOptions.backgroundKeepAliveTimeout);\n    const authManager = createAuthManager(options);\n    const roomsById = /* @__PURE__ */ new Map();\n    function teardownRoom(room) {\n        unlinkDevTools(room.id);\n        roomsById.delete(room.id);\n        room.destroy();\n    }\n    function leaseRoom(info) {\n        const leave = ()=>{\n            const self = leave;\n            if (!info.unsubs.delete(self)) {\n                warn(\"This leave function was already called. Calling it more than once has no effect.\");\n            } else {\n                if (info.unsubs.size === 0) {\n                    teardownRoom(info.room);\n                }\n            }\n        };\n        info.unsubs.add(leave);\n        return {\n            room: info.room,\n            leave\n        };\n    }\n    function enterRoom(roomId, options2) {\n        const existing = roomsById.get(roomId);\n        if (existing !== void 0) {\n            return leaseRoom(existing);\n        }\n        deprecateIf(options2.initialPresence === null || options2.initialPresence === void 0, \"Please provide an initial presence value for the current user when entering the room.\");\n        const baseUrl = getBaseUrlFromClientOptions(clientOptions);\n        const newRoom = createRoom({\n            initialPresence: options2.initialPresence ?? {},\n            initialStorage: options2.initialStorage\n        }, {\n            roomId,\n            throttleDelay,\n            lostConnectionTimeout,\n            backgroundKeepAliveTimeout,\n            polyfills: clientOptions.polyfills,\n            delegates: clientOptions.mockedDelegates ?? {\n                createSocket: makeCreateSocketDelegateForRoom(roomId, baseUrl, clientOptions.polyfills?.WebSocket),\n                authenticate: makeAuthDelegateForRoom(roomId, authManager)\n            },\n            enableDebugLogging: clientOptions.enableDebugLogging,\n            unstable_batchedUpdates: options2?.unstable_batchedUpdates,\n            baseUrl,\n            unstable_fallbackToHTTP: !!clientOptions.unstable_fallbackToHTTP,\n            unstable_streamData: !!clientOptions.unstable_streamData\n        });\n        const newRoomInfo = {\n            room: newRoom,\n            unsubs: /* @__PURE__ */ new Set()\n        };\n        roomsById.set(roomId, newRoomInfo);\n        setupDevTools(()=>Array.from(roomsById.keys()));\n        linkDevTools(roomId, newRoom);\n        const shouldConnect = options2.autoConnect ?? options2.shouldInitiallyConnect ?? true;\n        if (shouldConnect) {\n            if (typeof atob === \"undefined\") {\n                if (clientOptions.polyfills?.atob === void 0) {\n                    throw new Error(\"You need to polyfill atob to use the client in your environment. Please follow the instructions at https://liveblocks.io/docs/errors/liveblocks-client/atob-polyfill\");\n                }\n                global.atob = clientOptions.polyfills.atob;\n            }\n            newRoom.connect();\n        }\n        return leaseRoom(newRoomInfo);\n    }\n    function enter(roomId, options2) {\n        const { room, leave: _ } = enterRoom(roomId, options2);\n        return room;\n    }\n    function getRoom(roomId) {\n        const room = roomsById.get(roomId)?.room;\n        return room ? room : null;\n    }\n    function forceLeave(roomId) {\n        const unsubs = roomsById.get(roomId)?.unsubs ?? /* @__PURE__ */ new Set();\n        for (const unsub of unsubs){\n            unsub();\n        }\n    }\n    function logout() {\n        authManager.reset();\n        for (const { room } of roomsById.values()){\n            if (!isIdle(room.getStatus())) {\n                room.reconnect();\n            }\n        }\n    }\n    return {\n        logout,\n        // Old, deprecated APIs\n        enter,\n        getRoom,\n        leave: forceLeave,\n        // New, preferred API\n        enterRoom\n    };\n}\nfunction checkBounds(option, value, min, max, recommendedMin) {\n    if (typeof value !== \"number\" || value < min || max !== void 0 && value > max) {\n        throw new Error(max !== void 0 ? `${option} should be between ${recommendedMin ?? min} and ${max}.` : `${option} should be at least ${recommendedMin ?? min}.`);\n    }\n    return value;\n}\nfunction getBackgroundKeepAliveTimeout(value) {\n    if (value === void 0) return void 0;\n    return checkBounds(\"backgroundKeepAliveTimeout\", value, MIN_BACKGROUND_KEEP_ALIVE_TIMEOUT);\n}\nfunction getThrottle(value) {\n    return checkBounds(\"throttle\", value, MIN_THROTTLE, MAX_THROTTLE);\n}\nfunction getLostConnectionTimeout(value) {\n    return checkBounds(\"lostConnectionTimeout\", value, MIN_LOST_CONNECTION_TIMEOUT, MAX_LOST_CONNECTION_TIMEOUT, RECOMMENDED_MIN_LOST_CONNECTION_TIMEOUT);\n}\n// src/crdts/utils.ts\nfunction toPlainLson(lson) {\n    if (lson instanceof LiveObject) {\n        return {\n            liveblocksType: \"LiveObject\",\n            data: Object.fromEntries(Object.entries(lson.toObject()).flatMap(([key, value])=>value !== void 0 ? [\n                    [\n                        key,\n                        toPlainLson(value)\n                    ]\n                ] : []))\n        };\n    } else if (lson instanceof LiveMap) {\n        return {\n            liveblocksType: \"LiveMap\",\n            data: Object.fromEntries([\n                ...lson\n            ].map(([key, value])=>[\n                    key,\n                    toPlainLson(value)\n                ]))\n        };\n    } else if (lson instanceof LiveList) {\n        return {\n            liveblocksType: \"LiveList\",\n            data: [\n                ...lson\n            ].map((item)=>toPlainLson(item))\n        };\n    } else {\n        return lson;\n    }\n}\n// src/immutable.ts\nfunction lsonObjectToJson(obj) {\n    const result = {};\n    for(const key in obj){\n        const val = obj[key];\n        if (val !== void 0) {\n            result[key] = lsonToJson(val);\n        }\n    }\n    return result;\n}\nfunction liveObjectToJson(liveObject) {\n    return lsonObjectToJson(liveObject.toObject());\n}\nfunction liveMapToJson(map) {\n    const result = {};\n    for (const [key, value] of map.entries()){\n        result[key] = lsonToJson(value);\n    }\n    return result;\n}\nfunction lsonListToJson(value) {\n    return value.map(lsonToJson);\n}\nfunction liveListToJson(value) {\n    return lsonListToJson(value.toArray());\n}\nfunction lsonToJson(value) {\n    if (value instanceof LiveObject) {\n        return liveObjectToJson(value);\n    } else if (value instanceof LiveList) {\n        return liveListToJson(value);\n    } else if (value instanceof LiveMap) {\n        return liveMapToJson(value);\n    } else if (value instanceof LiveRegister) {\n        return value.data;\n    }\n    if (Array.isArray(value)) {\n        return lsonListToJson(value);\n    } else if (isPlainObject(value)) {\n        return lsonObjectToJson(value);\n    }\n    return value;\n}\nfunction deepLiveify(value) {\n    if (Array.isArray(value)) {\n        return new LiveList(value.map(deepLiveify));\n    } else if (isPlainObject(value)) {\n        const init = {};\n        for(const key in value){\n            const val = value[key];\n            if (val === void 0) {\n                continue;\n            }\n            init[key] = deepLiveify(val);\n        }\n        return new LiveObject(init);\n    } else {\n        return value;\n    }\n}\nfunction patchLiveList(liveList, prev, next) {\n    let i = 0;\n    let prevEnd = prev.length - 1;\n    let nextEnd = next.length - 1;\n    let prevNode = prev[0];\n    let nextNode = next[0];\n    outer: {\n        while(prevNode === nextNode){\n            ++i;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[i];\n            nextNode = next[i];\n        }\n        prevNode = prev[prevEnd];\n        nextNode = next[nextEnd];\n        while(prevNode === nextNode){\n            prevEnd--;\n            nextEnd--;\n            if (i > prevEnd || i > nextEnd) {\n                break outer;\n            }\n            prevNode = prev[prevEnd];\n            nextNode = next[nextEnd];\n        }\n    }\n    if (i > prevEnd) {\n        if (i <= nextEnd) {\n            while(i <= nextEnd){\n                liveList.insert(deepLiveify(next[i]), i);\n                i++;\n            }\n        }\n    } else if (i > nextEnd) {\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    } else {\n        while(i <= prevEnd && i <= nextEnd){\n            prevNode = prev[i];\n            nextNode = next[i];\n            const liveListNode = liveList.get(i);\n            if (isLiveObject(liveListNode) && isPlainObject(prevNode) && isPlainObject(nextNode)) {\n                patchLiveObject(liveListNode, prevNode, nextNode);\n            } else {\n                liveList.set(i, deepLiveify(nextNode));\n            }\n            i++;\n        }\n        while(i <= nextEnd){\n            liveList.insert(deepLiveify(next[i]), i);\n            i++;\n        }\n        let localI = i;\n        while(localI <= prevEnd){\n            liveList.delete(i);\n            localI++;\n        }\n    }\n}\nfunction patchLiveObjectKey(liveObject, key, prev, next) {\n    if (true) {\n        const nonSerializableValue = findNonSerializableValue(next);\n        if (nonSerializableValue) {\n            error2(`New state path: '${nonSerializableValue.path}' value: '${String(nonSerializableValue.value)}' is not serializable.\nOnly serializable value can be synced with Liveblocks.`);\n            return;\n        }\n    }\n    const value = liveObject.get(key);\n    if (next === void 0) {\n        liveObject.delete(key);\n    } else if (value === void 0) {\n        liveObject.set(key, deepLiveify(next));\n    } else if (prev === next) {\n        return;\n    } else if (isLiveList(value) && Array.isArray(prev) && Array.isArray(next)) {\n        patchLiveList(value, prev, next);\n    } else if (isLiveObject(value) && isPlainObject(prev) && isPlainObject(next)) {\n        patchLiveObject(value, prev, next);\n    } else {\n        liveObject.set(key, deepLiveify(next));\n    }\n}\nfunction patchLiveObject(root, prev, next) {\n    const updates = {};\n    for(const key in next){\n        patchLiveObjectKey(root, key, prev[key], next[key]);\n    }\n    for(const key in prev){\n        if (next[key] === void 0) {\n            root.delete(key);\n        }\n    }\n    if (Object.keys(updates).length > 0) {\n        root.update(updates);\n    }\n}\nfunction getParentsPath(node) {\n    const path = [];\n    while(node.parent.type === \"HasParent\"){\n        if (isLiveList(node.parent.node)) {\n            path.push(node.parent.node._indexOfPosition(node.parent.key));\n        } else {\n            path.push(node.parent.key);\n        }\n        node = node.parent.node;\n    }\n    return path;\n}\nfunction legacy_patchImmutableObject(state, updates) {\n    return updates.reduce((state2, update)=>legacy_patchImmutableObjectWithUpdate(state2, update), state);\n}\nfunction legacy_patchImmutableObjectWithUpdate(state, update) {\n    const path = getParentsPath(update.node);\n    return legacy_patchImmutableNode(state, path, update);\n}\nfunction legacy_patchImmutableNode(state, path, update) {\n    const pathItem = path.pop();\n    if (pathItem === void 0) {\n        switch(update.type){\n            case \"LiveObject\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveObject but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        if (update.updates[key]?.type === \"update\") {\n                            const val = update.node.get(key);\n                            if (val !== void 0) {\n                                newState[key] = lsonToJson(val);\n                            }\n                        } else if (update.updates[key]?.type === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveList\":\n                {\n                    if (!Array.isArray(state)) {\n                        throw new Error(\"Internal: received update on LiveList but state was not an array\");\n                    }\n                    let newState = state.map((x)=>x);\n                    for (const listUpdate of update.updates){\n                        if (listUpdate.type === \"set\") {\n                            newState = newState.map((item, index)=>index === listUpdate.index ? lsonToJson(listUpdate.item) : item);\n                        } else if (listUpdate.type === \"insert\") {\n                            if (listUpdate.index === newState.length) {\n                                newState.push(lsonToJson(listUpdate.item));\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index)\n                                ];\n                            }\n                        } else if (listUpdate.type === \"delete\") {\n                            newState.splice(listUpdate.index, 1);\n                        } else if (listUpdate.type === \"move\") {\n                            if (listUpdate.previousIndex > listUpdate.index) {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.index),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1)\n                                ];\n                            } else {\n                                newState = [\n                                    ...newState.slice(0, listUpdate.previousIndex),\n                                    ...newState.slice(listUpdate.previousIndex + 1, listUpdate.index + 1),\n                                    lsonToJson(listUpdate.item),\n                                    ...newState.slice(listUpdate.index + 1)\n                                ];\n                            }\n                        }\n                    }\n                    return newState;\n                }\n            case \"LiveMap\":\n                {\n                    if (!isJsonObject(state)) {\n                        throw new Error(\"Internal: received update on LiveMap but state was not an object\");\n                    }\n                    const newState = Object.assign({}, state);\n                    for(const key in update.updates){\n                        if (update.updates[key]?.type === \"update\") {\n                            const value = update.node.get(key);\n                            if (value !== void 0) {\n                                newState[key] = lsonToJson(value);\n                            }\n                        } else if (update.updates[key]?.type === \"delete\") {\n                            delete newState[key];\n                        }\n                    }\n                    return newState;\n                }\n        }\n    }\n    if (Array.isArray(state)) {\n        const newArray = [\n            ...state\n        ];\n        newArray[pathItem] = legacy_patchImmutableNode(state[pathItem], path, update);\n        return newArray;\n    } else if (isJsonObject(state)) {\n        const node = state[pathItem];\n        if (node === void 0) {\n            return state;\n        } else {\n            const stateAsObj = state;\n            return {\n                ...stateAsObj,\n                [pathItem]: legacy_patchImmutableNode(node, path, update)\n            };\n        }\n    } else {\n        return state;\n    }\n}\n// src/lib/shallow.ts\nfunction shallowArray(xs, ys) {\n    if (xs.length !== ys.length) {\n        return false;\n    }\n    for(let i = 0; i < xs.length; i++){\n        if (!Object.is(xs[i], ys[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction shallowObj(objA, objB) {\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null || Object.prototype.toString.call(objA) !== \"[object Object]\" || Object.prototype.toString.call(objB) !== \"[object Object]\") {\n        return false;\n    }\n    const keysA = Object.keys(objA);\n    if (keysA.length !== Object.keys(objB).length) {\n        return false;\n    }\n    return keysA.every((key)=>Object.prototype.hasOwnProperty.call(objB, key) && Object.is(objA[key], objB[key]));\n}\nfunction shallow(a, b) {\n    if (Object.is(a, b)) {\n        return true;\n    }\n    const isArrayA = Array.isArray(a);\n    const isArrayB = Array.isArray(b);\n    if (isArrayA || isArrayB) {\n        if (!isArrayA || !isArrayB) {\n            return false;\n        }\n        return shallowArray(a, b);\n    }\n    return shallowObj(a, b);\n}\n// src/lib/AsyncCache.ts\nvar noop = ()=>{};\nfunction isShallowEqual(a, b) {\n    if (a.isLoading !== b.isLoading || a.data === void 0 !== (b.data === void 0) || a.error === void 0 !== (b.error === void 0)) {\n        return false;\n    } else {\n        return shallow(a.data, b.data) && shallow(a.error, b.error);\n    }\n}\nfunction createCacheItem(key, asyncFunction, options) {\n    const $asyncFunction = async ()=>asyncFunction(key);\n    const context = {\n        isInvalid: true\n    };\n    let state = {\n        isLoading: false\n    };\n    let previousState = {\n        isLoading: false\n    };\n    const eventSource2 = makeEventSource();\n    function notify() {\n        const isEqual = options?.isStateEqual ?? isShallowEqual;\n        if (!isEqual(previousState, state)) {\n            previousState = state;\n            eventSource2.notify(state);\n        }\n    }\n    async function resolve() {\n        if (!context.promise) {\n            return;\n        }\n        try {\n            const data = await context.promise;\n            context.isInvalid = false;\n            state = {\n                isLoading: false,\n                data\n            };\n        } catch (error3) {\n            state = {\n                isLoading: false,\n                data: state.data,\n                error: error3\n            };\n        }\n        context.promise = void 0;\n        notify();\n    }\n    async function revalidate() {\n        context.isInvalid = true;\n        return get();\n    }\n    async function get() {\n        if (context.isInvalid) {\n            if (!context.promise) {\n                context.isInvalid = true;\n                context.promise = $asyncFunction();\n                state = {\n                    isLoading: true,\n                    data: state.data\n                };\n                notify();\n            }\n            await resolve();\n        }\n        return getState();\n    }\n    function getState() {\n        return state;\n    }\n    return {\n        ...eventSource2.observable,\n        get,\n        getState,\n        revalidate\n    };\n}\nfunction createAsyncCache(asyncFunction, options) {\n    const cache = /* @__PURE__ */ new Map();\n    function create(key) {\n        let cacheItem = cache.get(key);\n        if (cacheItem) {\n            return cacheItem;\n        }\n        cacheItem = createCacheItem(key, asyncFunction, options);\n        cache.set(key, cacheItem);\n        return cacheItem;\n    }\n    function get(key) {\n        return create(key).get();\n    }\n    function getState(key) {\n        return cache.get(key)?.getState();\n    }\n    function revalidate(key) {\n        return create(key).revalidate();\n    }\n    function subscribe(key, callback) {\n        return create(key).subscribe(callback) ?? noop;\n    }\n    function subscribeOnce(key, callback) {\n        return create(key).subscribeOnce(callback) ?? noop;\n    }\n    function has(key) {\n        return cache.has(key);\n    }\n    function clear() {\n        cache.clear();\n    }\n    return {\n        create,\n        get,\n        getState,\n        revalidate,\n        subscribe,\n        subscribeOnce,\n        has,\n        clear\n    };\n}\n// src/lib/Poller.ts\nfunction makePoller(callback) {\n    let context = {\n        state: \"stopped\",\n        timeoutHandle: null,\n        interval: null,\n        lastScheduledAt: null,\n        remainingInterval: null\n    };\n    function poll() {\n        if (context.state === \"running\") {\n            schedule(context.interval);\n        }\n        void callback();\n    }\n    function schedule(interval) {\n        context = {\n            state: \"running\",\n            interval: context.state !== \"stopped\" ? context.interval : interval,\n            lastScheduledAt: performance.now(),\n            timeoutHandle: setTimeout(poll, interval),\n            remainingInterval: null\n        };\n    }\n    function scheduleRemaining(remaining) {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        context = {\n            state: \"running\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: setTimeout(poll, remaining),\n            remainingInterval: null\n        };\n    }\n    function start(interval) {\n        if (context.state === \"running\") {\n            return;\n        }\n        schedule(interval);\n    }\n    function restart(interval) {\n        stop();\n        start(interval);\n    }\n    function pause() {\n        if (context.state !== \"running\") {\n            return;\n        }\n        clearTimeout(context.timeoutHandle);\n        context = {\n            state: \"paused\",\n            interval: context.interval,\n            lastScheduledAt: context.lastScheduledAt,\n            timeoutHandle: null,\n            remainingInterval: context.interval - (performance.now() - context.lastScheduledAt)\n        };\n    }\n    function resume() {\n        if (context.state !== \"paused\") {\n            return;\n        }\n        scheduleRemaining(context.remainingInterval);\n    }\n    function stop() {\n        if (context.state === \"stopped\") {\n            return;\n        }\n        if (context.timeoutHandle) {\n            clearTimeout(context.timeoutHandle);\n        }\n        context = {\n            state: \"stopped\",\n            interval: null,\n            lastScheduledAt: null,\n            timeoutHandle: null,\n            remainingInterval: null\n        };\n    }\n    return {\n        start,\n        restart,\n        pause,\n        resume,\n        stop\n    };\n}\n// src/lib/stringify.ts\nfunction stringify(object, ...args) {\n    if (typeof object !== \"object\" || object === null || Array.isArray(object)) {\n        return JSON.stringify(object, ...args);\n    }\n    const sortedObject = Object.keys(object).sort().reduce((sortedObject2, key)=>{\n        sortedObject2[key] = object[key];\n        return sortedObject2;\n    }, {});\n    return JSON.stringify(sortedObject, ...args);\n}\n// src/index.ts\ndetectDupes(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@liveblocks/react/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@liveblocks/react/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientSideSuspense: () => (/* binding */ ClientSideSuspense),\n/* harmony export */   createRoomContext: () => (/* binding */ createRoomContext),\n/* harmony export */   shallow: () => (/* reexport safe */ _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow),\n/* harmony export */   useRoomContextBundle: () => (/* binding */ useRoomContextBundle)\n/* harmony export */ });\n/* harmony import */ var _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @liveblocks/client */ \"(ssr)/./node_modules/@liveblocks/core/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.js\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* __next_internal_client_entry_do_not_use__ ClientSideSuspense,createRoomContext,shallow,useRoomContextBundle auto */ // src/index.ts\n\n// src/version.ts\nvar PKG_NAME = \"@liveblocks/react\";\nvar PKG_VERSION = \"1.9.7\";\nvar PKG_FORMAT = \"esm\";\n// src/ClientSideSuspense.tsx\n\nfunction ClientSideSuspense(props) {\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setMounted(true);\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n        fallback: props.fallback\n    }, mounted ? props.children() : props.fallback);\n}\n// src/factory.tsx\n\n\n\n\n// src/comments/CommentsRoom.tsx\n\n\n\n\n// src/comments/errors.ts\nvar CreateThreadError = class extends Error {\n    constructor(cause, context){\n        super(\"Create thread failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateThreadError\";\n    }\n};\nvar EditThreadMetadataError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit thread metadata failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditThreadMetadataError\";\n    }\n};\nvar CreateCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Create comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"CreateCommentError\";\n    }\n};\nvar EditCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Edit comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"EditCommentError\";\n    }\n};\nvar DeleteCommentError = class extends Error {\n    constructor(cause, context){\n        super(\"Delete comment failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"DeleteCommentError\";\n    }\n};\nvar AddReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Add reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"AddReactionError\";\n    }\n};\nvar RemoveReactionError = class extends Error {\n    constructor(cause, context){\n        super(\"Remove reaction failed.\");\n        this.cause = cause;\n        this.context = context;\n        this.name = \"RemoveReactionError\";\n    }\n};\n// src/comments/lib/revalidation.ts\n\n// src/comments/lib/use-is-document-visible.ts\n\nfunction useIsDocumentVisible() {\n    const isVisible = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);\n    return isVisible;\n}\nfunction subscribe(onStoreChange) {\n    document.addEventListener(\"visibilitychange\", onStoreChange);\n    return ()=>{\n        document.removeEventListener(\"visibilitychange\", onStoreChange);\n    };\n}\nfunction getSnapshot() {\n    const isDocumentDefined = typeof document !== \"undefined\";\n    return isDocumentDefined ? document.visibilityState === \"visible\" : true;\n}\n// src/comments/lib/use-is-online.ts\n\n\nfunction useIsOnline() {\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((onStoreChange)=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n            onStoreChange();\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n            onStoreChange();\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const getSnapshot2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        return isOnlineRef.current;\n    }, []);\n    const isOnline = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getSnapshot2, getSnapshot2);\n    return isOnline;\n}\n// src/comments/lib/revalidation.ts\nvar DEFAULT_ERROR_RETRY_INTERVAL = 5e3;\nvar DEFAULT_MAX_ERROR_RETRY_COUNT = 5;\nvar DEFAULT_DEDUPING_INTERVAL = 2e3;\nvar timestamp = 0;\nfunction useRevalidateCache(manager, fetcher, options = {}) {\n    const isOnlineRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const { dedupingInterval = DEFAULT_DEDUPING_INTERVAL, errorRetryInterval = DEFAULT_ERROR_RETRY_INTERVAL, errorRetryCount = DEFAULT_MAX_ERROR_RETRY_COUNT } = options;\n    const _revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ shouldDedupe, retryCount = 0 })=>{\n        let startAt;\n        const shouldStartRequest = !manager.getRequest() || !shouldDedupe;\n        function deleteActiveRequest() {\n            const activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            if (activeRequest.timestamp !== startAt) return;\n            manager.setRequest(void 0);\n        }\n        function handleError() {\n            const timeout = ~~((Math.random() + 0.5) * (1 << (retryCount < 8 ? retryCount : 8))) * errorRetryInterval;\n            if (retryCount > errorRetryCount) return;\n            setTimeout(()=>{\n                void _revalidateCache({\n                    shouldDedupe: false,\n                    retryCount: retryCount + 1\n                });\n            }, timeout);\n        }\n        if (shouldStartRequest) {\n            manager.setRequest({\n                fetcher: fetcher(),\n                timestamp: ++timestamp\n            });\n        }\n        try {\n            let activeRequest = manager.getRequest();\n            if (!activeRequest) return;\n            startAt = activeRequest.timestamp;\n            const newData = await activeRequest.fetcher;\n            if (shouldStartRequest) {\n                setTimeout(deleteActiveRequest, dedupingInterval);\n            }\n            activeRequest = manager.getRequest();\n            if (!activeRequest || activeRequest.timestamp !== startAt) return;\n            const activeMutation = manager.getMutation();\n            if (activeMutation && (activeMutation.startTime > startAt || activeMutation.endTime > startAt || activeMutation.endTime === 0)) {\n                return;\n            }\n            manager.setCache(newData);\n        } catch (err) {\n            deleteActiveRequest();\n            const isVisible = document.visibilityState === \"visible\";\n            const isOnline = isOnlineRef.current;\n            if (shouldStartRequest && isVisible && isOnline) handleError();\n            manager.setError(err);\n        }\n        return;\n    }, [\n        manager,\n        fetcher,\n        dedupingInterval,\n        errorRetryInterval,\n        errorRetryCount\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        function handleIsOnline() {\n            isOnlineRef.current = true;\n        }\n        function handleIsOffline() {\n            isOnlineRef.current = false;\n        }\n        window.addEventListener(\"online\", handleIsOnline);\n        window.addEventListener(\"offline\", handleIsOffline);\n        return ()=>{\n            window.removeEventListener(\"online\", handleIsOnline);\n            window.removeEventListener(\"offline\", handleIsOffline);\n        };\n    }, []);\n    const revalidateCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ shouldDedupe })=>{\n        return _revalidateCache({\n            shouldDedupe,\n            retryCount: 0\n        });\n    }, [\n        _revalidateCache\n    ]);\n    return revalidateCache;\n}\nfunction useMutate(manager, revalidateCache) {\n    const mutate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (data, options)=>{\n        const beforeMutationTimestamp = ++timestamp;\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: 0\n        });\n        const currentCache = manager.getCache();\n        manager.setCache(options.optimisticData);\n        let error;\n        try {\n            await data;\n        } catch (err) {\n            error = err;\n        }\n        const activeMutation = manager.getMutation();\n        if (activeMutation && beforeMutationTimestamp !== activeMutation.startTime) {\n            if (error) throw error;\n            return;\n        }\n        if (error) {\n            manager.setCache(currentCache);\n        }\n        manager.setMutation({\n            startTime: beforeMutationTimestamp,\n            endTime: ++timestamp\n        });\n        manager.setRequest(void 0);\n        void revalidateCache({\n            shouldDedupe: false\n        });\n        if (error) throw error;\n    }, [\n        manager,\n        revalidateCache\n    ]);\n    return mutate;\n}\n// src/comments/CommentsRoom.tsx\nvar THREAD_ID_PREFIX = \"th\";\nvar COMMENT_ID_PREFIX = \"cm\";\nvar POLLING_INTERVAL_REALTIME = 3e4;\nvar POLLING_INTERVAL = 5e3;\nfunction createCommentsRoom(errorEventSource) {\n    const store = createClientCacheStore();\n    const FetcherContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    const RoomManagerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n    function getThreads(manager) {\n        const threads = manager.getCache();\n        if (!threads) {\n            throw new Error(\"Cannot update threads or comments before they are loaded.\");\n        }\n        return threads;\n    }\n    function CommentsRoomProvider({ room, children }) {\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n            return createRoomRevalidationManager(room.id, {\n                getCache: store.getThreads,\n                setCache: store.setThreads\n            });\n        }, [\n            room.id\n        ]);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(async ()=>{\n            const options = manager.getRevalidationManagers().filter(([key])=>manager.getReferenceCount(key) > 0).map(([_, manager2])=>manager2.getOptions());\n            const responses = await Promise.all(options.map(async (option)=>{\n                return await room.getThreads(option);\n            }));\n            const threads = Array.from(new Map(responses.flat().map((thread)=>[\n                    thread.id,\n                    thread\n                ])).values());\n            return threads;\n        }, [\n            room,\n            manager\n        ]);\n        const revalidateCache = useRevalidateCache(manager, fetcher);\n        const status = useSyncExternalStore3(room.events.status.subscribe, room.getStatus, room.getStatus);\n        const isOnline = useIsOnline();\n        const isDocumentVisible = useIsDocumentVisible();\n        const refreshInterval = getPollingInterval(isOnline, isDocumentVisible, status === \"connected\");\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            let revalidationTimerId;\n            function scheduleRevalidation() {\n                if (refreshInterval === 0) return;\n                revalidationTimerId = window.setTimeout(()=>{\n                    if (isOnline && isDocumentVisible && !manager.getError() && manager.getTotalReferenceCount() > 0) {\n                        void revalidateCache({\n                            shouldDedupe: true\n                        }).then(scheduleRevalidation);\n                        return;\n                    }\n                    scheduleRevalidation();\n                }, refreshInterval);\n            }\n            scheduleRevalidation();\n            return ()=>{\n                window.clearTimeout(revalidationTimerId);\n            };\n        }, [\n            revalidateCache,\n            refreshInterval,\n            isOnline,\n            isDocumentVisible,\n            manager\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleIsOnline() {\n                if (isDocumentVisible) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            window.addEventListener(\"online\", handleIsOnline);\n            return ()=>{\n                window.removeEventListener(\"online\", handleIsOnline);\n            };\n        }, [\n            revalidateCache,\n            isDocumentVisible\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            function handleVisibilityChange() {\n                const isVisible = document.visibilityState === \"visible\";\n                if (isVisible && isOnline) {\n                    void revalidateCache({\n                        shouldDedupe: true\n                    });\n                }\n            }\n            document.addEventListener(\"visibilitychange\", handleVisibilityChange);\n            return ()=>{\n                document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n            };\n        }, [\n            revalidateCache,\n            isOnline\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            const unsubscribe = room.events.comments.subscribe(()=>{\n                void revalidateCache({\n                    shouldDedupe: false\n                });\n            });\n            return ()=>{\n                unsubscribe();\n            };\n        }, [\n            room,\n            revalidateCache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FetcherContext.Provider, {\n            value: fetcher\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomManagerContext.Provider, {\n            value: manager\n        }, children));\n    }\n    function useRoomManager() {\n        const manager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RoomManagerContext);\n        if (manager === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return manager;\n    }\n    function getUseThreadsRevalidationManager(options, roomManager) {\n        const key = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options);\n        const revalidationManager = roomManager.getRevalidationManager(key);\n        if (!revalidationManager) {\n            const useThreadsRevalidationManager = createUseThreadsRevalidationManager(options, roomManager);\n            roomManager.setRevalidationmanager(key, useThreadsRevalidationManager);\n            return useThreadsRevalidationManager;\n        }\n        return revalidationManager;\n    }\n    function useThreadsFetcher() {\n        const fetcher = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FetcherContext);\n        if (fetcher === null) {\n            throw new Error(\"CommentsRoomProvider is missing from the React tree.\");\n        }\n        return fetcher;\n    }\n    function useThreads(room, options = {\n        query: {\n            metadata: {}\n        }\n    }) {\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        return cache;\n    }\n    function useThreadsSuspense(room, options = {\n        query: {\n            metadata: {}\n        }\n    }) {\n        const key = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)(options), [\n            options\n        ]);\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        const fetcher = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            return room.getThreads(options);\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps -- The missing dependency is `options` but `key` and `normalized` are analogous, so we only include `key` as dependency. This helps minimize the number of re-renders as `options` can change on each render\n        [\n            key,\n            room\n        ]);\n        const revalidateCache = useRevalidateCache(useThreadsRevalidationManager, fetcher);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            void revalidateCache({\n                shouldDedupe: true\n            });\n        }, [\n            revalidateCache\n        ]);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n            manager.incrementReferenceCount(key);\n            return ()=>{\n                manager.decrementReferenceCount(key);\n            };\n        }, [\n            manager,\n            key\n        ]);\n        const cache = _useThreads(room, options);\n        if (cache.error) {\n            throw cache.error;\n        }\n        if (cache.isLoading || !cache.threads) {\n            throw revalidateCache({\n                shouldDedupe: true\n            });\n        }\n        return {\n            isLoading: false,\n            threads: cache.threads,\n            error: cache.error\n        };\n    }\n    function _useThreads(room, options) {\n        const manager = useRoomManager();\n        const useThreadsRevalidationManager = getUseThreadsRevalidationManager(options, manager);\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(store.subscribe, ()=>store.getThreads(), ()=>store.getThreads(), (state)=>{\n            const isLoading = useThreadsRevalidationManager.getIsLoading();\n            if (isLoading) {\n                return {\n                    isLoading: true\n                };\n            }\n            const options2 = useThreadsRevalidationManager.getOptions();\n            const error = useThreadsRevalidationManager.getError();\n            const filtered = state.filter((thread)=>{\n                if (thread.roomId !== room.id) return false;\n                const query = options2.query ?? {};\n                for(const key in query.metadata){\n                    if (thread.metadata[key] !== query.metadata[key]) {\n                        return false;\n                    }\n                }\n                return true;\n            });\n            return {\n                isLoading: false,\n                threads: filtered,\n                error\n            };\n        });\n    }\n    function useEditThreadMetadata(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editThreadMetadata = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const threadId = options.threadId;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    metadata: {\n                        ...thread.metadata,\n                        ...metadata\n                    }\n                } : thread);\n            mutate(room.editThreadMetadata({\n                metadata,\n                threadId\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditThreadMetadataError(error, {\n                    roomId: room.id,\n                    threadId,\n                    metadata\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editThreadMetadata;\n    }\n    function useCreateThread(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((options)=>{\n            const body = options.body;\n            const metadata = \"metadata\" in options ? options.metadata : {};\n            const threads = getThreads(manager);\n            const threadId = createThreadId();\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const newComment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                createdAt: now,\n                type: \"comment\",\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const newThread = {\n                id: threadId,\n                type: \"thread\",\n                createdAt: now,\n                roomId: room.id,\n                metadata,\n                comments: [\n                    newComment\n                ]\n            };\n            mutate(room.createThread({\n                threadId,\n                commentId,\n                body,\n                metadata\n            }), {\n                optimisticData: [\n                    ...threads,\n                    newThread\n                ]\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateThreadError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body,\n                    metadata\n                }));\n            });\n            return newThread;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createThread;\n    }\n    function useCreateComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, body })=>{\n            const threads = getThreads(manager);\n            const commentId = createCommentId();\n            const now = /* @__PURE__ */ new Date();\n            const comment = {\n                id: commentId,\n                threadId,\n                roomId: room.id,\n                type: \"comment\",\n                createdAt: now,\n                userId: getCurrentUserId(room),\n                body,\n                reactions: []\n            };\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: [\n                        ...thread.comments,\n                        comment\n                    ]\n                } : thread);\n            mutate(room.createComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new CreateCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n            return comment;\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    function useEditComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const editComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, body })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                            ...comment,\n                            editedAt: now,\n                            body\n                        } : comment)\n                } : thread);\n            mutate(room.editComment({\n                threadId,\n                commentId,\n                body\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new EditCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    body\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return editComment;\n    }\n    function useDeleteComment(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const deleteComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const newThreads = [];\n            for (const thread of threads){\n                if (thread.id === threadId) {\n                    const newThread = {\n                        ...thread,\n                        comments: thread.comments.map((comment)=>comment.id === commentId ? {\n                                ...comment,\n                                deletedAt: now,\n                                body: void 0\n                            } : comment)\n                    };\n                    if (newThread.comments.some((comment)=>comment.deletedAt === void 0)) {\n                        newThreads.push(newThread);\n                    }\n                } else {\n                    newThreads.push(thread);\n                }\n            }\n            mutate(room.deleteComment({\n                threadId,\n                commentId\n            }), {\n                optimisticData: newThreads\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new DeleteCommentError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return deleteComment;\n    }\n    function useAddReaction(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, emoji })=>{\n            const threads = getThreads(manager);\n            const now = /* @__PURE__ */ new Date();\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        let reactions;\n                        if (comment.reactions.some((reaction)=>reaction.emoji === emoji)) {\n                            reactions = comment.reactions.map((reaction)=>reaction.emoji === emoji ? {\n                                    ...reaction,\n                                    users: [\n                                        ...reaction.users,\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                } : reaction);\n                        } else {\n                            reactions = [\n                                ...comment.reactions,\n                                {\n                                    emoji,\n                                    createdAt: now,\n                                    users: [\n                                        {\n                                            id: userId\n                                        }\n                                    ]\n                                }\n                            ];\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.addReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new AddReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    function useRemoveReaction(room) {\n        const manager = useRoomManager();\n        const fetcher = useThreadsFetcher();\n        const revalidate = useRevalidateCache(manager, fetcher);\n        const mutate = useMutate(manager, revalidate);\n        const createComment = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ threadId, commentId, emoji })=>{\n            const threads = getThreads(manager);\n            const userId = getCurrentUserId(room);\n            const optimisticData = threads.map((thread)=>thread.id === threadId ? {\n                    ...thread,\n                    comments: thread.comments.map((comment)=>{\n                        if (comment.id !== commentId) {\n                            return comment;\n                        }\n                        const reactionIndex = comment.reactions.findIndex((reaction)=>reaction.emoji === emoji);\n                        let reactions = comment.reactions;\n                        if (reactionIndex >= 0 && comment.reactions[reactionIndex].users.some((user)=>user.id === userId)) {\n                            if (comment.reactions[reactionIndex].users.length <= 1) {\n                                reactions = [\n                                    ...comment.reactions\n                                ];\n                                reactions.splice(reactionIndex, 1);\n                            } else {\n                                reactions[reactionIndex] = {\n                                    ...reactions[reactionIndex],\n                                    users: reactions[reactionIndex].users.filter((user)=>user.id !== userId)\n                                };\n                            }\n                        }\n                        return {\n                            ...comment,\n                            reactions\n                        };\n                    })\n                } : thread);\n            mutate(room.removeReaction({\n                threadId,\n                commentId,\n                emoji\n            }), {\n                optimisticData\n            }).catch((err)=>{\n                if (!(err instanceof _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.CommentsApiError)) {\n                    throw err;\n                }\n                const error = handleCommentsApiError(err);\n                errorEventSource.notify(new RemoveReactionError(error, {\n                    roomId: room.id,\n                    threadId,\n                    commentId,\n                    emoji\n                }));\n            });\n        }, [\n            room,\n            mutate,\n            manager\n        ]);\n        return createComment;\n    }\n    return {\n        CommentsRoomProvider,\n        useThreads,\n        useThreadsSuspense,\n        useEditThreadMetadata,\n        useCreateThread,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction\n    };\n}\nfunction createOptimisticId(prefix) {\n    return `${prefix}_${(0,nanoid__WEBPACK_IMPORTED_MODULE_4__.nanoid)()}`;\n}\nfunction createThreadId() {\n    return createOptimisticId(THREAD_ID_PREFIX);\n}\nfunction createCommentId() {\n    return createOptimisticId(COMMENT_ID_PREFIX);\n}\nfunction getCurrentUserId(room) {\n    const self = room.getSelf();\n    if (self === null || self.id === void 0) {\n        return \"anonymous\";\n    } else {\n        return self.id;\n    }\n}\nfunction handleCommentsApiError(err) {\n    const message = `Request failed with status ${err.status}: ${err.message}`;\n    if (err.details?.error === \"FORBIDDEN\") {\n        const detailedMessage = [\n            message,\n            err.details.suggestion,\n            err.details.docs\n        ].filter(Boolean).join(\"\\n\");\n        console.error(detailedMessage);\n    }\n    return new Error(message);\n}\nfunction createRoomRevalidationManager(roomId, { getCache, setCache }) {\n    let request;\n    let error;\n    let mutation;\n    const revalidationManagerByOptions = /* @__PURE__ */ new Map();\n    const referenceCountByOptions = /* @__PURE__ */ new Map();\n    return {\n        // Cache\n        getCache () {\n            const threads = getCache();\n            const filtered = threads.filter((thread)=>thread.roomId === roomId);\n            return filtered;\n        },\n        setCache (value) {\n            for (const key of revalidationManagerByOptions.keys()){\n                if (referenceCountByOptions.get(key) === 0) {\n                    revalidationManagerByOptions.delete(key);\n                    referenceCountByOptions.delete(key);\n                }\n            }\n            const sorted = value.sort((a, b)=>new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n            const threads = getCache();\n            const newThreads = threads.filter((thread)=>thread.roomId !== roomId).concat(sorted);\n            setCache(newThreads);\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n        },\n        // Mutation\n        getMutation () {\n            return mutation;\n        },\n        setMutation (info) {\n            mutation = info;\n        },\n        getRevalidationManagers () {\n            return Array.from(revalidationManagerByOptions.entries());\n        },\n        getRevalidationManager (key) {\n            return revalidationManagerByOptions.get(key);\n        },\n        setRevalidationmanager (key, manager) {\n            revalidationManagerByOptions.set(key, manager);\n        },\n        getTotalReferenceCount () {\n            return Array.from(referenceCountByOptions.values()).reduce((acc, count)=>acc + count, 0);\n        },\n        incrementReferenceCount (key) {\n            const count = referenceCountByOptions.get(key) ?? 0;\n            referenceCountByOptions.set(key, count + 1);\n        },\n        decrementReferenceCount (key) {\n            const count = referenceCountByOptions.get(key) ?? 0;\n            referenceCountByOptions.set(key, count - 1);\n        },\n        getReferenceCount (key) {\n            return referenceCountByOptions.get(key) ?? 0;\n        }\n    };\n}\nfunction createClientCacheStore() {\n    let threads = [];\n    const threadsEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    return {\n        getThreads () {\n            return threads;\n        },\n        setThreads (value) {\n            threads = value;\n            threadsEventSource.notify(threads);\n        },\n        subscribe (callback) {\n            return threadsEventSource.subscribe(callback);\n        }\n    };\n}\nfunction createUseThreadsRevalidationManager(options, manager) {\n    let isLoading = true;\n    let request;\n    let error;\n    return {\n        // Cache\n        getCache () {\n            return void 0;\n        },\n        setCache (value) {\n            const cache = new Map((manager.getCache() ?? []).map((thread)=>[\n                    thread.id,\n                    thread\n                ]));\n            for (const thread of value){\n                cache.set(thread.id, thread);\n            }\n            manager.setCache(Array.from(cache.values()));\n            isLoading = false;\n        },\n        // Request\n        getRequest () {\n            return request;\n        },\n        setRequest (value) {\n            request = value;\n        },\n        // Error\n        getError () {\n            return error;\n        },\n        setError (err) {\n            error = err;\n            isLoading = false;\n            const cache = manager.getCache();\n            manager.setCache(cache);\n        },\n        // Mutation\n        getMutation () {\n            return void 0;\n        },\n        setMutation (_) {\n            return;\n        },\n        getOptions () {\n            return options;\n        },\n        getIsLoading () {\n            return isLoading;\n        },\n        setIsLoading (value) {\n            isLoading = value;\n        }\n    };\n}\nfunction getPollingInterval(isBrowserOnline, isDocumentVisible, isRoomConnected) {\n    if (!isBrowserOnline || !isDocumentVisible) return;\n    if (isRoomConnected) return POLLING_INTERVAL_REALTIME;\n    return POLLING_INTERVAL;\n}\n// src/comments/lib/use-debounce.ts\n\nvar DEFAULT_DELAY = 500;\nfunction useDebounce(value, delay = DEFAULT_DELAY) {\n    const timeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const [debouncedValue, setDebouncedValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (delay === false) {\n            return;\n        }\n        if (timeout.current === void 0) {\n            setDebouncedValue(value);\n        }\n        timeout.current = window.setTimeout(()=>{\n            setDebouncedValue(value);\n            timeout.current = void 0;\n        }, delay);\n        return ()=>{\n            window.clearTimeout(timeout.current);\n        };\n    }, [\n        value,\n        delay\n    ]);\n    return debouncedValue;\n}\n// src/lib/use-async-cache.ts\n\n\n// src/lib/use-initial.ts\n\nfunction useInitial(value) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(value)[0];\n}\n// src/lib/use-async-cache.ts\nvar INITIAL_ASYNC_STATE = {\n    isLoading: false,\n    data: void 0,\n    error: void 0\n};\nvar noop = ()=>{};\nfunction useAsyncCache(cache, key, options) {\n    const frozenOptions = useInitial(options);\n    const cacheItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (key === null || !cache) {\n            return null;\n        }\n        const cacheItem2 = cache.create(key);\n        void cacheItem2.get();\n        return cacheItem2;\n    }, [\n        cache,\n        key\n    ]);\n    const subscribe2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((callback)=>cacheItem?.subscribe(callback) ?? noop, [\n        cacheItem\n    ]);\n    const getState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>cacheItem?.getState() ?? INITIAL_ASYNC_STATE, [\n        cacheItem\n    ]);\n    const revalidate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>cacheItem?.revalidate(), [\n        cacheItem\n    ]);\n    const state = (0,use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_2__.useSyncExternalStore)(subscribe2, getState, getState);\n    const previousData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    let data = state.data;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        previousData.current = {\n            key,\n            data: state.data\n        };\n    }, [\n        key,\n        state.data\n    ]);\n    if (!cacheItem) {\n        return {\n            isLoading: false,\n            data: void 0,\n            error: void 0,\n            getState,\n            revalidate\n        };\n    }\n    if (frozenOptions?.suspense) {\n        const error = getState().error;\n        if (error) {\n            throw error;\n        } else if (getState().isLoading) {\n            throw new Promise((resolve)=>{\n                cacheItem.subscribeOnce((state2)=>{\n                    if (!state2.isLoading) {\n                        resolve();\n                    }\n                });\n            });\n        }\n    }\n    if (state.isLoading && frozenOptions?.keepPreviousDataWhileLoading && typeof state.data === \"undefined\" && previousData.current?.key !== key && typeof previousData.current?.data !== \"undefined\") {\n        data = previousData.current.data;\n    }\n    return {\n        isLoading: state.isLoading,\n        data,\n        error: state.error,\n        getState,\n        revalidate\n    };\n}\n// src/lib/use-latest.ts\n\nfunction useLatest(value) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(value);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = value;\n    }, [\n        value\n    ]);\n    return ref;\n}\n// src/lib/use-rerender.ts\n\nfunction useRerender() {\n    const [, update] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(// This implementation works by incrementing a hidden counter value that is\n    // never consumed. Simply incrementing the counter changes the component's\n    // state and, thus, trigger a re-render.\n    (x)=>x + 1, 0);\n    return update;\n}\n// src/factory.tsx\nvar noop2 = ()=>{};\nvar identity = (x)=>x;\nvar missing_unstable_batchedUpdates = (reactVersion, roomId)=>`We noticed you\\u2019re using React ${reactVersion}. Please pass unstable_batchedUpdates at the RoomProvider level until you\\u2019re ready to upgrade to React 18:\n\n    import { unstable_batchedUpdates } from \"react-dom\";  // or \"react-native\"\n\n    <RoomProvider id=${JSON.stringify(roomId)} ... unstable_batchedUpdates={unstable_batchedUpdates}>\n      ...\n    </RoomProvider>\n\nWhy? Please see https://liveblocks.io/docs/platform/troubleshooting#stale-props-zombie-child for more information`;\nvar superfluous_unstable_batchedUpdates = \"You don’t need to pass unstable_batchedUpdates to RoomProvider anymore, since you’re on React 18+ already.\";\nfunction useSyncExternalStore3(s, gs, gss) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(s, gs, gss, identity);\n}\nvar STABLE_EMPTY_LIST = Object.freeze([]);\nfunction alwaysEmptyList() {\n    return STABLE_EMPTY_LIST;\n}\nfunction alwaysNull() {\n    return null;\n}\nfunction makeMutationContext(room) {\n    const errmsg = \"This mutation cannot be used until connected to the Liveblocks room\";\n    return {\n        get storage () {\n            const mutableRoot = room.getStorageSnapshot();\n            if (mutableRoot === null) {\n                throw new Error(errmsg);\n            }\n            return mutableRoot;\n        },\n        get self () {\n            const self = room.getSelf();\n            if (self === null) {\n                throw new Error(errmsg);\n            }\n            return self;\n        },\n        get others () {\n            const others = room.getOthers();\n            if (room.getSelf() === null) {\n                throw new Error(errmsg);\n            }\n            return others;\n        },\n        setMyPresence: room.updatePresence\n    };\n}\nvar hasWarnedIfNoResolveUsers = false;\nfunction warnIfNoResolveUsers(usersCache) {\n    if (!hasWarnedIfNoResolveUsers && !usersCache && \"development\" !== \"production\") {\n        console.warn(\"Set the resolveUsers option in createRoomContext to specify user info.\");\n        hasWarnedIfNoResolveUsers = true;\n    }\n}\nvar ContextBundle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction useRoomContextBundle() {\n    const bundle = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ContextBundle);\n    if (bundle === null) {\n        throw new Error(\"RoomProvider is missing from the React tree.\");\n    }\n    return bundle;\n}\nfunction createRoomContext(client, options) {\n    const RoomContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n    const commentsErrorEventSource = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.makeEventSource)();\n    const { CommentsRoomProvider, ...commentsRoom } = createCommentsRoom(commentsErrorEventSource);\n    function RoomProviderOuter(props) {\n        const [cache] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>/* @__PURE__ */ new Map());\n        const stableEnterRoom = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((roomId, options2)=>{\n            const cached = cache.get(roomId);\n            if (cached) return cached;\n            const rv = client.enterRoom(roomId, options2);\n            const origLeave = rv.leave;\n            rv.leave = ()=>{\n                origLeave();\n                cache.delete(roomId);\n            };\n            cache.set(roomId, rv);\n            return rv;\n        }, [\n            cache\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomProviderInner, {\n            ...props,\n            stableEnterRoom\n        });\n    }\n    function RoomProviderInner(props) {\n        const { id: roomId, stableEnterRoom } = props;\n        if (true) {\n            if (!roomId) {\n                throw new Error(\"RoomProvider id property is required. For more information: https://liveblocks.io/docs/errors/liveblocks-react/RoomProvider-id-property-is-required\");\n            }\n            if (typeof roomId !== \"string\") {\n                throw new Error(\"RoomProvider id property should be a string.\");\n            }\n            const majorReactVersion = parseInt(react__WEBPACK_IMPORTED_MODULE_0__.version) || 1;\n            const oldReactVersion = majorReactVersion < 18;\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.errorIf)(oldReactVersion && props.unstable_batchedUpdates === void 0, missing_unstable_batchedUpdates(majorReactVersion, roomId));\n            (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.deprecateIf)(!oldReactVersion && props.unstable_batchedUpdates !== void 0, superfluous_unstable_batchedUpdates);\n        }\n        const frozenProps = useInitial({\n            initialPresence: props.initialPresence,\n            initialStorage: props.initialStorage,\n            unstable_batchedUpdates: props.unstable_batchedUpdates,\n            autoConnect: props.autoConnect ?? props.shouldInitiallyConnect ?? \"undefined\" !== \"undefined\"\n        });\n        const [{ room }, setRoomLeavePair] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>stableEnterRoom(roomId, {\n                ...frozenProps,\n                autoConnect: false\n            }));\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const pair = stableEnterRoom(roomId, frozenProps);\n            setRoomLeavePair(pair);\n            const { room: room2, leave } = pair;\n            if (frozenProps.autoConnect) {\n                room2.connect();\n            }\n            return ()=>{\n                leave();\n            };\n        }, [\n            roomId,\n            frozenProps,\n            stableEnterRoom\n        ]);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, {\n            value: room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CommentsRoomProvider, {\n            room\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContextBundle.Provider, {\n            value: internalBundle\n        }, props.children)));\n    }\n    function connectionIdSelector(others) {\n        return others.map((user)=>user.connectionId);\n    }\n    function useRoom() {\n        const room = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n        if (room === null) {\n            throw new Error(\"RoomProvider is missing from the React tree.\");\n        }\n        return room;\n    }\n    function useStatus() {\n        const room = useRoom();\n        const subscribe2 = room.events.status.subscribe;\n        const getSnapshot2 = room.getStatus;\n        const getServerSnapshot = room.getStatus;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    function useMyPresence() {\n        const room = useRoom();\n        const subscribe2 = room.events.myPresence.subscribe;\n        const getSnapshot2 = room.getPresence;\n        const presence = useSyncExternalStore3(subscribe2, getSnapshot2, getSnapshot2);\n        const setPresence = room.updatePresence;\n        return [\n            presence,\n            setPresence\n        ];\n    }\n    function useUpdateMyPresence() {\n        return useRoom().updatePresence;\n    }\n    function useOthers(selector, isEqual) {\n        const room = useRoom();\n        const subscribe2 = room.events.others.subscribe;\n        const getSnapshot2 = room.getOthers;\n        const getServerSnapshot = alwaysEmptyList;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, selector ?? identity, isEqual);\n    }\n    function useOthersConnectionIds() {\n        return useOthers(connectionIdSelector, _liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.shallow);\n    }\n    function useOthersMapped(itemSelector, itemIsEqual) {\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>others.map((other)=>[\n                    other.connectionId,\n                    itemSelector(other)\n                ]), [\n            itemSelector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((a, b)=>{\n            const eq = itemIsEqual ?? Object.is;\n            return a.length === b.length && a.every((atuple, index)=>{\n                const btuple = b[index];\n                return atuple[0] === btuple[0] && eq(atuple[1], btuple[1]);\n            });\n        }, [\n            itemIsEqual\n        ]);\n        return useOthers(wrappedSelector, wrappedIsEqual);\n    }\n    const NOT_FOUND = Symbol();\n    function useOther(connectionId, selector, isEqual) {\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((others)=>{\n            const other2 = others.find((other3)=>other3.connectionId === connectionId);\n            return other2 !== void 0 ? selector(other2) : NOT_FOUND;\n        }, [\n            connectionId,\n            selector\n        ]);\n        const wrappedIsEqual = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((prev, curr)=>{\n            if (prev === NOT_FOUND || curr === NOT_FOUND) {\n                return prev === curr;\n            }\n            const eq = isEqual ?? Object.is;\n            return eq(prev, curr);\n        }, [\n            isEqual\n        ]);\n        const other = useOthers(wrappedSelector, wrappedIsEqual);\n        if (other === NOT_FOUND) {\n            throw new Error(`No such other user with connection id ${connectionId} exists`);\n        }\n        return other;\n    }\n    function useBroadcastEvent() {\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event, options2 = {\n            shouldQueueEventIfNotReady: false\n        })=>{\n            room.broadcastEvent(event, options2);\n        }, [\n            room\n        ]);\n    }\n    function useOthersListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.others.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useLostConnectionListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.lostConnection.subscribe((event)=>savedCallback.current(event)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useErrorListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>room.events.error.subscribe((e)=>savedCallback.current(e)), [\n            room,\n            savedCallback\n        ]);\n    }\n    function useEventListener(callback) {\n        const room = useRoom();\n        const savedCallback = useLatest(callback);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            const listener = (eventData)=>{\n                savedCallback.current(eventData);\n            };\n            return room.events.customEvent.subscribe(listener);\n        }, [\n            room,\n            savedCallback\n        ]);\n    }\n    function useSelf(maybeSelector, isEqual) {\n        const room = useRoom();\n        const subscribe2 = room.events.self.subscribe;\n        const getSnapshot2 = room.getSelf;\n        const selector = maybeSelector ?? identity;\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((me)=>me !== null ? selector(me) : null, [\n            selector\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    function useMutableStorageRoot() {\n        const room = useRoom();\n        const subscribe2 = room.events.storageDidLoad.subscribeOnce;\n        const getSnapshot2 = room.getStorageSnapshot;\n        const getServerSnapshot = alwaysNull;\n        return useSyncExternalStore3(subscribe2, getSnapshot2, getServerSnapshot);\n    }\n    function useStorageRoot() {\n        return [\n            useMutableStorageRoot()\n        ];\n    }\n    function useHistory() {\n        return useRoom().history;\n    }\n    function useUndo() {\n        return useHistory().undo;\n    }\n    function useRedo() {\n        return useHistory().redo;\n    }\n    function useCanUndo() {\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canUndo = room.history.canUndo;\n        return useSyncExternalStore3(subscribe2, canUndo, canUndo);\n    }\n    function useCanRedo() {\n        const room = useRoom();\n        const subscribe2 = room.events.history.subscribe;\n        const canRedo = room.history.canRedo;\n        return useSyncExternalStore3(subscribe2, canRedo, canRedo);\n    }\n    function useBatch() {\n        return useRoom().batch;\n    }\n    function useLegacyKey(key) {\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const rerender = useRerender();\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            if (rootOrNull === null) {\n                return;\n            }\n            const root = rootOrNull;\n            let unsubCurr;\n            let curr = root.get(key);\n            function subscribeToCurr() {\n                unsubCurr = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.isLiveNode)(curr) ? room.subscribe(curr, rerender) : void 0;\n            }\n            function onRootChange() {\n                const newValue = root.get(key);\n                if (newValue !== curr) {\n                    unsubCurr?.();\n                    curr = newValue;\n                    subscribeToCurr();\n                    rerender();\n                }\n            }\n            subscribeToCurr();\n            rerender();\n            const unsubscribeRoot = room.subscribe(root, onRootChange);\n            return ()=>{\n                unsubscribeRoot();\n                unsubCurr?.();\n            };\n        }, [\n            rootOrNull,\n            room,\n            key,\n            rerender\n        ]);\n        if (rootOrNull === null) {\n            return null;\n        } else {\n            return rootOrNull.get(key);\n        }\n    }\n    function useStorage(selector, isEqual) {\n        const room = useRoom();\n        const rootOrNull = useMutableStorageRoot();\n        const wrappedSelector = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootOrNull2)=>rootOrNull2 !== null ? selector(rootOrNull2) : null, [\n            selector\n        ]);\n        const subscribe2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((onStoreChange)=>rootOrNull !== null ? room.subscribe(rootOrNull, onStoreChange, {\n                isDeep: true\n            }) : noop2, [\n            room,\n            rootOrNull\n        ]);\n        const getSnapshot2 = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n            if (rootOrNull === null) {\n                return null;\n            } else {\n                const root = rootOrNull;\n                const imm = root.toImmutable();\n                return imm;\n            }\n        }, [\n            rootOrNull\n        ]);\n        const getServerSnapshot = alwaysNull;\n        return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_1__.useSyncExternalStoreWithSelector)(subscribe2, getSnapshot2, getServerSnapshot, wrappedSelector, isEqual);\n    }\n    function ensureNotServerSide() {\n        if (true) {\n            throw new Error(\"You cannot use the Suspense version of this hook on the server side. Make sure to only call them on the client side.\\nFor tips, see https://liveblocks.io/docs/api-reference/liveblocks-react#suspense-avoid-ssr\");\n        }\n    }\n    function useSuspendUntilStorageLoaded() {\n        const room = useRoom();\n        if (room.getStorageSnapshot() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.storageDidLoad.subscribeOnce(()=>res());\n        });\n    }\n    function useSuspendUntilPresenceLoaded() {\n        const room = useRoom();\n        if (room.getSelf() !== null) {\n            return;\n        }\n        ensureNotServerSide();\n        throw new Promise((res)=>{\n            room.events.self.subscribeOnce(()=>res());\n            room.events.status.subscribeOnce(()=>res());\n        });\n    }\n    function useMutation(callback, deps) {\n        const room = useRoom();\n        return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n            return (...args)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                room.batch(()=>// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    callback(makeMutationContext(room), ...args));\n        }, // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            room,\n            ...deps\n        ]);\n    }\n    function useStorageSuspense(selector, isEqual) {\n        useSuspendUntilStorageLoaded();\n        return useStorage(selector, isEqual);\n    }\n    function useSelfSuspense(selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useSelf(selector, isEqual);\n    }\n    function useOthersSuspense(selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOthers(selector, isEqual);\n    }\n    function useOthersConnectionIdsSuspense() {\n        useSuspendUntilPresenceLoaded();\n        return useOthersConnectionIds();\n    }\n    function useOthersMappedSuspense(itemSelector, itemIsEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOthersMapped(itemSelector, itemIsEqual);\n    }\n    function useOtherSuspense(connectionId, selector, isEqual) {\n        useSuspendUntilPresenceLoaded();\n        return useOther(connectionId, selector, isEqual);\n    }\n    function useLegacyKeySuspense(key) {\n        useSuspendUntilStorageLoaded();\n        return useLegacyKey(key);\n    }\n    function useThreads(options2) {\n        const room = useRoom();\n        return commentsRoom.useThreads(room, options2);\n    }\n    function useThreadsSuspense(options2) {\n        const room = useRoom();\n        return commentsRoom.useThreadsSuspense(room, options2);\n    }\n    function useCreateThread() {\n        const room = useRoom();\n        return commentsRoom.useCreateThread(room);\n    }\n    function useEditThreadMetadata() {\n        const room = useRoom();\n        return commentsRoom.useEditThreadMetadata(room);\n    }\n    function useAddReaction() {\n        const room = useRoom();\n        return commentsRoom.useAddReaction(room);\n    }\n    function useRemoveReaction() {\n        const room = useRoom();\n        return commentsRoom.useRemoveReaction(room);\n    }\n    function useCreateComment() {\n        const room = useRoom();\n        return commentsRoom.useCreateComment(room);\n    }\n    function useEditComment() {\n        const room = useRoom();\n        return commentsRoom.useEditComment(room);\n    }\n    function useDeleteComment() {\n        const room = useRoom();\n        return commentsRoom.useDeleteComment(room);\n    }\n    const { resolveUsers, resolveMentionSuggestions } = options ?? {};\n    const usersCache = resolveUsers ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(async (stringifiedOptions)=>{\n        const users = await resolveUsers(JSON.parse(stringifiedOptions));\n        return users?.[0];\n    }) : void 0;\n    function useUser(userId) {\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey);\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        if (state.isLoading) {\n            return {\n                isLoading: true\n            };\n        } else {\n            return {\n                user: state.data,\n                error: state.error,\n                isLoading: false\n            };\n        }\n    }\n    function useUserSuspense(userId) {\n        const room = useRoom();\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                userIds: [\n                    userId\n                ],\n                roomId: room.id\n            }), [\n            userId,\n            room.id\n        ]);\n        const state = useAsyncCache(usersCache, resolverKey, {\n            suspense: true\n        });\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>warnIfNoResolveUsers(usersCache), []);\n        return {\n            user: state.data,\n            isLoading: false\n        };\n    }\n    const mentionSuggestionsCache = (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.createAsyncCache)(resolveMentionSuggestions ? (stringifiedOptions)=>{\n        return resolveMentionSuggestions(JSON.parse(stringifiedOptions));\n    } : ()=>Promise.resolve([]));\n    function useMentionSuggestions(search) {\n        const room = useRoom();\n        const debouncedSearch = useDebounce(search, 500);\n        const resolverKey = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>debouncedSearch !== void 0 ? (0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.stringify)({\n                text: debouncedSearch,\n                roomId: room.id\n            }) : null, [\n            debouncedSearch,\n            room.id\n        ]);\n        const { data } = useAsyncCache(mentionSuggestionsCache, resolverKey, {\n            keepPreviousDataWhileLoading: true\n        });\n        return data;\n    }\n    const bundle = {\n        RoomContext,\n        RoomProvider: RoomProviderOuter,\n        useRoom,\n        useStatus,\n        useBatch,\n        useBroadcastEvent,\n        useOthersListener,\n        useLostConnectionListener,\n        useErrorListener,\n        useEventListener,\n        useHistory,\n        useUndo,\n        useRedo,\n        useCanRedo,\n        useCanUndo,\n        // These are just aliases. The passed-in key will define their return values.\n        useList: useLegacyKey,\n        useMap: useLegacyKey,\n        useObject: useLegacyKey,\n        useStorageRoot,\n        useStorage,\n        useSelf,\n        useMyPresence,\n        useUpdateMyPresence,\n        useOthers,\n        useOthersMapped,\n        useOthersConnectionIds,\n        useOther,\n        useMutation,\n        useThreads,\n        useUser,\n        useCreateThread,\n        useEditThreadMetadata,\n        useCreateComment,\n        useEditComment,\n        useDeleteComment,\n        useAddReaction,\n        useRemoveReaction,\n        suspense: {\n            RoomContext,\n            RoomProvider: RoomProviderOuter,\n            useRoom,\n            useStatus,\n            useBatch,\n            useBroadcastEvent,\n            useOthersListener,\n            useLostConnectionListener,\n            useErrorListener,\n            useEventListener,\n            useHistory,\n            useUndo,\n            useRedo,\n            useCanRedo,\n            useCanUndo,\n            // Legacy hooks\n            useList: useLegacyKeySuspense,\n            useMap: useLegacyKeySuspense,\n            useObject: useLegacyKeySuspense,\n            useStorageRoot,\n            useStorage: useStorageSuspense,\n            useSelf: useSelfSuspense,\n            useMyPresence,\n            useUpdateMyPresence,\n            useOthers: useOthersSuspense,\n            useOthersMapped: useOthersMappedSuspense,\n            useOthersConnectionIds: useOthersConnectionIdsSuspense,\n            useOther: useOtherSuspense,\n            useMutation,\n            useThreads: useThreadsSuspense,\n            useUser: useUserSuspense,\n            useCreateThread,\n            useEditThreadMetadata,\n            useCreateComment,\n            useEditComment,\n            useDeleteComment,\n            useAddReaction,\n            useRemoveReaction\n        }\n    };\n    const internalBundle = {\n        ...bundle,\n        hasResolveMentionSuggestions: resolveMentionSuggestions !== void 0,\n        useMentionSuggestions\n    };\n    return bundle;\n}\n// src/index.ts\n\n(0,_liveblocks_core__WEBPACK_IMPORTED_MODULE_3__.detectDupes)(PKG_NAME, PKG_VERSION, PKG_FORMAT);\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@liveblocks/react/dist/index.mjs\n");

/***/ })

};
;