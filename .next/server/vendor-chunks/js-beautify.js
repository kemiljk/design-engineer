/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-beautify";
exports.ids = ["vendor-chunks/js-beautify"];
exports.modules = {

/***/ "(rsc)/./node_modules/js-beautify/js/index.js":
/*!**********************************************!*\
  !*** ./node_modules/js-beautify/js/index.js ***!
  \**********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jshint node:true */ /* globals define */ /*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n*/ \n/**\nThe following batches are equivalent:\n\nvar beautify_js = require('js-beautify');\nvar beautify_js = require('js-beautify').js;\nvar beautify_js = require('js-beautify').js_beautify;\n\nvar beautify_css = require('js-beautify').css;\nvar beautify_css = require('js-beautify').css_beautify;\n\nvar beautify_html = require('js-beautify').html;\nvar beautify_html = require('js-beautify').html_beautify;\n\nAll methods returned accept two arguments, the source string and an options object.\n**/ function get_beautify(js_beautify, css_beautify, html_beautify) {\n    // the default is js\n    var beautify = function(src, config) {\n        return js_beautify.js_beautify(src, config);\n    };\n    // short aliases\n    beautify.js = js_beautify.js_beautify;\n    beautify.css = css_beautify.css_beautify;\n    beautify.html = html_beautify.html_beautify;\n    // legacy aliases\n    beautify.js_beautify = js_beautify.js_beautify;\n    beautify.css_beautify = css_beautify.css_beautify;\n    beautify.html_beautify = html_beautify.html_beautify;\n    return beautify;\n}\nif (true) {\n    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n        __webpack_require__(/*! ./lib/beautify */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify.js\"),\n        __webpack_require__(/*! ./lib/beautify-css */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify-css.js\"),\n        __webpack_require__(/*! ./lib/beautify-html */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify-html.js\")\n    ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(js_beautify, css_beautify, html_beautify) {\n        return get_beautify(js_beautify, css_beautify, html_beautify);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvanMtYmVhdXRpZnkvanMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsbUZBQW1CLEdBQ25CLGtCQUFrQixHQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxHQUVBO0FBRUE7Ozs7Ozs7Ozs7Ozs7O0NBY0MsR0FFRCxTQUFTQSxhQUFhQyxXQUFXLEVBQUVDLFlBQVksRUFBRUMsYUFBYTtJQUM1RCxvQkFBb0I7SUFDcEIsSUFBSUMsV0FBVyxTQUFTQyxHQUFHLEVBQUVDLE1BQU07UUFDakMsT0FBT0wsWUFBWUEsV0FBVyxDQUFDSSxLQUFLQztJQUN0QztJQUVBLGdCQUFnQjtJQUNoQkYsU0FBU0csRUFBRSxHQUFHTixZQUFZQSxXQUFXO0lBQ3JDRyxTQUFTSSxHQUFHLEdBQUdOLGFBQWFBLFlBQVk7SUFDeENFLFNBQVNLLElBQUksR0FBR04sY0FBY0EsYUFBYTtJQUUzQyxpQkFBaUI7SUFDakJDLFNBQVNILFdBQVcsR0FBR0EsWUFBWUEsV0FBVztJQUM5Q0csU0FBU0YsWUFBWSxHQUFHQSxhQUFhQSxZQUFZO0lBQ2pERSxTQUFTRCxhQUFhLEdBQUdBLGNBQWNBLGFBQWE7SUFFcEQsT0FBT0M7QUFDVDtBQUVBLElBQUksSUFBMEMsRUFBRTtJQUM5QywwRkFBMEY7SUFDMUZNLGlDQUFPO1FBQ0wsZ0dBQWdCO1FBQ2hCLHdHQUFvQjtRQUNwQiwwR0FBcUI7S0FDdEIsbUNBQUUsU0FBU1QsV0FBVyxFQUFFQyxZQUFZLEVBQUVDLGFBQWE7UUFDbEQsT0FBT0gsYUFBYUMsYUFBYUMsY0FBY0M7SUFDakQsQ0FBQztBQUFBLGtHQUFDO0FBQ0osT0FBTyxFQVVOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzaWduLWVuZ2luZWVyLy4vbm9kZV9tb2R1bGVzL2pzLWJlYXV0aWZ5L2pzL2luZGV4LmpzPzFjYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLypqc2hpbnQgbm9kZTp0cnVlICovXG4vKiBnbG9iYWxzIGRlZmluZSAqL1xuLypcbiAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbiAgQ29weXJpZ2h0IChjKSAyMDA3LTIwMTggRWluYXIgTGllbG1hbmlzLCBMaWFtIE5ld21hbiwgYW5kIGNvbnRyaWJ1dG9ycy5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlc1xuICAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTXG4gIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuICBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gIFNPRlRXQVJFLlxuXG4qL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuVGhlIGZvbGxvd2luZyBiYXRjaGVzIGFyZSBlcXVpdmFsZW50OlxuXG52YXIgYmVhdXRpZnlfanMgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpO1xudmFyIGJlYXV0aWZ5X2pzID0gcmVxdWlyZSgnanMtYmVhdXRpZnknKS5qcztcbnZhciBiZWF1dGlmeV9qcyA9IHJlcXVpcmUoJ2pzLWJlYXV0aWZ5JykuanNfYmVhdXRpZnk7XG5cbnZhciBiZWF1dGlmeV9jc3MgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmNzcztcbnZhciBiZWF1dGlmeV9jc3MgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmNzc19iZWF1dGlmeTtcblxudmFyIGJlYXV0aWZ5X2h0bWwgPSByZXF1aXJlKCdqcy1iZWF1dGlmeScpLmh0bWw7XG52YXIgYmVhdXRpZnlfaHRtbCA9IHJlcXVpcmUoJ2pzLWJlYXV0aWZ5JykuaHRtbF9iZWF1dGlmeTtcblxuQWxsIG1ldGhvZHMgcmV0dXJuZWQgYWNjZXB0IHR3byBhcmd1bWVudHMsIHRoZSBzb3VyY2Ugc3RyaW5nIGFuZCBhbiBvcHRpb25zIG9iamVjdC5cbioqL1xuXG5mdW5jdGlvbiBnZXRfYmVhdXRpZnkoanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSkge1xuICAvLyB0aGUgZGVmYXVsdCBpcyBqc1xuICB2YXIgYmVhdXRpZnkgPSBmdW5jdGlvbihzcmMsIGNvbmZpZykge1xuICAgIHJldHVybiBqc19iZWF1dGlmeS5qc19iZWF1dGlmeShzcmMsIGNvbmZpZyk7XG4gIH07XG5cbiAgLy8gc2hvcnQgYWxpYXNlc1xuICBiZWF1dGlmeS5qcyA9IGpzX2JlYXV0aWZ5LmpzX2JlYXV0aWZ5O1xuICBiZWF1dGlmeS5jc3MgPSBjc3NfYmVhdXRpZnkuY3NzX2JlYXV0aWZ5O1xuICBiZWF1dGlmeS5odG1sID0gaHRtbF9iZWF1dGlmeS5odG1sX2JlYXV0aWZ5O1xuXG4gIC8vIGxlZ2FjeSBhbGlhc2VzXG4gIGJlYXV0aWZ5LmpzX2JlYXV0aWZ5ID0ganNfYmVhdXRpZnkuanNfYmVhdXRpZnk7XG4gIGJlYXV0aWZ5LmNzc19iZWF1dGlmeSA9IGNzc19iZWF1dGlmeS5jc3NfYmVhdXRpZnk7XG4gIGJlYXV0aWZ5Lmh0bWxfYmVhdXRpZnkgPSBodG1sX2JlYXV0aWZ5Lmh0bWxfYmVhdXRpZnk7XG5cbiAgcmV0dXJuIGJlYXV0aWZ5O1xufVxuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgLy8gQWRkIHN1cHBvcnQgZm9yIEFNRCAoIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTUQjZGVmaW5lYW1kLXByb3BlcnR5LSApXG4gIGRlZmluZShbXG4gICAgXCIuL2xpYi9iZWF1dGlmeVwiLFxuICAgIFwiLi9saWIvYmVhdXRpZnktY3NzXCIsXG4gICAgXCIuL2xpYi9iZWF1dGlmeS1odG1sXCJcbiAgXSwgZnVuY3Rpb24oanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSkge1xuICAgIHJldHVybiBnZXRfYmVhdXRpZnkoanNfYmVhdXRpZnksIGNzc19iZWF1dGlmeSwgaHRtbF9iZWF1dGlmeSk7XG4gIH0pO1xufSBlbHNlIHtcbiAgKGZ1bmN0aW9uKG1vZCkge1xuICAgIHZhciBiZWF1dGlmaWVyID0gcmVxdWlyZSgnLi9zcmMvaW5kZXgnKTtcbiAgICBiZWF1dGlmaWVyLmpzX2JlYXV0aWZ5ID0gYmVhdXRpZmllci5qcztcbiAgICBiZWF1dGlmaWVyLmNzc19iZWF1dGlmeSA9IGJlYXV0aWZpZXIuY3NzO1xuICAgIGJlYXV0aWZpZXIuaHRtbF9iZWF1dGlmeSA9IGJlYXV0aWZpZXIuaHRtbDtcblxuICAgIG1vZC5leHBvcnRzID0gZ2V0X2JlYXV0aWZ5KGJlYXV0aWZpZXIsIGJlYXV0aWZpZXIsIGJlYXV0aWZpZXIpO1xuXG4gIH0pKG1vZHVsZSk7XG59Il0sIm5hbWVzIjpbImdldF9iZWF1dGlmeSIsImpzX2JlYXV0aWZ5IiwiY3NzX2JlYXV0aWZ5IiwiaHRtbF9iZWF1dGlmeSIsImJlYXV0aWZ5Iiwic3JjIiwiY29uZmlnIiwianMiLCJjc3MiLCJodG1sIiwiZGVmaW5lIiwiYW1kIiwibW9kIiwiYmVhdXRpZmllciIsInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-beautify/js/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/js-beautify/js/lib/beautify-css.js":
/*!*********************************************************!*\
  !*** ./node_modules/js-beautify/js/lib/beautify-css.js ***!
  \*********************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* AUTO-GENERATED. DO NOT MODIFY. */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n CSS Beautifier\n---------------\n\n    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)\n\n    Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>\n        https://beautifier.io/\n\n    Usage:\n        css_beautify(source_text);\n        css_beautify(source_text, options);\n\n    The options are (default in brackets):\n        indent_size (4)                         — indentation size,\n        indent_char (space)                     — character to indent with,\n        selector_separator_newline (true)       - separate selectors with newline or\n                                                  not (e.g. \"a,\\nbr\" or \"a, br\")\n        end_with_newline (false)                - end with a newline\n        newline_between_rules (true)            - add a new line after every css rule\n        space_around_selector_separator (false) - ensure space around selector separators:\n                                                  '>', '+', '~' (e.g. \"a>b\" -> \"a > b\")\n    e.g\n\n    css_beautify(css_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t',\n      'selector_separator': ' ',\n      'end_with_newline': false,\n      'newline_between_rules': true,\n      'space_around_selector_separator': true\n    });\n*/ // http://www.w3.org/TR/CSS21/syndata.html#tokenization\n// http://www.w3.org/TR/css3-syntax/\n(function() {\n    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_css;\n    /******/ (function() {\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = [\n            ,\n            ,\n            /* 2 */ /***/ function(module) {\n                /*jshint node:true */ /*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function OutputLine(parent) {\n                    this.__parent = parent;\n                    this.__character_count = 0;\n                    // use indent_count as a marker for this.__lines that have preserved indentation\n                    this.__indent_count = -1;\n                    this.__alignment_count = 0;\n                    this.__wrap_point_index = 0;\n                    this.__wrap_point_character_count = 0;\n                    this.__wrap_point_indent_count = -1;\n                    this.__wrap_point_alignment_count = 0;\n                    this.__items = [];\n                }\n                OutputLine.prototype.clone_empty = function() {\n                    var line = new OutputLine(this.__parent);\n                    line.set_indent(this.__indent_count, this.__alignment_count);\n                    return line;\n                };\n                OutputLine.prototype.item = function(index) {\n                    if (index < 0) {\n                        return this.__items[this.__items.length + index];\n                    } else {\n                        return this.__items[index];\n                    }\n                };\n                OutputLine.prototype.has_match = function(pattern) {\n                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){\n                        if (this.__items[lastCheckedOutput].match(pattern)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n                OutputLine.prototype.set_indent = function(indent, alignment) {\n                    if (this.is_empty()) {\n                        this.__indent_count = indent || 0;\n                        this.__alignment_count = alignment || 0;\n                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n                    }\n                };\n                OutputLine.prototype._set_wrap_point = function() {\n                    if (this.__parent.wrap_line_length) {\n                        this.__wrap_point_index = this.__items.length;\n                        this.__wrap_point_character_count = this.__character_count;\n                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n                    }\n                };\n                OutputLine.prototype._should_wrap = function() {\n                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n                };\n                OutputLine.prototype._allow_wrap = function() {\n                    if (this._should_wrap()) {\n                        this.__parent.add_new_line();\n                        var next = this.__parent.current_line;\n                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n                        next.__items = this.__items.slice(this.__wrap_point_index);\n                        this.__items = this.__items.slice(0, this.__wrap_point_index);\n                        next.__character_count += this.__character_count - this.__wrap_point_character_count;\n                        this.__character_count = this.__wrap_point_character_count;\n                        if (next.__items[0] === \" \") {\n                            next.__items.splice(0, 1);\n                            next.__character_count -= 1;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                OutputLine.prototype.is_empty = function() {\n                    return this.__items.length === 0;\n                };\n                OutputLine.prototype.last = function() {\n                    if (!this.is_empty()) {\n                        return this.__items[this.__items.length - 1];\n                    } else {\n                        return null;\n                    }\n                };\n                OutputLine.prototype.push = function(item) {\n                    this.__items.push(item);\n                    var last_newline_index = item.lastIndexOf(\"\\n\");\n                    if (last_newline_index !== -1) {\n                        this.__character_count = item.length - last_newline_index;\n                    } else {\n                        this.__character_count += item.length;\n                    }\n                };\n                OutputLine.prototype.pop = function() {\n                    var item = null;\n                    if (!this.is_empty()) {\n                        item = this.__items.pop();\n                        this.__character_count -= item.length;\n                    }\n                    return item;\n                };\n                OutputLine.prototype._remove_indent = function() {\n                    if (this.__indent_count > 0) {\n                        this.__indent_count -= 1;\n                        this.__character_count -= this.__parent.indent_size;\n                    }\n                };\n                OutputLine.prototype._remove_wrap_indent = function() {\n                    if (this.__wrap_point_indent_count > 0) {\n                        this.__wrap_point_indent_count -= 1;\n                    }\n                };\n                OutputLine.prototype.trim = function() {\n                    while(this.last() === \" \"){\n                        this.__items.pop();\n                        this.__character_count -= 1;\n                    }\n                };\n                OutputLine.prototype.toString = function() {\n                    var result = \"\";\n                    if (this.is_empty()) {\n                        if (this.__parent.indent_empty_lines) {\n                            result = this.__parent.get_indent_string(this.__indent_count);\n                        }\n                    } else {\n                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n                        result += this.__items.join(\"\");\n                    }\n                    return result;\n                };\n                function IndentStringCache(options, baseIndentString) {\n                    this.__cache = [\n                        \"\"\n                    ];\n                    this.__indent_size = options.indent_size;\n                    this.__indent_string = options.indent_char;\n                    if (!options.indent_with_tabs) {\n                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n                    }\n                    // Set to null to continue support for auto detection of base indent\n                    baseIndentString = baseIndentString || \"\";\n                    if (options.indent_level > 0) {\n                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n                    }\n                    this.__base_string = baseIndentString;\n                    this.__base_string_length = baseIndentString.length;\n                }\n                IndentStringCache.prototype.get_indent_size = function(indent, column) {\n                    var result = this.__base_string_length;\n                    column = column || 0;\n                    if (indent < 0) {\n                        result = 0;\n                    }\n                    result += indent * this.__indent_size;\n                    result += column;\n                    return result;\n                };\n                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n                    var result = this.__base_string;\n                    column = column || 0;\n                    if (indent_level < 0) {\n                        indent_level = 0;\n                        result = \"\";\n                    }\n                    column += indent_level * this.__indent_size;\n                    this.__ensure_cache(column);\n                    result += this.__cache[column];\n                    return result;\n                };\n                IndentStringCache.prototype.__ensure_cache = function(column) {\n                    while(column >= this.__cache.length){\n                        this.__add_column();\n                    }\n                };\n                IndentStringCache.prototype.__add_column = function() {\n                    var column = this.__cache.length;\n                    var indent = 0;\n                    var result = \"\";\n                    if (this.__indent_size && column >= this.__indent_size) {\n                        indent = Math.floor(column / this.__indent_size);\n                        column -= indent * this.__indent_size;\n                        result = new Array(indent + 1).join(this.__indent_string);\n                    }\n                    if (column) {\n                        result += new Array(column + 1).join(\" \");\n                    }\n                    this.__cache.push(result);\n                };\n                function Output(options, baseIndentString) {\n                    this.__indent_cache = new IndentStringCache(options, baseIndentString);\n                    this.raw = false;\n                    this._end_with_newline = options.end_with_newline;\n                    this.indent_size = options.indent_size;\n                    this.wrap_line_length = options.wrap_line_length;\n                    this.indent_empty_lines = options.indent_empty_lines;\n                    this.__lines = [];\n                    this.previous_line = null;\n                    this.current_line = null;\n                    this.next_line = new OutputLine(this);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                    // initialize\n                    this.__add_outputline();\n                }\n                Output.prototype.__add_outputline = function() {\n                    this.previous_line = this.current_line;\n                    this.current_line = this.next_line.clone_empty();\n                    this.__lines.push(this.current_line);\n                };\n                Output.prototype.get_line_number = function() {\n                    return this.__lines.length;\n                };\n                Output.prototype.get_indent_string = function(indent, column) {\n                    return this.__indent_cache.get_indent_string(indent, column);\n                };\n                Output.prototype.get_indent_size = function(indent, column) {\n                    return this.__indent_cache.get_indent_size(indent, column);\n                };\n                Output.prototype.is_empty = function() {\n                    return !this.previous_line && this.current_line.is_empty();\n                };\n                Output.prototype.add_new_line = function(force_newline) {\n                    // never newline at the start of file\n                    // otherwise, newline only if we didn't just add one or we're forced\n                    if (this.is_empty() || !force_newline && this.just_added_newline()) {\n                        return false;\n                    }\n                    // if raw output is enabled, don't print additional newlines,\n                    // but still return True as though you had\n                    if (!this.raw) {\n                        this.__add_outputline();\n                    }\n                    return true;\n                };\n                Output.prototype.get_code = function(eol) {\n                    this.trim(true);\n                    // handle some edge cases where the last tokens\n                    // has text that ends with newline(s)\n                    var last_item = this.current_line.pop();\n                    if (last_item) {\n                        if (last_item[last_item.length - 1] === \"\\n\") {\n                            last_item = last_item.replace(/\\n+$/g, \"\");\n                        }\n                        this.current_line.push(last_item);\n                    }\n                    if (this._end_with_newline) {\n                        this.__add_outputline();\n                    }\n                    var sweet_code = this.__lines.join(\"\\n\");\n                    if (eol !== \"\\n\") {\n                        sweet_code = sweet_code.replace(/[\\n]/g, eol);\n                    }\n                    return sweet_code;\n                };\n                Output.prototype.set_wrap_point = function() {\n                    this.current_line._set_wrap_point();\n                };\n                Output.prototype.set_indent = function(indent, alignment) {\n                    indent = indent || 0;\n                    alignment = alignment || 0;\n                    // Next line stores alignment values\n                    this.next_line.set_indent(indent, alignment);\n                    // Never indent your first output indent at the start of the file\n                    if (this.__lines.length > 1) {\n                        this.current_line.set_indent(indent, alignment);\n                        return true;\n                    }\n                    this.current_line.set_indent();\n                    return false;\n                };\n                Output.prototype.add_raw_token = function(token) {\n                    for(var x = 0; x < token.newlines; x++){\n                        this.__add_outputline();\n                    }\n                    this.current_line.set_indent(-1);\n                    this.current_line.push(token.whitespace_before);\n                    this.current_line.push(token.text);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                };\n                Output.prototype.add_token = function(printable_token) {\n                    this.__add_space_before_token();\n                    this.current_line.push(printable_token);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = this.current_line._allow_wrap();\n                };\n                Output.prototype.__add_space_before_token = function() {\n                    if (this.space_before_token && !this.just_added_newline()) {\n                        if (!this.non_breaking_space) {\n                            this.set_wrap_point();\n                        }\n                        this.current_line.push(\" \");\n                    }\n                };\n                Output.prototype.remove_indent = function(index) {\n                    var output_length = this.__lines.length;\n                    while(index < output_length){\n                        this.__lines[index]._remove_indent();\n                        index++;\n                    }\n                    this.current_line._remove_wrap_indent();\n                };\n                Output.prototype.trim = function(eat_newlines) {\n                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;\n                    this.current_line.trim();\n                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){\n                        this.__lines.pop();\n                        this.current_line = this.__lines[this.__lines.length - 1];\n                        this.current_line.trim();\n                    }\n                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n                };\n                Output.prototype.just_added_newline = function() {\n                    return this.current_line.is_empty();\n                };\n                Output.prototype.just_added_blankline = function() {\n                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n                };\n                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n                    var index = this.__lines.length - 2;\n                    while(index >= 0){\n                        var potentialEmptyLine = this.__lines[index];\n                        if (potentialEmptyLine.is_empty()) {\n                            break;\n                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n                            this.__lines.splice(index + 1, 0, new OutputLine(this));\n                            this.previous_line = this.__lines[this.__lines.length - 2];\n                            break;\n                        }\n                        index--;\n                    }\n                };\n                module.exports.Output = Output;\n            /***/ },\n            ,\n            ,\n            ,\n            /* 6 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Options(options, merge_child_field) {\n                    this.raw_options = _mergeOpts(options, merge_child_field);\n                    // Support passing the source text back with no change\n                    this.disabled = this._get_boolean(\"disabled\");\n                    this.eol = this._get_characters(\"eol\", \"auto\");\n                    this.end_with_newline = this._get_boolean(\"end_with_newline\");\n                    this.indent_size = this._get_number(\"indent_size\", 4);\n                    this.indent_char = this._get_characters(\"indent_char\", \" \");\n                    this.indent_level = this._get_number(\"indent_level\");\n                    this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n                    this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n                    if (!this.preserve_newlines) {\n                        this.max_preserve_newlines = 0;\n                    }\n                    this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n                    if (this.indent_with_tabs) {\n                        this.indent_char = \"\t\";\n                        // indent_size behavior changed after 1.8.6\n                        // It used to be that indent_size would be\n                        // set to 1 for indent_with_tabs. That is no longer needed and\n                        // actually doesn't make sense - why not use spaces? Further,\n                        // that might produce unexpected behavior - tabs being used\n                        // for single-column alignment. So, when indent_with_tabs is true\n                        // and indent_size is 1, reset indent_size to 4.\n                        if (this.indent_size === 1) {\n                            this.indent_size = 4;\n                        }\n                    }\n                    // Backwards compat with 1.3.x\n                    this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n                    this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']\n                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).\n                    // other values ignored\n                    this.templating = this._get_selection_list(\"templating\", [\n                        \"auto\",\n                        \"none\",\n                        \"django\",\n                        \"erb\",\n                        \"handlebars\",\n                        \"php\",\n                        \"smarty\"\n                    ], [\n                        \"auto\"\n                    ]);\n                }\n                Options.prototype._get_array = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || [];\n                    if (typeof option_value === \"object\") {\n                        if (option_value !== null && typeof option_value.concat === \"function\") {\n                            result = option_value.concat();\n                        }\n                    } else if (typeof option_value === \"string\") {\n                        result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n                    }\n                    return result;\n                };\n                Options.prototype._get_boolean = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = option_value === undefined ? !!default_value : !!option_value;\n                    return result;\n                };\n                Options.prototype._get_characters = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || \"\";\n                    if (typeof option_value === \"string\") {\n                        result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n                    }\n                    return result;\n                };\n                Options.prototype._get_number = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    default_value = parseInt(default_value, 10);\n                    if (isNaN(default_value)) {\n                        default_value = 0;\n                    }\n                    var result = parseInt(option_value, 10);\n                    if (isNaN(result)) {\n                        result = default_value;\n                    }\n                    return result;\n                };\n                Options.prototype._get_selection = function(name, selection_list, default_value) {\n                    var result = this._get_selection_list(name, selection_list, default_value);\n                    if (result.length !== 1) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result[0];\n                };\n                Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n                    if (!selection_list || selection_list.length === 0) {\n                        throw new Error(\"Selection list cannot be empty.\");\n                    }\n                    default_value = default_value || [\n                        selection_list[0]\n                    ];\n                    if (!this._is_valid_selection(default_value, selection_list)) {\n                        throw new Error(\"Invalid Default Value!\");\n                    }\n                    var result = this._get_array(name, default_value);\n                    if (!this._is_valid_selection(result, selection_list)) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result;\n                };\n                Options.prototype._is_valid_selection = function(result, selection_list) {\n                    return result.length && selection_list.length && !result.some(function(item) {\n                        return selection_list.indexOf(item) === -1;\n                    });\n                };\n                // merges child options up with the parent options object\n                // Example: obj = {a: 1, b: {a: 2}}\n                //          mergeOpts(obj, 'b')\n                //\n                //          Returns: {a: 2}\n                function _mergeOpts(allOptions, childFieldName) {\n                    var finalOpts = {};\n                    allOptions = _normalizeOpts(allOptions);\n                    var name;\n                    for(name in allOptions){\n                        if (name !== childFieldName) {\n                            finalOpts[name] = allOptions[name];\n                        }\n                    }\n                    //merge in the per type settings for the childFieldName\n                    if (childFieldName && allOptions[childFieldName]) {\n                        for(name in allOptions[childFieldName]){\n                            finalOpts[name] = allOptions[childFieldName][name];\n                        }\n                    }\n                    return finalOpts;\n                }\n                function _normalizeOpts(options) {\n                    var convertedOpts = {};\n                    var key;\n                    for(key in options){\n                        var newKey = key.replace(/-/g, \"_\");\n                        convertedOpts[newKey] = options[key];\n                    }\n                    return convertedOpts;\n                }\n                module.exports.Options = Options;\n                module.exports.normalizeOpts = _normalizeOpts;\n                module.exports.mergeOpts = _mergeOpts;\n            /***/ },\n            ,\n            /* 8 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n                function InputScanner(input_string) {\n                    this.__input = input_string || \"\";\n                    this.__input_length = this.__input.length;\n                    this.__position = 0;\n                }\n                InputScanner.prototype.restart = function() {\n                    this.__position = 0;\n                };\n                InputScanner.prototype.back = function() {\n                    if (this.__position > 0) {\n                        this.__position -= 1;\n                    }\n                };\n                InputScanner.prototype.hasNext = function() {\n                    return this.__position < this.__input_length;\n                };\n                InputScanner.prototype.next = function() {\n                    var val = null;\n                    if (this.hasNext()) {\n                        val = this.__input.charAt(this.__position);\n                        this.__position += 1;\n                    }\n                    return val;\n                };\n                InputScanner.prototype.peek = function(index) {\n                    var val = null;\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        val = this.__input.charAt(index);\n                    }\n                    return val;\n                };\n                // This is a JavaScript only helper function (not in python)\n                // Javascript doesn't have a match method\n                // and not all implementation support \"sticky\" flag.\n                // If they do not support sticky then both this.match() and this.test() method\n                // must get the match and check the index of the match.\n                // If sticky is supported and set, this method will use it.\n                // Otherwise it will check that global is set, and fall back to the slower method.\n                InputScanner.prototype.__match = function(pattern, index) {\n                    pattern.lastIndex = index;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n                        if (pattern_match.index !== index) {\n                            pattern_match = null;\n                        }\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.test = function(pattern, index) {\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        return !!this.__match(pattern, index);\n                    } else {\n                        return false;\n                    }\n                };\n                InputScanner.prototype.testChar = function(pattern, index) {\n                    // test one character regex match\n                    var val = this.peek(index);\n                    pattern.lastIndex = 0;\n                    return val !== null && pattern.test(val);\n                };\n                InputScanner.prototype.match = function(pattern) {\n                    var pattern_match = this.__match(pattern, this.__position);\n                    if (pattern_match) {\n                        this.__position += pattern_match[0].length;\n                    } else {\n                        pattern_match = null;\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n                    var val = \"\";\n                    var match;\n                    if (starting_pattern) {\n                        match = this.match(starting_pattern);\n                        if (match) {\n                            val += match[0];\n                        }\n                    }\n                    if (until_pattern && (match || !starting_pattern)) {\n                        val += this.readUntil(until_pattern, until_after);\n                    }\n                    return val;\n                };\n                InputScanner.prototype.readUntil = function(pattern, until_after) {\n                    var val = \"\";\n                    var match_index = this.__position;\n                    pattern.lastIndex = this.__position;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match) {\n                        match_index = pattern_match.index;\n                        if (until_after) {\n                            match_index += pattern_match[0].length;\n                        }\n                    } else {\n                        match_index = this.__input_length;\n                    }\n                    val = this.__input.substring(this.__position, match_index);\n                    this.__position = match_index;\n                    return val;\n                };\n                InputScanner.prototype.readUntilAfter = function(pattern) {\n                    return this.readUntil(pattern, true);\n                };\n                InputScanner.prototype.get_regexp = function(pattern, match_from) {\n                    var result = null;\n                    var flags = \"g\";\n                    if (match_from && regexp_has_sticky) {\n                        flags = \"y\";\n                    }\n                    // strings are converted to regexp\n                    if (typeof pattern === \"string\" && pattern !== \"\") {\n                        // result = new RegExp(pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), flags);\n                        result = new RegExp(pattern, flags);\n                    } else if (pattern) {\n                        result = new RegExp(pattern.source, flags);\n                    }\n                    return result;\n                };\n                InputScanner.prototype.get_literal_regexp = function(literal_string) {\n                    return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n                };\n                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {\n                    var start = this.__position;\n                    var val = this.readUntilAfter(pattern);\n                    this.__position = start;\n                    return val;\n                };\n                InputScanner.prototype.lookBack = function(testVal) {\n                    var start = this.__position - 1;\n                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n                };\n                module.exports.InputScanner = InputScanner;\n            /***/ },\n            ,\n            ,\n            ,\n            ,\n            /* 13 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Directives(start_block_pattern, end_block_pattern) {\n                    start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n                    end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n                    this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n                }\n                Directives.prototype.get_directives = function(text) {\n                    if (!text.match(this.__directives_block_pattern)) {\n                        return null;\n                    }\n                    var directives = {};\n                    this.__directive_pattern.lastIndex = 0;\n                    var directive_match = this.__directive_pattern.exec(text);\n                    while(directive_match){\n                        directives[directive_match[1]] = directive_match[2];\n                        directive_match = this.__directive_pattern.exec(text);\n                    }\n                    return directives;\n                };\n                Directives.prototype.readIgnored = function(input) {\n                    return input.readUntilAfter(this.__directives_end_ignore_pattern);\n                };\n                module.exports.Directives = Directives;\n            /***/ },\n            ,\n            /* 15 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_41569__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Beautifier = __nested_webpack_require_41569__(16).Beautifier, Options = __nested_webpack_require_41569__(17).Options;\n                function css_beautify(source_text, options) {\n                    var beautifier = new Beautifier(source_text, options);\n                    return beautifier.beautify();\n                }\n                module.exports = css_beautify;\n                module.exports.defaultOptions = function() {\n                    return new Options();\n                };\n            /***/ },\n            /* 16 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_43355__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Options = __nested_webpack_require_43355__(17).Options;\n                var Output = __nested_webpack_require_43355__(2).Output;\n                var InputScanner = __nested_webpack_require_43355__(8).InputScanner;\n                var Directives = __nested_webpack_require_43355__(13).Directives;\n                var directives_core = new Directives(/\\/\\*/, /\\*\\//);\n                var lineBreak = /\\r\\n|[\\r\\n]/;\n                var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n                // tokenizer\n                var whitespaceChar = /\\s/;\n                var whitespacePattern = /(?:\\s|\\n)+/g;\n                var block_comment_pattern = /\\/\\*(?:[\\s\\S]*?)((?:\\*\\/)|$)/g;\n                var comment_pattern = /\\/\\/(?:[^\\n\\r\\u2028\\u2029]*)/g;\n                function Beautifier(source_text, options) {\n                    this._source_text = source_text || \"\";\n                    // Allow the setting of language/file-type specific options\n                    // with inheritance of overall settings\n                    this._options = new Options(options);\n                    this._ch = null;\n                    this._input = null;\n                    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n                    this.NESTED_AT_RULE = {\n                        \"page\": true,\n                        \"font-face\": true,\n                        \"keyframes\": true,\n                        // also in CONDITIONAL_GROUP_RULE below\n                        \"media\": true,\n                        \"supports\": true,\n                        \"document\": true\n                    };\n                    this.CONDITIONAL_GROUP_RULE = {\n                        \"media\": true,\n                        \"supports\": true,\n                        \"document\": true\n                    };\n                    this.NON_SEMICOLON_NEWLINE_PROPERTY = [\n                        \"grid-template-areas\",\n                        \"grid-template\"\n                    ];\n                }\n                Beautifier.prototype.eatString = function(endChars) {\n                    var result = \"\";\n                    this._ch = this._input.next();\n                    while(this._ch){\n                        result += this._ch;\n                        if (this._ch === \"\\\\\") {\n                            result += this._input.next();\n                        } else if (endChars.indexOf(this._ch) !== -1 || this._ch === \"\\n\") {\n                            break;\n                        }\n                        this._ch = this._input.next();\n                    }\n                    return result;\n                };\n                // Skips any white space in the source text from the current position.\n                // When allowAtLeastOneNewLine is true, will output new lines for each\n                // newline character found; if the user has preserve_newlines off, only\n                // the first newline will be output\n                Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {\n                    var result = whitespaceChar.test(this._input.peek());\n                    var newline_count = 0;\n                    while(whitespaceChar.test(this._input.peek())){\n                        this._ch = this._input.next();\n                        if (allowAtLeastOneNewLine && this._ch === \"\\n\") {\n                            if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {\n                                newline_count++;\n                                this._output.add_new_line(true);\n                            }\n                        }\n                    }\n                    return result;\n                };\n                // Nested pseudo-class if we are insideRule\n                // and the next special character found opens\n                // a new block\n                Beautifier.prototype.foundNestedPseudoClass = function() {\n                    var openParen = 0;\n                    var i = 1;\n                    var ch = this._input.peek(i);\n                    while(ch){\n                        if (ch === \"{\") {\n                            return true;\n                        } else if (ch === \"(\") {\n                            // pseudoclasses can contain ()\n                            openParen += 1;\n                        } else if (ch === \")\") {\n                            if (openParen === 0) {\n                                return false;\n                            }\n                            openParen -= 1;\n                        } else if (ch === \";\" || ch === \"}\") {\n                            return false;\n                        }\n                        i++;\n                        ch = this._input.peek(i);\n                    }\n                    return false;\n                };\n                Beautifier.prototype.print_string = function(output_string) {\n                    this._output.set_indent(this._indentLevel);\n                    this._output.non_breaking_space = true;\n                    this._output.add_token(output_string);\n                };\n                Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {\n                    if (isAfterSpace) {\n                        this._output.space_before_token = true;\n                    }\n                };\n                Beautifier.prototype.indent = function() {\n                    this._indentLevel++;\n                };\n                Beautifier.prototype.outdent = function() {\n                    if (this._indentLevel > 0) {\n                        this._indentLevel--;\n                    }\n                };\n                /*_____________________--------------------_____________________*/ Beautifier.prototype.beautify = function() {\n                    if (this._options.disabled) {\n                        return this._source_text;\n                    }\n                    var source_text = this._source_text;\n                    var eol = this._options.eol;\n                    if (eol === \"auto\") {\n                        eol = \"\\n\";\n                        if (source_text && lineBreak.test(source_text || \"\")) {\n                            eol = source_text.match(lineBreak)[0];\n                        }\n                    }\n                    // HACK: newline parsing inconsistent. This brute force normalizes the this._input.\n                    source_text = source_text.replace(allLineBreaks, \"\\n\");\n                    // reset\n                    var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n                    this._output = new Output(this._options, baseIndentString);\n                    this._input = new InputScanner(source_text);\n                    this._indentLevel = 0;\n                    this._nestedLevel = 0;\n                    this._ch = null;\n                    var parenLevel = 0;\n                    var insideRule = false;\n                    // This is the value side of a property value pair (blue in the following ex)\n                    // label { content: blue }\n                    var insidePropertyValue = false;\n                    var enteringConditionalGroup = false;\n                    var insideNonNestedAtRule = false;\n                    var insideScssMap = false;\n                    var topCharacter = this._ch;\n                    var insideNonSemiColonValues = false;\n                    var whitespace;\n                    var isAfterSpace;\n                    var previous_ch;\n                    while(true){\n                        whitespace = this._input.read(whitespacePattern);\n                        isAfterSpace = whitespace !== \"\";\n                        previous_ch = topCharacter;\n                        this._ch = this._input.next();\n                        if (this._ch === \"\\\\\" && this._input.hasNext()) {\n                            this._ch += this._input.next();\n                        }\n                        topCharacter = this._ch;\n                        if (!this._ch) {\n                            break;\n                        } else if (this._ch === \"/\" && this._input.peek() === \"*\") {\n                            // /* css comment */\n                            // Always start block comments on a new line.\n                            // This handles scenarios where a block comment immediately\n                            // follows a property definition on the same line or where\n                            // minified code is being beautified.\n                            this._output.add_new_line();\n                            this._input.back();\n                            var comment = this._input.read(block_comment_pattern);\n                            // Handle ignore directive\n                            var directives = directives_core.get_directives(comment);\n                            if (directives && directives.ignore === \"start\") {\n                                comment += directives_core.readIgnored(this._input);\n                            }\n                            this.print_string(comment);\n                            // Ensures any new lines following the comment are preserved\n                            this.eatWhitespace(true);\n                            // Block comments are followed by a new line so they don't\n                            // share a line with other properties\n                            this._output.add_new_line();\n                        } else if (this._ch === \"/\" && this._input.peek() === \"/\") {\n                            // // single line comment\n                            // Preserves the space before a comment\n                            // on the same line as a rule\n                            this._output.space_before_token = true;\n                            this._input.back();\n                            this.print_string(this._input.read(comment_pattern));\n                            // Ensures any new lines following the comment are preserved\n                            this.eatWhitespace(true);\n                        } else if (this._ch === \"$\") {\n                            this.preserveSingleSpace(isAfterSpace);\n                            this.print_string(this._ch);\n                            // strip trailing space, if present, for hash property checks\n                            var variable = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n                            if (variable.match(/[ :]$/)) {\n                                // we have a variable or pseudo-class, add it and insert one space before continuing\n                                variable = this.eatString(\": \").replace(/\\s+$/, \"\");\n                                this.print_string(variable);\n                                this._output.space_before_token = true;\n                            }\n                            // might be sass variable\n                            if (parenLevel === 0 && variable.indexOf(\":\") !== -1) {\n                                insidePropertyValue = true;\n                                this.indent();\n                            }\n                        } else if (this._ch === \"@\") {\n                            this.preserveSingleSpace(isAfterSpace);\n                            // deal with less property mixins @{...}\n                            if (this._input.peek() === \"{\") {\n                                this.print_string(this._ch + this.eatString(\"}\"));\n                            } else {\n                                this.print_string(this._ch);\n                                // strip trailing space, if present, for hash property checks\n                                var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\\]\\/='\"]/g);\n                                if (variableOrRule.match(/[ :]$/)) {\n                                    // we have a variable or pseudo-class, add it and insert one space before continuing\n                                    variableOrRule = this.eatString(\": \").replace(/\\s+$/, \"\");\n                                    this.print_string(variableOrRule);\n                                    this._output.space_before_token = true;\n                                }\n                                // might be less variable\n                                if (parenLevel === 0 && variableOrRule.indexOf(\":\") !== -1) {\n                                    insidePropertyValue = true;\n                                    this.indent();\n                                // might be a nesting at-rule\n                                } else if (variableOrRule in this.NESTED_AT_RULE) {\n                                    this._nestedLevel += 1;\n                                    if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {\n                                        enteringConditionalGroup = true;\n                                    }\n                                // might be a non-nested at-rule\n                                } else if (parenLevel === 0 && !insidePropertyValue) {\n                                    insideNonNestedAtRule = true;\n                                }\n                            }\n                        } else if (this._ch === \"#\" && this._input.peek() === \"{\") {\n                            this.preserveSingleSpace(isAfterSpace);\n                            this.print_string(this._ch + this.eatString(\"}\"));\n                        } else if (this._ch === \"{\") {\n                            if (insidePropertyValue) {\n                                insidePropertyValue = false;\n                                this.outdent();\n                            }\n                            // non nested at rule becomes nested\n                            insideNonNestedAtRule = false;\n                            // when entering conditional groups, only rulesets are allowed\n                            if (enteringConditionalGroup) {\n                                enteringConditionalGroup = false;\n                                insideRule = this._indentLevel >= this._nestedLevel;\n                            } else {\n                                // otherwise, declarations are also allowed\n                                insideRule = this._indentLevel >= this._nestedLevel - 1;\n                            }\n                            if (this._options.newline_between_rules && insideRule) {\n                                if (this._output.previous_line && this._output.previous_line.item(-1) !== \"{\") {\n                                    this._output.ensure_empty_line_above(\"/\", \",\");\n                                }\n                            }\n                            this._output.space_before_token = true;\n                            // The difference in print_string and indent order is necessary to indent the '{' correctly\n                            if (this._options.brace_style === \"expand\") {\n                                this._output.add_new_line();\n                                this.print_string(this._ch);\n                                this.indent();\n                                this._output.set_indent(this._indentLevel);\n                            } else {\n                                // inside mixin and first param is object\n                                if (previous_ch === \"(\") {\n                                    this._output.space_before_token = false;\n                                } else if (previous_ch !== \",\") {\n                                    this.indent();\n                                }\n                                this.print_string(this._ch);\n                            }\n                            this.eatWhitespace(true);\n                            this._output.add_new_line();\n                        } else if (this._ch === \"}\") {\n                            this.outdent();\n                            this._output.add_new_line();\n                            if (previous_ch === \"{\") {\n                                this._output.trim(true);\n                            }\n                            if (insidePropertyValue) {\n                                this.outdent();\n                                insidePropertyValue = false;\n                            }\n                            this.print_string(this._ch);\n                            insideRule = false;\n                            if (this._nestedLevel) {\n                                this._nestedLevel--;\n                            }\n                            this.eatWhitespace(true);\n                            this._output.add_new_line();\n                            if (this._options.newline_between_rules && !this._output.just_added_blankline()) {\n                                if (this._input.peek() !== \"}\") {\n                                    this._output.add_new_line(true);\n                                }\n                            }\n                            if (this._input.peek() === \")\") {\n                                this._output.trim(true);\n                                if (this._options.brace_style === \"expand\") {\n                                    this._output.add_new_line(true);\n                                }\n                            }\n                        } else if (this._ch === \":\") {\n                            for(var i = 0; i < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; i++){\n                                if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[i])) {\n                                    insideNonSemiColonValues = true;\n                                    break;\n                                }\n                            }\n                            if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack(\"&\") || this.foundNestedPseudoClass()) && !this._input.lookBack(\"(\") && !insideNonNestedAtRule && parenLevel === 0) {\n                                // 'property: value' delimiter\n                                // which could be in a conditional group query\n                                this.print_string(\":\");\n                                if (!insidePropertyValue) {\n                                    insidePropertyValue = true;\n                                    this._output.space_before_token = true;\n                                    this.eatWhitespace(true);\n                                    this.indent();\n                                }\n                            } else {\n                                // sass/less parent reference don't use a space\n                                // sass nested pseudo-class don't use a space\n                                // preserve space before pseudoclasses/pseudoelements, as it means \"in any child\"\n                                if (this._input.lookBack(\" \")) {\n                                    this._output.space_before_token = true;\n                                }\n                                if (this._input.peek() === \":\") {\n                                    // pseudo-element\n                                    this._ch = this._input.next();\n                                    this.print_string(\"::\");\n                                } else {\n                                    // pseudo-class\n                                    this.print_string(\":\");\n                                }\n                            }\n                        } else if (this._ch === '\"' || this._ch === \"'\") {\n                            var preserveQuoteSpace = previous_ch === '\"' || previous_ch === \"'\";\n                            this.preserveSingleSpace(preserveQuoteSpace || isAfterSpace);\n                            this.print_string(this._ch + this.eatString(this._ch));\n                            this.eatWhitespace(true);\n                        } else if (this._ch === \";\") {\n                            insideNonSemiColonValues = false;\n                            if (parenLevel === 0) {\n                                if (insidePropertyValue) {\n                                    this.outdent();\n                                    insidePropertyValue = false;\n                                }\n                                insideNonNestedAtRule = false;\n                                this.print_string(this._ch);\n                                this.eatWhitespace(true);\n                                // This maintains single line comments on the same\n                                // line. Block comments are also affected, but\n                                // a new line is always output before one inside\n                                // that section\n                                if (this._input.peek() !== \"/\") {\n                                    this._output.add_new_line();\n                                }\n                            } else {\n                                this.print_string(this._ch);\n                                this.eatWhitespace(true);\n                                this._output.space_before_token = true;\n                            }\n                        } else if (this._ch === \"(\") {\n                            if (this._input.lookBack(\"url\")) {\n                                this.print_string(this._ch);\n                                this.eatWhitespace();\n                                parenLevel++;\n                                this.indent();\n                                this._ch = this._input.next();\n                                if (this._ch === \")\" || this._ch === '\"' || this._ch === \"'\") {\n                                    this._input.back();\n                                } else if (this._ch) {\n                                    this.print_string(this._ch + this.eatString(\")\"));\n                                    if (parenLevel) {\n                                        parenLevel--;\n                                        this.outdent();\n                                    }\n                                }\n                            } else {\n                                var space_needed = false;\n                                if (this._input.lookBack(\"with\")) {\n                                    // look back is not an accurate solution, we need tokens to confirm without whitespaces\n                                    space_needed = true;\n                                }\n                                this.preserveSingleSpace(isAfterSpace || space_needed);\n                                this.print_string(this._ch);\n                                // handle scss/sass map\n                                if (insidePropertyValue && previous_ch === \"$\" && this._options.selector_separator_newline) {\n                                    this._output.add_new_line();\n                                    insideScssMap = true;\n                                } else {\n                                    this.eatWhitespace();\n                                    parenLevel++;\n                                    this.indent();\n                                }\n                            }\n                        } else if (this._ch === \")\") {\n                            if (parenLevel) {\n                                parenLevel--;\n                                this.outdent();\n                            }\n                            if (insideScssMap && this._input.peek() === \";\" && this._options.selector_separator_newline) {\n                                insideScssMap = false;\n                                this.outdent();\n                                this._output.add_new_line();\n                            }\n                            this.print_string(this._ch);\n                        } else if (this._ch === \",\") {\n                            this.print_string(this._ch);\n                            this.eatWhitespace(true);\n                            if (this._options.selector_separator_newline && (!insidePropertyValue || insideScssMap) && parenLevel === 0 && !insideNonNestedAtRule) {\n                                this._output.add_new_line();\n                            } else {\n                                this._output.space_before_token = true;\n                            }\n                        } else if ((this._ch === \">\" || this._ch === \"+\" || this._ch === \"~\") && !insidePropertyValue && parenLevel === 0) {\n                            //handle combinator spacing\n                            if (this._options.space_around_combinator) {\n                                this._output.space_before_token = true;\n                                this.print_string(this._ch);\n                                this._output.space_before_token = true;\n                            } else {\n                                this.print_string(this._ch);\n                                this.eatWhitespace();\n                                // squash extra whitespace\n                                if (this._ch && whitespaceChar.test(this._ch)) {\n                                    this._ch = \"\";\n                                }\n                            }\n                        } else if (this._ch === \"]\") {\n                            this.print_string(this._ch);\n                        } else if (this._ch === \"[\") {\n                            this.preserveSingleSpace(isAfterSpace);\n                            this.print_string(this._ch);\n                        } else if (this._ch === \"=\") {\n                            this.eatWhitespace();\n                            this.print_string(\"=\");\n                            if (whitespaceChar.test(this._ch)) {\n                                this._ch = \"\";\n                            }\n                        } else if (this._ch === \"!\" && !this._input.lookBack(\"\\\\\")) {\n                            this._output.space_before_token = true;\n                            this.print_string(this._ch);\n                        } else {\n                            var preserveAfterSpace = previous_ch === '\"' || previous_ch === \"'\";\n                            this.preserveSingleSpace(preserveAfterSpace || isAfterSpace);\n                            this.print_string(this._ch);\n                            if (!this._output.just_added_newline() && this._input.peek() === \"\\n\" && insideNonSemiColonValues) {\n                                this._output.add_new_line();\n                            }\n                        }\n                    }\n                    var sweetCode = this._output.get_code(eol);\n                    return sweetCode;\n                };\n                module.exports.Beautifier = Beautifier;\n            /***/ },\n            /* 17 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_71190__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var BaseOptions = __nested_webpack_require_71190__(6).Options;\n                function Options(options) {\n                    BaseOptions.call(this, options, \"css\");\n                    this.selector_separator_newline = this._get_boolean(\"selector_separator_newline\", true);\n                    this.newline_between_rules = this._get_boolean(\"newline_between_rules\", true);\n                    var space_around_selector_separator = this._get_boolean(\"space_around_selector_separator\");\n                    this.space_around_combinator = this._get_boolean(\"space_around_combinator\") || space_around_selector_separator;\n                    var brace_style_split = this._get_selection_list(\"brace_style\", [\n                        \"collapse\",\n                        \"expand\",\n                        \"end-expand\",\n                        \"none\",\n                        \"preserve-inline\"\n                    ]);\n                    this.brace_style = \"collapse\";\n                    for(var bs = 0; bs < brace_style_split.length; bs++){\n                        if (brace_style_split[bs] !== \"expand\") {\n                            // default to collapse, as only collapse|expand is implemented for now\n                            this.brace_style = \"collapse\";\n                        } else {\n                            this.brace_style = brace_style_split[bs];\n                        }\n                    }\n                }\n                Options.prototype = new BaseOptions();\n                module.exports.Options = Options;\n            /***/ }\n        ];\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_74198__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_74198__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_74198__(15);\n        /******/ legacy_beautify_css = __nested_webpack_exports__;\n    /******/ /******/ })();\n    var css_beautify = legacy_beautify_css;\n    /* Footer */ if (true) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return {\n                css_beautify: css_beautify\n            };\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvanMtYmVhdXRpZnkvanMvbGliL2JlYXV0aWZ5LWNzcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrR0FBa0MsR0FDbEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwREEsR0FFQSx1REFBdUQ7QUFDdkQsb0NBQW9DO0FBRW5DO0lBRUQsMEJBQTBCLEdBQzFCLElBQUlBO0lBQ0osTUFBTSxHQUFJO1FBQ1YsTUFBTSxHQUFJO1FBQ1YsTUFBTSxHQUFJLElBQUlDLHNCQUF1Qjs7O1lBR3JDLEtBQUssR0FDTCxHQUFHLEdBQUksU0FBU0MsTUFBTTtnQkFFdEIsbUJBQW1CLEdBQ25COzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkEsR0FJQSxTQUFTQyxXQUFXQyxNQUFNO29CQUN4QixJQUFJLENBQUNDLFFBQVEsR0FBR0Q7b0JBQ2hCLElBQUksQ0FBQ0UsaUJBQWlCLEdBQUc7b0JBQ3pCLGdGQUFnRjtvQkFDaEYsSUFBSSxDQUFDQyxjQUFjLEdBQUcsQ0FBQztvQkFDdkIsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRztvQkFDekIsSUFBSSxDQUFDQyxrQkFBa0IsR0FBRztvQkFDMUIsSUFBSSxDQUFDQyw0QkFBNEIsR0FBRztvQkFDcEMsSUFBSSxDQUFDQyx5QkFBeUIsR0FBRyxDQUFDO29CQUNsQyxJQUFJLENBQUNDLDRCQUE0QixHQUFHO29CQUVwQyxJQUFJLENBQUNDLE9BQU8sR0FBRyxFQUFFO2dCQUNuQjtnQkFFQVYsV0FBV1csU0FBUyxDQUFDQyxXQUFXLEdBQUc7b0JBQ2pDLElBQUlDLE9BQU8sSUFBSWIsV0FBVyxJQUFJLENBQUNFLFFBQVE7b0JBQ3ZDVyxLQUFLQyxVQUFVLENBQUMsSUFBSSxDQUFDVixjQUFjLEVBQUUsSUFBSSxDQUFDQyxpQkFBaUI7b0JBQzNELE9BQU9RO2dCQUNUO2dCQUVBYixXQUFXVyxTQUFTLENBQUNJLElBQUksR0FBRyxTQUFTQyxLQUFL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QUFJO1FBQ1YsTUFBTSxHQUNOLHdFQUF3RSxHQUN4RSxNQUFNLEdBQ04sTUFBTSxHQUFJLFVBQVU7UUFDcEIsTUFBTSxHQUFJLHVDQUF1QztRQUNqRCxNQUFNLEdBQUksMEVBQTBFO1FBQ3BGLE1BQU0sR0FBSSxJQUFJMkosMEJBQW1CQSxHQUFHcEUsZ0NBQW1CQSxDQUFDO1FBQ3hELE1BQU0sR0FBSXBNLHNCQUFzQndRLDBCQUFtQkE7SUFDbkQsTUFBTSxHQUNOLE1BQU0sR0FBRztJQUVULElBQUlsRSxlQUFldE07SUFDbkIsVUFBVSxHQUNWLElBQUksSUFBMEMsRUFBRTtRQUM1QywwRkFBMEY7UUFDMUZ5USxpQ0FBTyxFQUFFLG1DQUFFO1lBQ1AsT0FBTztnQkFDSG5FLGNBQWNBO1lBQ2xCO1FBQ0osQ0FBQztBQUFBLGtHQUFDO0lBQ04sT0FBTyxFQVVOO0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNpZ24tZW5naW5lZXIvLi9ub2RlX21vZHVsZXMvanMtYmVhdXRpZnkvanMvbGliL2JlYXV0aWZ5LWNzcy5qcz9jNDNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIEFVVE8tR0VORVJBVEVELiBETyBOT1QgTU9ESUZZLiAqL1xuLypcblxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG5cblxuIENTUyBCZWF1dGlmaWVyXG4tLS0tLS0tLS0tLS0tLS1cblxuICAgIFdyaXR0ZW4gYnkgSGFydXR5dW4gQW1pcmphbnlhbiwgKGFtaXJqYW55YW5AZ21haWwuY29tKVxuXG4gICAgQmFzZWQgb24gY29kZSBpbml0aWFsbHkgZGV2ZWxvcGVkIGJ5OiBFaW5hciBMaWVsbWFuaXMsIDxlaW5hckBiZWF1dGlmaWVyLmlvPlxuICAgICAgICBodHRwczovL2JlYXV0aWZpZXIuaW8vXG5cbiAgICBVc2FnZTpcbiAgICAgICAgY3NzX2JlYXV0aWZ5KHNvdXJjZV90ZXh0KTtcbiAgICAgICAgY3NzX2JlYXV0aWZ5KHNvdXJjZV90ZXh0LCBvcHRpb25zKTtcblxuICAgIFRoZSBvcHRpb25zIGFyZSAoZGVmYXVsdCBpbiBicmFja2V0cyk6XG4gICAgICAgIGluZGVudF9zaXplICg0KSAgICAgICAgICAgICAgICAgICAgICAgICDigJQgaW5kZW50YXRpb24gc2l6ZSxcbiAgICAgICAgaW5kZW50X2NoYXIgKHNwYWNlKSAgICAgICAgICAgICAgICAgICAgIOKAlCBjaGFyYWN0ZXIgdG8gaW5kZW50IHdpdGgsXG4gICAgICAgIHNlbGVjdG9yX3NlcGFyYXRvcl9uZXdsaW5lICh0cnVlKSAgICAgICAtIHNlcGFyYXRlIHNlbGVjdG9ycyB3aXRoIG5ld2xpbmUgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IChlLmcuIFwiYSxcXG5iclwiIG9yIFwiYSwgYnJcIilcbiAgICAgICAgZW5kX3dpdGhfbmV3bGluZSAoZmFsc2UpICAgICAgICAgICAgICAgIC0gZW5kIHdpdGggYSBuZXdsaW5lXG4gICAgICAgIG5ld2xpbmVfYmV0d2Vlbl9ydWxlcyAodHJ1ZSkgICAgICAgICAgICAtIGFkZCBhIG5ldyBsaW5lIGFmdGVyIGV2ZXJ5IGNzcyBydWxlXG4gICAgICAgIHNwYWNlX2Fyb3VuZF9zZWxlY3Rvcl9zZXBhcmF0b3IgKGZhbHNlKSAtIGVuc3VyZSBzcGFjZSBhcm91bmQgc2VsZWN0b3Igc2VwYXJhdG9yczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJz4nLCAnKycsICd+JyAoZS5nLiBcImE+YlwiIC0+IFwiYSA+IGJcIilcbiAgICBlLmdcblxuICAgIGNzc19iZWF1dGlmeShjc3Nfc291cmNlX3RleHQsIHtcbiAgICAgICdpbmRlbnRfc2l6ZSc6IDEsXG4gICAgICAnaW5kZW50X2NoYXInOiAnXFx0JyxcbiAgICAgICdzZWxlY3Rvcl9zZXBhcmF0b3InOiAnICcsXG4gICAgICAnZW5kX3dpdGhfbmV3bGluZSc6IGZhbHNlLFxuICAgICAgJ25ld2xpbmVfYmV0d2Vlbl9ydWxlcyc6IHRydWUsXG4gICAgICAnc3BhY2VfYXJvdW5kX3NlbGVjdG9yX3NlcGFyYXRvcic6IHRydWVcbiAgICB9KTtcbiovXG5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN0b2tlbml6YXRpb25cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4L1xuXG4oZnVuY3Rpb24oKSB7XG5cbi8qIEdFTkVSQVRFRF9CVUlMRF9PVVRQVVQgKi9cbnZhciBsZWdhY3lfYmVhdXRpZnlfY3NzO1xuLyoqKioqKi8gKGZ1bmN0aW9uKCkgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdFwidXNlIHN0cmljdFwiO1xuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9IChbXG4vKiAwICovLFxuLyogMSAqLyxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuLypqc2hpbnQgbm9kZTp0cnVlICovXG4vKlxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG4qL1xuXG5cblxuZnVuY3Rpb24gT3V0cHV0TGluZShwYXJlbnQpIHtcbiAgdGhpcy5fX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IDA7XG4gIC8vIHVzZSBpbmRlbnRfY291bnQgYXMgYSBtYXJrZXIgZm9yIHRoaXMuX19saW5lcyB0aGF0IGhhdmUgcHJlc2VydmVkIGluZGVudGF0aW9uXG4gIHRoaXMuX19pbmRlbnRfY291bnQgPSAtMTtcbiAgdGhpcy5fX2FsaWdubWVudF9jb3VudCA9IDA7XG4gIHRoaXMuX193cmFwX3BvaW50X2luZGV4ID0gMDtcbiAgdGhpcy5fX3dyYXBfcG9pbnRfY2hhcmFjdGVyX2NvdW50ID0gMDtcbiAgdGhpcy5fX3dyYXBfcG9pbnRfaW5kZW50X2NvdW50ID0gLTE7XG4gIHRoaXMuX193cmFwX3BvaW50X2FsaWdubWVudF9jb3VudCA9IDA7XG5cbiAgdGhpcy5fX2l0ZW1zID0gW107XG59XG5cbk91dHB1dExpbmUucHJvdG90eXBlLmNsb25lX2VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBsaW5lID0gbmV3IE91dHB1dExpbmUodGhpcy5fX3BhcmVudCk7XG4gIGxpbmUuc2V0X2luZGVudCh0aGlzLl9faW5kZW50X2NvdW50LCB0aGlzLl9fYWxpZ25tZW50X2NvdW50KTtcbiAgcmV0dXJuIGxpbmU7XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiB0aGlzLl9faXRlbXNbdGhpcy5fX2l0ZW1zLmxlbmd0aCArIGluZGV4XTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZW1zW2luZGV4XTtcbiAgfVxufTtcblxuT3V0cHV0TGluZS5wcm90b3R5cGUuaGFzX21hdGNoID0gZnVuY3Rpb24ocGF0dGVybikge1xuICBmb3IgKHZhciBsYXN0Q2hlY2tlZE91dHB1dCA9IHRoaXMuX19pdGVtcy5sZW5ndGggLSAxOyBsYXN0Q2hlY2tlZE91dHB1dCA+PSAwOyBsYXN0Q2hlY2tlZE91dHB1dC0tKSB7XG4gICAgaWYgKHRoaXMuX19pdGVtc1tsYXN0Q2hlY2tlZE91dHB1dF0ubWF0Y2gocGF0dGVybikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS5zZXRfaW5kZW50ID0gZnVuY3Rpb24oaW5kZW50LCBhbGlnbm1lbnQpIHtcbiAgaWYgKHRoaXMuaXNfZW1wdHkoKSkge1xuICAgIHRoaXMuX19pbmRlbnRfY291bnQgPSBpbmRlbnQgfHwgMDtcbiAgICB0aGlzLl9fYWxpZ25tZW50X2NvdW50ID0gYWxpZ25tZW50IHx8IDA7XG4gICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zaXplKHRoaXMuX19pbmRlbnRfY291bnQsIHRoaXMuX19hbGlnbm1lbnRfY291bnQpO1xuICB9XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS5fc2V0X3dyYXBfcG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX19wYXJlbnQud3JhcF9saW5lX2xlbmd0aCkge1xuICAgIHRoaXMuX193cmFwX3BvaW50X2luZGV4ID0gdGhpcy5fX2l0ZW1zLmxlbmd0aDtcbiAgICB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQgPSB0aGlzLl9fY2hhcmFjdGVyX2NvdW50O1xuICAgIHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCA9IHRoaXMuX19wYXJlbnQubmV4dF9saW5lLl9faW5kZW50X2NvdW50O1xuICAgIHRoaXMuX193cmFwX3BvaW50X2FsaWdubWVudF9jb3VudCA9IHRoaXMuX19wYXJlbnQubmV4dF9saW5lLl9fYWxpZ25tZW50X2NvdW50O1xuICB9XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS5fc2hvdWxkX3dyYXAgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX193cmFwX3BvaW50X2luZGV4ICYmXG4gICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA+IHRoaXMuX19wYXJlbnQud3JhcF9saW5lX2xlbmd0aCAmJlxuICAgIHRoaXMuX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudCA+IHRoaXMuX19wYXJlbnQubmV4dF9saW5lLl9fY2hhcmFjdGVyX2NvdW50O1xufTtcblxuT3V0cHV0TGluZS5wcm90b3R5cGUuX2FsbG93X3dyYXAgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX3Nob3VsZF93cmFwKCkpIHtcbiAgICB0aGlzLl9fcGFyZW50LmFkZF9uZXdfbGluZSgpO1xuICAgIHZhciBuZXh0ID0gdGhpcy5fX3BhcmVudC5jdXJyZW50X2xpbmU7XG4gICAgbmV4dC5zZXRfaW5kZW50KHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCwgdGhpcy5fX3dyYXBfcG9pbnRfYWxpZ25tZW50X2NvdW50KTtcbiAgICBuZXh0Ll9faXRlbXMgPSB0aGlzLl9faXRlbXMuc2xpY2UodGhpcy5fX3dyYXBfcG9pbnRfaW5kZXgpO1xuICAgIHRoaXMuX19pdGVtcyA9IHRoaXMuX19pdGVtcy5zbGljZSgwLCB0aGlzLl9fd3JhcF9wb2ludF9pbmRleCk7XG5cbiAgICBuZXh0Ll9fY2hhcmFjdGVyX2NvdW50ICs9IHRoaXMuX19jaGFyYWN0ZXJfY291bnQgLSB0aGlzLl9fd3JhcF9wb2ludF9jaGFyYWN0ZXJfY291bnQ7XG4gICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCA9IHRoaXMuX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudDtcblxuICAgIGlmIChuZXh0Ll9faXRlbXNbMF0gPT09IFwiIFwiKSB7XG4gICAgICBuZXh0Ll9faXRlbXMuc3BsaWNlKDAsIDEpO1xuICAgICAgbmV4dC5fX2NoYXJhY3Rlcl9jb3VudCAtPSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS5pc19lbXB0eSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX2l0ZW1zLmxlbmd0aCA9PT0gMDtcbn07XG5cbk91dHB1dExpbmUucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZW1zW3RoaXMuX19pdGVtcy5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuT3V0cHV0TGluZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgdGhpcy5fX2l0ZW1zLnB1c2goaXRlbSk7XG4gIHZhciBsYXN0X25ld2xpbmVfaW5kZXggPSBpdGVtLmxhc3RJbmRleE9mKCdcXG4nKTtcbiAgaWYgKGxhc3RfbmV3bGluZV9pbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50ID0gaXRlbS5sZW5ndGggLSBsYXN0X25ld2xpbmVfaW5kZXg7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCArPSBpdGVtLmxlbmd0aDtcbiAgfVxufTtcblxuT3V0cHV0TGluZS5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24oKSB7XG4gIHZhciBpdGVtID0gbnVsbDtcbiAgaWYgKCF0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICBpdGVtID0gdGhpcy5fX2l0ZW1zLnBvcCgpO1xuICAgIHRoaXMuX19jaGFyYWN0ZXJfY291bnQgLT0gaXRlbS5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59O1xuXG5cbk91dHB1dExpbmUucHJvdG90eXBlLl9yZW1vdmVfaW5kZW50ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLl9faW5kZW50X2NvdW50ID4gMCkge1xuICAgIHRoaXMuX19pbmRlbnRfY291bnQgLT0gMTtcbiAgICB0aGlzLl9fY2hhcmFjdGVyX2NvdW50IC09IHRoaXMuX19wYXJlbnQuaW5kZW50X3NpemU7XG4gIH1cbn07XG5cbk91dHB1dExpbmUucHJvdG90eXBlLl9yZW1vdmVfd3JhcF9pbmRlbnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX193cmFwX3BvaW50X2luZGVudF9jb3VudCA+IDApIHtcbiAgICB0aGlzLl9fd3JhcF9wb2ludF9pbmRlbnRfY291bnQgLT0gMTtcbiAgfVxufTtcbk91dHB1dExpbmUucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbigpIHtcbiAgd2hpbGUgKHRoaXMubGFzdCgpID09PSAnICcpIHtcbiAgICB0aGlzLl9faXRlbXMucG9wKCk7XG4gICAgdGhpcy5fX2NoYXJhY3Rlcl9jb3VudCAtPSAxO1xuICB9XG59O1xuXG5PdXRwdXRMaW5lLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGlzLmlzX2VtcHR5KCkpIHtcbiAgICBpZiAodGhpcy5fX3BhcmVudC5pbmRlbnRfZW1wdHlfbGluZXMpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zdHJpbmcodGhpcy5fX2luZGVudF9jb3VudCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRoaXMuX19wYXJlbnQuZ2V0X2luZGVudF9zdHJpbmcodGhpcy5fX2luZGVudF9jb3VudCwgdGhpcy5fX2FsaWdubWVudF9jb3VudCk7XG4gICAgcmVzdWx0ICs9IHRoaXMuX19pdGVtcy5qb2luKCcnKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZnVuY3Rpb24gSW5kZW50U3RyaW5nQ2FjaGUob3B0aW9ucywgYmFzZUluZGVudFN0cmluZykge1xuICB0aGlzLl9fY2FjaGUgPSBbJyddO1xuICB0aGlzLl9faW5kZW50X3NpemUgPSBvcHRpb25zLmluZGVudF9zaXplO1xuICB0aGlzLl9faW5kZW50X3N0cmluZyA9IG9wdGlvbnMuaW5kZW50X2NoYXI7XG4gIGlmICghb3B0aW9ucy5pbmRlbnRfd2l0aF90YWJzKSB7XG4gICAgdGhpcy5fX2luZGVudF9zdHJpbmcgPSBuZXcgQXJyYXkob3B0aW9ucy5pbmRlbnRfc2l6ZSArIDEpLmpvaW4ob3B0aW9ucy5pbmRlbnRfY2hhcik7XG4gIH1cblxuICAvLyBTZXQgdG8gbnVsbCB0byBjb250aW51ZSBzdXBwb3J0IGZvciBhdXRvIGRldGVjdGlvbiBvZiBiYXNlIGluZGVudFxuICBiYXNlSW5kZW50U3RyaW5nID0gYmFzZUluZGVudFN0cmluZyB8fCAnJztcbiAgaWYgKG9wdGlvbnMuaW5kZW50X2xldmVsID4gMCkge1xuICAgIGJhc2VJbmRlbnRTdHJpbmcgPSBuZXcgQXJyYXkob3B0aW9ucy5pbmRlbnRfbGV2ZWwgKyAxKS5qb2luKHRoaXMuX19pbmRlbnRfc3RyaW5nKTtcbiAgfVxuXG4gIHRoaXMuX19iYXNlX3N0cmluZyA9IGJhc2VJbmRlbnRTdHJpbmc7XG4gIHRoaXMuX19iYXNlX3N0cmluZ19sZW5ndGggPSBiYXNlSW5kZW50U3RyaW5nLmxlbmd0aDtcbn1cblxuSW5kZW50U3RyaW5nQ2FjaGUucHJvdG90eXBlLmdldF9pbmRlbnRfc2l6ZSA9IGZ1bmN0aW9uKGluZGVudCwgY29sdW1uKSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLl9fYmFzZV9zdHJpbmdfbGVuZ3RoO1xuICBjb2x1bW4gPSBjb2x1bW4gfHwgMDtcbiAgaWYgKGluZGVudCA8IDApIHtcbiAgICByZXN1bHQgPSAwO1xuICB9XG4gIHJlc3VsdCArPSBpbmRlbnQgKiB0aGlzLl9faW5kZW50X3NpemU7XG4gIHJlc3VsdCArPSBjb2x1bW47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5JbmRlbnRTdHJpbmdDYWNoZS5wcm90b3R5cGUuZ2V0X2luZGVudF9zdHJpbmcgPSBmdW5jdGlvbihpbmRlbnRfbGV2ZWwsIGNvbHVtbikge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5fX2Jhc2Vfc3RyaW5nO1xuICBjb2x1bW4gPSBjb2x1bW4gfHwgMDtcbiAgaWYgKGluZGVudF9sZXZlbCA8IDApIHtcbiAgICBpbmRlbnRfbGV2ZWwgPSAwO1xuICAgIHJlc3VsdCA9ICcnO1xuICB9XG4gIGNvbHVtbiArPSBpbmRlbnRfbGV2ZWwgKiB0aGlzLl9faW5kZW50X3NpemU7XG4gIHRoaXMuX19lbnN1cmVfY2FjaGUoY29sdW1uKTtcbiAgcmVzdWx0ICs9IHRoaXMuX19jYWNoZVtjb2x1bW5dO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuSW5kZW50U3RyaW5nQ2FjaGUucHJvdG90eXBlLl9fZW5zdXJlX2NhY2hlID0gZnVuY3Rpb24oY29sdW1uKSB7XG4gIHdoaWxlIChjb2x1bW4gPj0gdGhpcy5fX2NhY2hlLmxlbmd0aCkge1xuICAgIHRoaXMuX19hZGRfY29sdW1uKCk7XG4gIH1cbn07XG5cbkluZGVudFN0cmluZ0NhY2hlLnByb3RvdHlwZS5fX2FkZF9jb2x1bW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvbHVtbiA9IHRoaXMuX19jYWNoZS5sZW5ndGg7XG4gIHZhciBpbmRlbnQgPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGlzLl9faW5kZW50X3NpemUgJiYgY29sdW1uID49IHRoaXMuX19pbmRlbnRfc2l6ZSkge1xuICAgIGluZGVudCA9IE1hdGguZmxvb3IoY29sdW1uIC8gdGhpcy5fX2luZGVudF9zaXplKTtcbiAgICBjb2x1bW4gLT0gaW5kZW50ICogdGhpcy5fX2luZGVudF9zaXplO1xuICAgIHJlc3VsdCA9IG5ldyBBcnJheShpbmRlbnQgKyAxKS5qb2luKHRoaXMuX19pbmRlbnRfc3RyaW5nKTtcbiAgfVxuICBpZiAoY29sdW1uKSB7XG4gICAgcmVzdWx0ICs9IG5ldyBBcnJheShjb2x1bW4gKyAxKS5qb2luKCcgJyk7XG4gIH1cblxuICB0aGlzLl9fY2FjaGUucHVzaChyZXN1bHQpO1xufTtcblxuZnVuY3Rpb24gT3V0cHV0KG9wdGlvbnMsIGJhc2VJbmRlbnRTdHJpbmcpIHtcbiAgdGhpcy5fX2luZGVudF9jYWNoZSA9IG5ldyBJbmRlbnRTdHJpbmdDYWNoZShvcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKTtcbiAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgdGhpcy5fZW5kX3dpdGhfbmV3bGluZSA9IG9wdGlvbnMuZW5kX3dpdGhfbmV3bGluZTtcbiAgdGhpcy5pbmRlbnRfc2l6ZSA9IG9wdGlvbnMuaW5kZW50X3NpemU7XG4gIHRoaXMud3JhcF9saW5lX2xlbmd0aCA9IG9wdGlvbnMud3JhcF9saW5lX2xlbmd0aDtcbiAgdGhpcy5pbmRlbnRfZW1wdHlfbGluZXMgPSBvcHRpb25zLmluZGVudF9lbXB0eV9saW5lcztcbiAgdGhpcy5fX2xpbmVzID0gW107XG4gIHRoaXMucHJldmlvdXNfbGluZSA9IG51bGw7XG4gIHRoaXMuY3VycmVudF9saW5lID0gbnVsbDtcbiAgdGhpcy5uZXh0X2xpbmUgPSBuZXcgT3V0cHV0TGluZSh0aGlzKTtcbiAgdGhpcy5zcGFjZV9iZWZvcmVfdG9rZW4gPSBmYWxzZTtcbiAgdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UgPSBmYWxzZTtcbiAgdGhpcy5wcmV2aW91c190b2tlbl93cmFwcGVkID0gZmFsc2U7XG4gIC8vIGluaXRpYWxpemVcbiAgdGhpcy5fX2FkZF9vdXRwdXRsaW5lKCk7XG59XG5cbk91dHB1dC5wcm90b3R5cGUuX19hZGRfb3V0cHV0bGluZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnByZXZpb3VzX2xpbmUgPSB0aGlzLmN1cnJlbnRfbGluZTtcbiAgdGhpcy5jdXJyZW50X2xpbmUgPSB0aGlzLm5leHRfbGluZS5jbG9uZV9lbXB0eSgpO1xuICB0aGlzLl9fbGluZXMucHVzaCh0aGlzLmN1cnJlbnRfbGluZSk7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmdldF9saW5lX251bWJlciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fX2xpbmVzLmxlbmd0aDtcbn07XG5cbk91dHB1dC5wcm90b3R5cGUuZ2V0X2luZGVudF9zdHJpbmcgPSBmdW5jdGlvbihpbmRlbnQsIGNvbHVtbikge1xuICByZXR1cm4gdGhpcy5fX2luZGVudF9jYWNoZS5nZXRfaW5kZW50X3N0cmluZyhpbmRlbnQsIGNvbHVtbik7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmdldF9pbmRlbnRfc2l6ZSA9IGZ1bmN0aW9uKGluZGVudCwgY29sdW1uKSB7XG4gIHJldHVybiB0aGlzLl9faW5kZW50X2NhY2hlLmdldF9pbmRlbnRfc2l6ZShpbmRlbnQsIGNvbHVtbik7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmlzX2VtcHR5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5wcmV2aW91c19saW5lICYmIHRoaXMuY3VycmVudF9saW5lLmlzX2VtcHR5KCk7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmFkZF9uZXdfbGluZSA9IGZ1bmN0aW9uKGZvcmNlX25ld2xpbmUpIHtcbiAgLy8gbmV2ZXIgbmV3bGluZSBhdCB0aGUgc3RhcnQgb2YgZmlsZVxuICAvLyBvdGhlcndpc2UsIG5ld2xpbmUgb25seSBpZiB3ZSBkaWRuJ3QganVzdCBhZGQgb25lIG9yIHdlJ3JlIGZvcmNlZFxuICBpZiAodGhpcy5pc19lbXB0eSgpIHx8XG4gICAgKCFmb3JjZV9uZXdsaW5lICYmIHRoaXMuanVzdF9hZGRlZF9uZXdsaW5lKCkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaWYgcmF3IG91dHB1dCBpcyBlbmFibGVkLCBkb24ndCBwcmludCBhZGRpdGlvbmFsIG5ld2xpbmVzLFxuICAvLyBidXQgc3RpbGwgcmV0dXJuIFRydWUgYXMgdGhvdWdoIHlvdSBoYWRcbiAgaWYgKCF0aGlzLnJhdykge1xuICAgIHRoaXMuX19hZGRfb3V0cHV0bGluZSgpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuT3V0cHV0LnByb3RvdHlwZS5nZXRfY29kZSA9IGZ1bmN0aW9uKGVvbCkge1xuICB0aGlzLnRyaW0odHJ1ZSk7XG5cbiAgLy8gaGFuZGxlIHNvbWUgZWRnZSBjYXNlcyB3aGVyZSB0aGUgbGFzdCB0b2tlbnNcbiAgLy8gaGFzIHRleHQgdGhhdCBlbmRzIHdpdGggbmV3bGluZShzKVxuICB2YXIgbGFzdF9pdGVtID0gdGhpcy5jdXJyZW50X2xpbmUucG9wKCk7XG4gIGlmIChsYXN0X2l0ZW0pIHtcbiAgICBpZiAobGFzdF9pdGVtW2xhc3RfaXRlbS5sZW5ndGggLSAxXSA9PT0gJ1xcbicpIHtcbiAgICAgIGxhc3RfaXRlbSA9IGxhc3RfaXRlbS5yZXBsYWNlKC9cXG4rJC9nLCAnJyk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudF9saW5lLnB1c2gobGFzdF9pdGVtKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9lbmRfd2l0aF9uZXdsaW5lKSB7XG4gICAgdGhpcy5fX2FkZF9vdXRwdXRsaW5lKCk7XG4gIH1cblxuICB2YXIgc3dlZXRfY29kZSA9IHRoaXMuX19saW5lcy5qb2luKCdcXG4nKTtcblxuICBpZiAoZW9sICE9PSAnXFxuJykge1xuICAgIHN3ZWV0X2NvZGUgPSBzd2VldF9jb2RlLnJlcGxhY2UoL1tcXG5dL2csIGVvbCk7XG4gIH1cbiAgcmV0dXJuIHN3ZWV0X2NvZGU7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLnNldF93cmFwX3BvaW50ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY3VycmVudF9saW5lLl9zZXRfd3JhcF9wb2ludCgpO1xufTtcblxuT3V0cHV0LnByb3RvdHlwZS5zZXRfaW5kZW50ID0gZnVuY3Rpb24oaW5kZW50LCBhbGlnbm1lbnQpIHtcbiAgaW5kZW50ID0gaW5kZW50IHx8IDA7XG4gIGFsaWdubWVudCA9IGFsaWdubWVudCB8fCAwO1xuXG4gIC8vIE5leHQgbGluZSBzdG9yZXMgYWxpZ25tZW50IHZhbHVlc1xuICB0aGlzLm5leHRfbGluZS5zZXRfaW5kZW50KGluZGVudCwgYWxpZ25tZW50KTtcblxuICAvLyBOZXZlciBpbmRlbnQgeW91ciBmaXJzdCBvdXRwdXQgaW5kZW50IGF0IHRoZSBzdGFydCBvZiB0aGUgZmlsZVxuICBpZiAodGhpcy5fX2xpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICB0aGlzLmN1cnJlbnRfbGluZS5zZXRfaW5kZW50KGluZGVudCwgYWxpZ25tZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRoaXMuY3VycmVudF9saW5lLnNldF9pbmRlbnQoKTtcbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuT3V0cHV0LnByb3RvdHlwZS5hZGRfcmF3X3Rva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgZm9yICh2YXIgeCA9IDA7IHggPCB0b2tlbi5uZXdsaW5lczsgeCsrKSB7XG4gICAgdGhpcy5fX2FkZF9vdXRwdXRsaW5lKCk7XG4gIH1cbiAgdGhpcy5jdXJyZW50X2xpbmUuc2V0X2luZGVudCgtMSk7XG4gIHRoaXMuY3VycmVudF9saW5lLnB1c2godG9rZW4ud2hpdGVzcGFjZV9iZWZvcmUpO1xuICB0aGlzLmN1cnJlbnRfbGluZS5wdXNoKHRva2VuLnRleHQpO1xuICB0aGlzLnNwYWNlX2JlZm9yZV90b2tlbiA9IGZhbHNlO1xuICB0aGlzLm5vbl9icmVha2luZ19zcGFjZSA9IGZhbHNlO1xuICB0aGlzLnByZXZpb3VzX3Rva2VuX3dyYXBwZWQgPSBmYWxzZTtcbn07XG5cbk91dHB1dC5wcm90b3R5cGUuYWRkX3Rva2VuID0gZnVuY3Rpb24ocHJpbnRhYmxlX3Rva2VuKSB7XG4gIHRoaXMuX19hZGRfc3BhY2VfYmVmb3JlX3Rva2VuKCk7XG4gIHRoaXMuY3VycmVudF9saW5lLnB1c2gocHJpbnRhYmxlX3Rva2VuKTtcbiAgdGhpcy5zcGFjZV9iZWZvcmVfdG9rZW4gPSBmYWxzZTtcbiAgdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UgPSBmYWxzZTtcbiAgdGhpcy5wcmV2aW91c190b2tlbl93cmFwcGVkID0gdGhpcy5jdXJyZW50X2xpbmUuX2FsbG93X3dyYXAoKTtcbn07XG5cbk91dHB1dC5wcm90b3R5cGUuX19hZGRfc3BhY2VfYmVmb3JlX3Rva2VuID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnNwYWNlX2JlZm9yZV90b2tlbiAmJiAhdGhpcy5qdXN0X2FkZGVkX25ld2xpbmUoKSkge1xuICAgIGlmICghdGhpcy5ub25fYnJlYWtpbmdfc3BhY2UpIHtcbiAgICAgIHRoaXMuc2V0X3dyYXBfcG9pbnQoKTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50X2xpbmUucHVzaCgnICcpO1xuICB9XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLnJlbW92ZV9pbmRlbnQgPSBmdW5jdGlvbihpbmRleCkge1xuICB2YXIgb3V0cHV0X2xlbmd0aCA9IHRoaXMuX19saW5lcy5sZW5ndGg7XG4gIHdoaWxlIChpbmRleCA8IG91dHB1dF9sZW5ndGgpIHtcbiAgICB0aGlzLl9fbGluZXNbaW5kZXhdLl9yZW1vdmVfaW5kZW50KCk7XG4gICAgaW5kZXgrKztcbiAgfVxuICB0aGlzLmN1cnJlbnRfbGluZS5fcmVtb3ZlX3dyYXBfaW5kZW50KCk7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLnRyaW0gPSBmdW5jdGlvbihlYXRfbmV3bGluZXMpIHtcbiAgZWF0X25ld2xpbmVzID0gKGVhdF9uZXdsaW5lcyA9PT0gdW5kZWZpbmVkKSA/IGZhbHNlIDogZWF0X25ld2xpbmVzO1xuXG4gIHRoaXMuY3VycmVudF9saW5lLnRyaW0oKTtcblxuICB3aGlsZSAoZWF0X25ld2xpbmVzICYmIHRoaXMuX19saW5lcy5sZW5ndGggPiAxICYmXG4gICAgdGhpcy5jdXJyZW50X2xpbmUuaXNfZW1wdHkoKSkge1xuICAgIHRoaXMuX19saW5lcy5wb3AoKTtcbiAgICB0aGlzLmN1cnJlbnRfbGluZSA9IHRoaXMuX19saW5lc1t0aGlzLl9fbGluZXMubGVuZ3RoIC0gMV07XG4gICAgdGhpcy5jdXJyZW50X2xpbmUudHJpbSgpO1xuICB9XG5cbiAgdGhpcy5wcmV2aW91c19saW5lID0gdGhpcy5fX2xpbmVzLmxlbmd0aCA+IDEgP1xuICAgIHRoaXMuX19saW5lc1t0aGlzLl9fbGluZXMubGVuZ3RoIC0gMl0gOiBudWxsO1xufTtcblxuT3V0cHV0LnByb3RvdHlwZS5qdXN0X2FkZGVkX25ld2xpbmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY3VycmVudF9saW5lLmlzX2VtcHR5KCk7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmp1c3RfYWRkZWRfYmxhbmtsaW5lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmlzX2VtcHR5KCkgfHxcbiAgICAodGhpcy5jdXJyZW50X2xpbmUuaXNfZW1wdHkoKSAmJiB0aGlzLnByZXZpb3VzX2xpbmUuaXNfZW1wdHkoKSk7XG59O1xuXG5PdXRwdXQucHJvdG90eXBlLmVuc3VyZV9lbXB0eV9saW5lX2Fib3ZlID0gZnVuY3Rpb24oc3RhcnRzX3dpdGgsIGVuZHNfd2l0aCkge1xuICB2YXIgaW5kZXggPSB0aGlzLl9fbGluZXMubGVuZ3RoIC0gMjtcbiAgd2hpbGUgKGluZGV4ID49IDApIHtcbiAgICB2YXIgcG90ZW50aWFsRW1wdHlMaW5lID0gdGhpcy5fX2xpbmVzW2luZGV4XTtcbiAgICBpZiAocG90ZW50aWFsRW1wdHlMaW5lLmlzX2VtcHR5KCkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAocG90ZW50aWFsRW1wdHlMaW5lLml0ZW0oMCkuaW5kZXhPZihzdGFydHNfd2l0aCkgIT09IDAgJiZcbiAgICAgIHBvdGVudGlhbEVtcHR5TGluZS5pdGVtKC0xKSAhPT0gZW5kc193aXRoKSB7XG4gICAgICB0aGlzLl9fbGluZXMuc3BsaWNlKGluZGV4ICsgMSwgMCwgbmV3IE91dHB1dExpbmUodGhpcykpO1xuICAgICAgdGhpcy5wcmV2aW91c19saW5lID0gdGhpcy5fX2xpbmVzW3RoaXMuX19saW5lcy5sZW5ndGggLSAyXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleC0tO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5PdXRwdXQgPSBPdXRwdXQ7XG5cblxuLyoqKi8gfSksXG4vKiAzICovLFxuLyogNCAqLyxcbi8qIDUgKi8sXG4vKiA2ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbi8qanNoaW50IG5vZGU6dHJ1ZSAqL1xuLypcblxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG4qL1xuXG5cblxuZnVuY3Rpb24gT3B0aW9ucyhvcHRpb25zLCBtZXJnZV9jaGlsZF9maWVsZCkge1xuICB0aGlzLnJhd19vcHRpb25zID0gX21lcmdlT3B0cyhvcHRpb25zLCBtZXJnZV9jaGlsZF9maWVsZCk7XG5cbiAgLy8gU3VwcG9ydCBwYXNzaW5nIHRoZSBzb3VyY2UgdGV4dCBiYWNrIHdpdGggbm8gY2hhbmdlXG4gIHRoaXMuZGlzYWJsZWQgPSB0aGlzLl9nZXRfYm9vbGVhbignZGlzYWJsZWQnKTtcblxuICB0aGlzLmVvbCA9IHRoaXMuX2dldF9jaGFyYWN0ZXJzKCdlb2wnLCAnYXV0bycpO1xuICB0aGlzLmVuZF93aXRoX25ld2xpbmUgPSB0aGlzLl9nZXRfYm9vbGVhbignZW5kX3dpdGhfbmV3bGluZScpO1xuICB0aGlzLmluZGVudF9zaXplID0gdGhpcy5fZ2V0X251bWJlcignaW5kZW50X3NpemUnLCA0KTtcbiAgdGhpcy5pbmRlbnRfY2hhciA9IHRoaXMuX2dldF9jaGFyYWN0ZXJzKCdpbmRlbnRfY2hhcicsICcgJyk7XG4gIHRoaXMuaW5kZW50X2xldmVsID0gdGhpcy5fZ2V0X251bWJlcignaW5kZW50X2xldmVsJyk7XG5cbiAgdGhpcy5wcmVzZXJ2ZV9uZXdsaW5lcyA9IHRoaXMuX2dldF9ib29sZWFuKCdwcmVzZXJ2ZV9uZXdsaW5lcycsIHRydWUpO1xuICB0aGlzLm1heF9wcmVzZXJ2ZV9uZXdsaW5lcyA9IHRoaXMuX2dldF9udW1iZXIoJ21heF9wcmVzZXJ2ZV9uZXdsaW5lcycsIDMyNzg2KTtcbiAgaWYgKCF0aGlzLnByZXNlcnZlX25ld2xpbmVzKSB7XG4gICAgdGhpcy5tYXhfcHJlc2VydmVfbmV3bGluZXMgPSAwO1xuICB9XG5cbiAgdGhpcy5pbmRlbnRfd2l0aF90YWJzID0gdGhpcy5fZ2V0X2Jvb2xlYW4oJ2luZGVudF93aXRoX3RhYnMnLCB0aGlzLmluZGVudF9jaGFyID09PSAnXFx0Jyk7XG4gIGlmICh0aGlzLmluZGVudF93aXRoX3RhYnMpIHtcbiAgICB0aGlzLmluZGVudF9jaGFyID0gJ1xcdCc7XG5cbiAgICAvLyBpbmRlbnRfc2l6ZSBiZWhhdmlvciBjaGFuZ2VkIGFmdGVyIDEuOC42XG4gICAgLy8gSXQgdXNlZCB0byBiZSB0aGF0IGluZGVudF9zaXplIHdvdWxkIGJlXG4gICAgLy8gc2V0IHRvIDEgZm9yIGluZGVudF93aXRoX3RhYnMuIFRoYXQgaXMgbm8gbG9uZ2VyIG5lZWRlZCBhbmRcbiAgICAvLyBhY3R1YWxseSBkb2Vzbid0IG1ha2Ugc2Vuc2UgLSB3aHkgbm90IHVzZSBzcGFjZXM/IEZ1cnRoZXIsXG4gICAgLy8gdGhhdCBtaWdodCBwcm9kdWNlIHVuZXhwZWN0ZWQgYmVoYXZpb3IgLSB0YWJzIGJlaW5nIHVzZWRcbiAgICAvLyBmb3Igc2luZ2xlLWNvbHVtbiBhbGlnbm1lbnQuIFNvLCB3aGVuIGluZGVudF93aXRoX3RhYnMgaXMgdHJ1ZVxuICAgIC8vIGFuZCBpbmRlbnRfc2l6ZSBpcyAxLCByZXNldCBpbmRlbnRfc2l6ZSB0byA0LlxuICAgIGlmICh0aGlzLmluZGVudF9zaXplID09PSAxKSB7XG4gICAgICB0aGlzLmluZGVudF9zaXplID0gNDtcbiAgICB9XG4gIH1cblxuICAvLyBCYWNrd2FyZHMgY29tcGF0IHdpdGggMS4zLnhcbiAgdGhpcy53cmFwX2xpbmVfbGVuZ3RoID0gdGhpcy5fZ2V0X251bWJlcignd3JhcF9saW5lX2xlbmd0aCcsIHRoaXMuX2dldF9udW1iZXIoJ21heF9jaGFyJykpO1xuXG4gIHRoaXMuaW5kZW50X2VtcHR5X2xpbmVzID0gdGhpcy5fZ2V0X2Jvb2xlYW4oJ2luZGVudF9lbXB0eV9saW5lcycpO1xuXG4gIC8vIHZhbGlkIHRlbXBsYXRpbmcgbGFuZ3VhZ2VzIFsnZGphbmdvJywgJ2VyYicsICdoYW5kbGViYXJzJywgJ3BocCcsICdzbWFydHknXVxuICAvLyBGb3Igbm93LCAnYXV0bycgPSBhbGwgb2ZmIGZvciBqYXZhc2NyaXB0LCBhbGwgb24gZm9yIGh0bWwgKGFuZCBpbmxpbmUgamF2YXNjcmlwdCkuXG4gIC8vIG90aGVyIHZhbHVlcyBpZ25vcmVkXG4gIHRoaXMudGVtcGxhdGluZyA9IHRoaXMuX2dldF9zZWxlY3Rpb25fbGlzdCgndGVtcGxhdGluZycsIFsnYXV0bycsICdub25lJywgJ2RqYW5nbycsICdlcmInLCAnaGFuZGxlYmFycycsICdwaHAnLCAnc21hcnR5J10sIFsnYXV0byddKTtcbn1cblxuT3B0aW9ucy5wcm90b3R5cGUuX2dldF9hcnJheSA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gIHZhciByZXN1bHQgPSBkZWZhdWx0X3ZhbHVlIHx8IFtdO1xuICBpZiAodHlwZW9mIG9wdGlvbl92YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAob3B0aW9uX3ZhbHVlICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb25fdmFsdWUuY29uY2F0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXN1bHQgPSBvcHRpb25fdmFsdWUuY29uY2F0KCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25fdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gb3B0aW9uX3ZhbHVlLnNwbGl0KC9bXmEtekEtWjAtOV9cXC9cXC1dKy8pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5PcHRpb25zLnByb3RvdHlwZS5fZ2V0X2Jvb2xlYW4gPSBmdW5jdGlvbihuYW1lLCBkZWZhdWx0X3ZhbHVlKSB7XG4gIHZhciBvcHRpb25fdmFsdWUgPSB0aGlzLnJhd19vcHRpb25zW25hbWVdO1xuICB2YXIgcmVzdWx0ID0gb3B0aW9uX3ZhbHVlID09PSB1bmRlZmluZWQgPyAhIWRlZmF1bHRfdmFsdWUgOiAhIW9wdGlvbl92YWx1ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk9wdGlvbnMucHJvdG90eXBlLl9nZXRfY2hhcmFjdGVycyA9IGZ1bmN0aW9uKG5hbWUsIGRlZmF1bHRfdmFsdWUpIHtcbiAgdmFyIG9wdGlvbl92YWx1ZSA9IHRoaXMucmF3X29wdGlvbnNbbmFtZV07XG4gIHZhciByZXN1bHQgPSBkZWZhdWx0X3ZhbHVlIHx8ICcnO1xuICBpZiAodHlwZW9mIG9wdGlvbl92YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBvcHRpb25fdmFsdWUucmVwbGFjZSgvXFxcXHIvLCAnXFxyJykucmVwbGFjZSgvXFxcXG4vLCAnXFxuJykucmVwbGFjZSgvXFxcXHQvLCAnXFx0Jyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk9wdGlvbnMucHJvdG90eXBlLl9nZXRfbnVtYmVyID0gZnVuY3Rpb24obmFtZSwgZGVmYXVsdF92YWx1ZSkge1xuICB2YXIgb3B0aW9uX3ZhbHVlID0gdGhpcy5yYXdfb3B0aW9uc1tuYW1lXTtcbiAgZGVmYXVsdF92YWx1ZSA9IHBhcnNlSW50KGRlZmF1bHRfdmFsdWUsIDEwKTtcbiAgaWYgKGlzTmFOKGRlZmF1bHRfdmFsdWUpKSB7XG4gICAgZGVmYXVsdF92YWx1ZSA9IDA7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KG9wdGlvbl92YWx1ZSwgMTApO1xuICBpZiAoaXNOYU4ocmVzdWx0KSkge1xuICAgIHJlc3VsdCA9IGRlZmF1bHRfdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk9wdGlvbnMucHJvdG90eXBlLl9nZXRfc2VsZWN0aW9uID0gZnVuY3Rpb24obmFtZSwgc2VsZWN0aW9uX2xpc3QsIGRlZmF1bHRfdmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2dldF9zZWxlY3Rpb25fbGlzdChuYW1lLCBzZWxlY3Rpb25fbGlzdCwgZGVmYXVsdF92YWx1ZSk7XG4gIGlmIChyZXN1bHQubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJJbnZhbGlkIE9wdGlvbiBWYWx1ZTogVGhlIG9wdGlvbiAnXCIgKyBuYW1lICsgXCInIGNhbiBvbmx5IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cIiArXG4gICAgICBzZWxlY3Rpb25fbGlzdCArIFwiXFxuWW91IHBhc3NlZCBpbjogJ1wiICsgdGhpcy5yYXdfb3B0aW9uc1tuYW1lXSArIFwiJ1wiKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHRbMF07XG59O1xuXG5cbk9wdGlvbnMucHJvdG90eXBlLl9nZXRfc2VsZWN0aW9uX2xpc3QgPSBmdW5jdGlvbihuYW1lLCBzZWxlY3Rpb25fbGlzdCwgZGVmYXVsdF92YWx1ZSkge1xuICBpZiAoIXNlbGVjdGlvbl9saXN0IHx8IHNlbGVjdGlvbl9saXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNlbGVjdGlvbiBsaXN0IGNhbm5vdCBiZSBlbXB0eS5cIik7XG4gIH1cblxuICBkZWZhdWx0X3ZhbHVlID0gZGVmYXVsdF92YWx1ZSB8fCBbc2VsZWN0aW9uX2xpc3RbMF1dO1xuICBpZiAoIXRoaXMuX2lzX3ZhbGlkX3NlbGVjdGlvbihkZWZhdWx0X3ZhbHVlLCBzZWxlY3Rpb25fbGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERlZmF1bHQgVmFsdWUhXCIpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2dldF9hcnJheShuYW1lLCBkZWZhdWx0X3ZhbHVlKTtcbiAgaWYgKCF0aGlzLl9pc192YWxpZF9zZWxlY3Rpb24ocmVzdWx0LCBzZWxlY3Rpb25fbGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkludmFsaWQgT3B0aW9uIFZhbHVlOiBUaGUgb3B0aW9uICdcIiArIG5hbWUgKyBcIicgY2FuIGNvbnRhaW4gb25seSB0aGUgZm9sbG93aW5nIHZhbHVlczpcXG5cIiArXG4gICAgICBzZWxlY3Rpb25fbGlzdCArIFwiXFxuWW91IHBhc3NlZCBpbjogJ1wiICsgdGhpcy5yYXdfb3B0aW9uc1tuYW1lXSArIFwiJ1wiKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5PcHRpb25zLnByb3RvdHlwZS5faXNfdmFsaWRfc2VsZWN0aW9uID0gZnVuY3Rpb24ocmVzdWx0LCBzZWxlY3Rpb25fbGlzdCkge1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAmJiBzZWxlY3Rpb25fbGlzdC5sZW5ndGggJiZcbiAgICAhcmVzdWx0LnNvbWUoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gc2VsZWN0aW9uX2xpc3QuaW5kZXhPZihpdGVtKSA9PT0gLTE7IH0pO1xufTtcblxuXG4vLyBtZXJnZXMgY2hpbGQgb3B0aW9ucyB1cCB3aXRoIHRoZSBwYXJlbnQgb3B0aW9ucyBvYmplY3Rcbi8vIEV4YW1wbGU6IG9iaiA9IHthOiAxLCBiOiB7YTogMn19XG4vLyAgICAgICAgICBtZXJnZU9wdHMob2JqLCAnYicpXG4vL1xuLy8gICAgICAgICAgUmV0dXJuczoge2E6IDJ9XG5mdW5jdGlvbiBfbWVyZ2VPcHRzKGFsbE9wdGlvbnMsIGNoaWxkRmllbGROYW1lKSB7XG4gIHZhciBmaW5hbE9wdHMgPSB7fTtcbiAgYWxsT3B0aW9ucyA9IF9ub3JtYWxpemVPcHRzKGFsbE9wdGlvbnMpO1xuICB2YXIgbmFtZTtcblxuICBmb3IgKG5hbWUgaW4gYWxsT3B0aW9ucykge1xuICAgIGlmIChuYW1lICE9PSBjaGlsZEZpZWxkTmFtZSkge1xuICAgICAgZmluYWxPcHRzW25hbWVdID0gYWxsT3B0aW9uc1tuYW1lXTtcbiAgICB9XG4gIH1cblxuICAvL21lcmdlIGluIHRoZSBwZXIgdHlwZSBzZXR0aW5ncyBmb3IgdGhlIGNoaWxkRmllbGROYW1lXG4gIGlmIChjaGlsZEZpZWxkTmFtZSAmJiBhbGxPcHRpb25zW2NoaWxkRmllbGROYW1lXSkge1xuICAgIGZvciAobmFtZSBpbiBhbGxPcHRpb25zW2NoaWxkRmllbGROYW1lXSkge1xuICAgICAgZmluYWxPcHRzW25hbWVdID0gYWxsT3B0aW9uc1tjaGlsZEZpZWxkTmFtZV1bbmFtZV07XG4gICAgfVxuICB9XG4gIHJldHVybiBmaW5hbE9wdHM7XG59XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVPcHRzKG9wdGlvbnMpIHtcbiAgdmFyIGNvbnZlcnRlZE9wdHMgPSB7fTtcbiAgdmFyIGtleTtcblxuICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgdmFyIG5ld0tleSA9IGtleS5yZXBsYWNlKC8tL2csIFwiX1wiKTtcbiAgICBjb252ZXJ0ZWRPcHRzW25ld0tleV0gPSBvcHRpb25zW2tleV07XG4gIH1cbiAgcmV0dXJuIGNvbnZlcnRlZE9wdHM7XG59XG5cbm1vZHVsZS5leHBvcnRzLk9wdGlvbnMgPSBPcHRpb25zO1xubW9kdWxlLmV4cG9ydHMubm9ybWFsaXplT3B0cyA9IF9ub3JtYWxpemVPcHRzO1xubW9kdWxlLmV4cG9ydHMubWVyZ2VPcHRzID0gX21lcmdlT3B0cztcblxuXG4vKioqLyB9KSxcbi8qIDcgKi8sXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlKSB7XG5cbi8qanNoaW50IG5vZGU6dHJ1ZSAqL1xuLypcblxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG4qL1xuXG5cblxudmFyIHJlZ2V4cF9oYXNfc3RpY2t5ID0gUmVnRXhwLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnc3RpY2t5Jyk7XG5cbmZ1bmN0aW9uIElucHV0U2Nhbm5lcihpbnB1dF9zdHJpbmcpIHtcbiAgdGhpcy5fX2lucHV0ID0gaW5wdXRfc3RyaW5nIHx8ICcnO1xuICB0aGlzLl9faW5wdXRfbGVuZ3RoID0gdGhpcy5fX2lucHV0Lmxlbmd0aDtcbiAgdGhpcy5fX3Bvc2l0aW9uID0gMDtcbn1cblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX19wb3NpdGlvbiA9IDA7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX19wb3NpdGlvbiA+IDApIHtcbiAgICB0aGlzLl9fcG9zaXRpb24gLT0gMTtcbiAgfVxufTtcblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9fcG9zaXRpb24gPCB0aGlzLl9faW5wdXRfbGVuZ3RoO1xufTtcblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB2YWwgPSBudWxsO1xuICBpZiAodGhpcy5oYXNOZXh0KCkpIHtcbiAgICB2YWwgPSB0aGlzLl9faW5wdXQuY2hhckF0KHRoaXMuX19wb3NpdGlvbik7XG4gICAgdGhpcy5fX3Bvc2l0aW9uICs9IDE7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG5cbklucHV0U2Nhbm5lci5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gIHZhciB2YWwgPSBudWxsO1xuICBpbmRleCA9IGluZGV4IHx8IDA7XG4gIGluZGV4ICs9IHRoaXMuX19wb3NpdGlvbjtcbiAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9faW5wdXRfbGVuZ3RoKSB7XG4gICAgdmFsID0gdGhpcy5fX2lucHV0LmNoYXJBdChpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgYSBKYXZhU2NyaXB0IG9ubHkgaGVscGVyIGZ1bmN0aW9uIChub3QgaW4gcHl0aG9uKVxuLy8gSmF2YXNjcmlwdCBkb2Vzbid0IGhhdmUgYSBtYXRjaCBtZXRob2Rcbi8vIGFuZCBub3QgYWxsIGltcGxlbWVudGF0aW9uIHN1cHBvcnQgXCJzdGlja3lcIiBmbGFnLlxuLy8gSWYgdGhleSBkbyBub3Qgc3VwcG9ydCBzdGlja3kgdGhlbiBib3RoIHRoaXMubWF0Y2goKSBhbmQgdGhpcy50ZXN0KCkgbWV0aG9kXG4vLyBtdXN0IGdldCB0aGUgbWF0Y2ggYW5kIGNoZWNrIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2guXG4vLyBJZiBzdGlja3kgaXMgc3VwcG9ydGVkIGFuZCBzZXQsIHRoaXMgbWV0aG9kIHdpbGwgdXNlIGl0LlxuLy8gT3RoZXJ3aXNlIGl0IHdpbGwgY2hlY2sgdGhhdCBnbG9iYWwgaXMgc2V0LCBhbmQgZmFsbCBiYWNrIHRvIHRoZSBzbG93ZXIgbWV0aG9kLlxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5fX21hdGNoID0gZnVuY3Rpb24ocGF0dGVybiwgaW5kZXgpIHtcbiAgcGF0dGVybi5sYXN0SW5kZXggPSBpbmRleDtcbiAgdmFyIHBhdHRlcm5fbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGhpcy5fX2lucHV0KTtcblxuICBpZiAocGF0dGVybl9tYXRjaCAmJiAhKHJlZ2V4cF9oYXNfc3RpY2t5ICYmIHBhdHRlcm4uc3RpY2t5KSkge1xuICAgIGlmIChwYXR0ZXJuX21hdGNoLmluZGV4ICE9PSBpbmRleCkge1xuICAgICAgcGF0dGVybl9tYXRjaCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhdHRlcm5fbWF0Y2g7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbihwYXR0ZXJuLCBpbmRleCkge1xuICBpbmRleCA9IGluZGV4IHx8IDA7XG4gIGluZGV4ICs9IHRoaXMuX19wb3NpdGlvbjtcblxuICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX19pbnB1dF9sZW5ndGgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9fbWF0Y2gocGF0dGVybiwgaW5kZXgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS50ZXN0Q2hhciA9IGZ1bmN0aW9uKHBhdHRlcm4sIGluZGV4KSB7XG4gIC8vIHRlc3Qgb25lIGNoYXJhY3RlciByZWdleCBtYXRjaFxuICB2YXIgdmFsID0gdGhpcy5wZWVrKGluZGV4KTtcbiAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHBhdHRlcm4udGVzdCh2YWwpO1xufTtcblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5tYXRjaCA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcbiAgdmFyIHBhdHRlcm5fbWF0Y2ggPSB0aGlzLl9fbWF0Y2gocGF0dGVybiwgdGhpcy5fX3Bvc2l0aW9uKTtcbiAgaWYgKHBhdHRlcm5fbWF0Y2gpIHtcbiAgICB0aGlzLl9fcG9zaXRpb24gKz0gcGF0dGVybl9tYXRjaFswXS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcGF0dGVybl9tYXRjaCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdHRlcm5fbWF0Y2g7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbihzdGFydGluZ19wYXR0ZXJuLCB1bnRpbF9wYXR0ZXJuLCB1bnRpbF9hZnRlcikge1xuICB2YXIgdmFsID0gJyc7XG4gIHZhciBtYXRjaDtcbiAgaWYgKHN0YXJ0aW5nX3BhdHRlcm4pIHtcbiAgICBtYXRjaCA9IHRoaXMubWF0Y2goc3RhcnRpbmdfcGF0dGVybik7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YWwgKz0gbWF0Y2hbMF07XG4gICAgfVxuICB9XG4gIGlmICh1bnRpbF9wYXR0ZXJuICYmIChtYXRjaCB8fCAhc3RhcnRpbmdfcGF0dGVybikpIHtcbiAgICB2YWwgKz0gdGhpcy5yZWFkVW50aWwodW50aWxfcGF0dGVybiwgdW50aWxfYWZ0ZXIpO1xuICB9XG4gIHJldHVybiB2YWw7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLnJlYWRVbnRpbCA9IGZ1bmN0aW9uKHBhdHRlcm4sIHVudGlsX2FmdGVyKSB7XG4gIHZhciB2YWwgPSAnJztcbiAgdmFyIG1hdGNoX2luZGV4ID0gdGhpcy5fX3Bvc2l0aW9uO1xuICBwYXR0ZXJuLmxhc3RJbmRleCA9IHRoaXMuX19wb3NpdGlvbjtcbiAgdmFyIHBhdHRlcm5fbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGhpcy5fX2lucHV0KTtcbiAgaWYgKHBhdHRlcm5fbWF0Y2gpIHtcbiAgICBtYXRjaF9pbmRleCA9IHBhdHRlcm5fbWF0Y2guaW5kZXg7XG4gICAgaWYgKHVudGlsX2FmdGVyKSB7XG4gICAgICBtYXRjaF9pbmRleCArPSBwYXR0ZXJuX21hdGNoWzBdLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWF0Y2hfaW5kZXggPSB0aGlzLl9faW5wdXRfbGVuZ3RoO1xuICB9XG5cbiAgdmFsID0gdGhpcy5fX2lucHV0LnN1YnN0cmluZyh0aGlzLl9fcG9zaXRpb24sIG1hdGNoX2luZGV4KTtcbiAgdGhpcy5fX3Bvc2l0aW9uID0gbWF0Y2hfaW5kZXg7XG4gIHJldHVybiB2YWw7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLnJlYWRVbnRpbEFmdGVyID0gZnVuY3Rpb24ocGF0dGVybikge1xuICByZXR1cm4gdGhpcy5yZWFkVW50aWwocGF0dGVybiwgdHJ1ZSk7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLmdldF9yZWdleHAgPSBmdW5jdGlvbihwYXR0ZXJuLCBtYXRjaF9mcm9tKSB7XG4gIHZhciByZXN1bHQgPSBudWxsO1xuICB2YXIgZmxhZ3MgPSAnZyc7XG4gIGlmIChtYXRjaF9mcm9tICYmIHJlZ2V4cF9oYXNfc3RpY2t5KSB7XG4gICAgZmxhZ3MgPSAneSc7XG4gIH1cbiAgLy8gc3RyaW5ncyBhcmUgY29udmVydGVkIHRvIHJlZ2V4cFxuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIgJiYgcGF0dGVybiAhPT0gJycpIHtcbiAgICAvLyByZXN1bHQgPSBuZXcgUmVnRXhwKHBhdHRlcm4ucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyksIGZsYWdzKTtcbiAgICByZXN1bHQgPSBuZXcgUmVnRXhwKHBhdHRlcm4sIGZsYWdzKTtcbiAgfSBlbHNlIGlmIChwYXR0ZXJuKSB7XG4gICAgcmVzdWx0ID0gbmV3IFJlZ0V4cChwYXR0ZXJuLnNvdXJjZSwgZmxhZ3MpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5JbnB1dFNjYW5uZXIucHJvdG90eXBlLmdldF9saXRlcmFsX3JlZ2V4cCA9IGZ1bmN0aW9uKGxpdGVyYWxfc3RyaW5nKSB7XG4gIHJldHVybiBSZWdFeHAobGl0ZXJhbF9zdHJpbmcucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJykpO1xufTtcblxuLyogY3NzIGJlYXV0aWZpZXIgbGVnYWN5IGhlbHBlcnMgKi9cbklucHV0U2Nhbm5lci5wcm90b3R5cGUucGVla1VudGlsQWZ0ZXIgPSBmdW5jdGlvbihwYXR0ZXJuKSB7XG4gIHZhciBzdGFydCA9IHRoaXMuX19wb3NpdGlvbjtcbiAgdmFyIHZhbCA9IHRoaXMucmVhZFVudGlsQWZ0ZXIocGF0dGVybik7XG4gIHRoaXMuX19wb3NpdGlvbiA9IHN0YXJ0O1xuICByZXR1cm4gdmFsO1xufTtcblxuSW5wdXRTY2FubmVyLnByb3RvdHlwZS5sb29rQmFjayA9IGZ1bmN0aW9uKHRlc3RWYWwpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcy5fX3Bvc2l0aW9uIC0gMTtcbiAgcmV0dXJuIHN0YXJ0ID49IHRlc3RWYWwubGVuZ3RoICYmIHRoaXMuX19pbnB1dC5zdWJzdHJpbmcoc3RhcnQgLSB0ZXN0VmFsLmxlbmd0aCwgc3RhcnQpXG4gICAgLnRvTG93ZXJDYXNlKCkgPT09IHRlc3RWYWw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5JbnB1dFNjYW5uZXIgPSBJbnB1dFNjYW5uZXI7XG5cblxuLyoqKi8gfSksXG4vKiA5ICovLFxuLyogMTAgKi8sXG4vKiAxMSAqLyxcbi8qIDEyICovLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHtcblxuLypqc2hpbnQgbm9kZTp0cnVlICovXG4vKlxuXG4gIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuXG4gIENvcHlyaWdodCAoYykgMjAwNy0yMDE4IEVpbmFyIExpZWxtYW5pcywgTGlhbSBOZXdtYW4sIGFuZCBjb250cmlidXRvcnMuXG5cbiAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAgb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXNcbiAgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSU1xuICBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbiAgQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAgQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICBTT0ZUV0FSRS5cbiovXG5cblxuXG5mdW5jdGlvbiBEaXJlY3RpdmVzKHN0YXJ0X2Jsb2NrX3BhdHRlcm4sIGVuZF9ibG9ja19wYXR0ZXJuKSB7XG4gIHN0YXJ0X2Jsb2NrX3BhdHRlcm4gPSB0eXBlb2Ygc3RhcnRfYmxvY2tfcGF0dGVybiA9PT0gJ3N0cmluZycgPyBzdGFydF9ibG9ja19wYXR0ZXJuIDogc3RhcnRfYmxvY2tfcGF0dGVybi5zb3VyY2U7XG4gIGVuZF9ibG9ja19wYXR0ZXJuID0gdHlwZW9mIGVuZF9ibG9ja19wYXR0ZXJuID09PSAnc3RyaW5nJyA/IGVuZF9ibG9ja19wYXR0ZXJuIDogZW5kX2Jsb2NrX3BhdHRlcm4uc291cmNlO1xuICB0aGlzLl9fZGlyZWN0aXZlc19ibG9ja19wYXR0ZXJuID0gbmV3IFJlZ0V4cChzdGFydF9ibG9ja19wYXR0ZXJuICsgLyBiZWF1dGlmeSggXFx3K1s6XVxcdyspKyAvLnNvdXJjZSArIGVuZF9ibG9ja19wYXR0ZXJuLCAnZycpO1xuICB0aGlzLl9fZGlyZWN0aXZlX3BhdHRlcm4gPSAvIChcXHcrKVs6XShcXHcrKS9nO1xuXG4gIHRoaXMuX19kaXJlY3RpdmVzX2VuZF9pZ25vcmVfcGF0dGVybiA9IG5ldyBSZWdFeHAoc3RhcnRfYmxvY2tfcGF0dGVybiArIC9cXHNiZWF1dGlmeVxcc2lnbm9yZTplbmRcXHMvLnNvdXJjZSArIGVuZF9ibG9ja19wYXR0ZXJuLCAnZycpO1xufVxuXG5EaXJlY3RpdmVzLnByb3RvdHlwZS5nZXRfZGlyZWN0aXZlcyA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgaWYgKCF0ZXh0Lm1hdGNoKHRoaXMuX19kaXJlY3RpdmVzX2Jsb2NrX3BhdHRlcm4pKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlcyA9IHt9O1xuICB0aGlzLl9fZGlyZWN0aXZlX3BhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgdmFyIGRpcmVjdGl2ZV9tYXRjaCA9IHRoaXMuX19kaXJlY3RpdmVfcGF0dGVybi5leGVjKHRleHQpO1xuXG4gIHdoaWxlIChkaXJlY3RpdmVfbWF0Y2gpIHtcbiAgICBkaXJlY3RpdmVzW2RpcmVjdGl2ZV9tYXRjaFsxXV0gPSBkaXJlY3RpdmVfbWF0Y2hbMl07XG4gICAgZGlyZWN0aXZlX21hdGNoID0gdGhpcy5fX2RpcmVjdGl2ZV9wYXR0ZXJuLmV4ZWModGV4dCk7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0aXZlcztcbn07XG5cbkRpcmVjdGl2ZXMucHJvdG90eXBlLnJlYWRJZ25vcmVkID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlYWRVbnRpbEFmdGVyKHRoaXMuX19kaXJlY3RpdmVzX2VuZF9pZ25vcmVfcGF0dGVybik7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzLkRpcmVjdGl2ZXMgPSBEaXJlY3RpdmVzO1xuXG5cbi8qKiovIH0pLFxuLyogMTQgKi8sXG4vKiAxNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qanNoaW50IG5vZGU6dHJ1ZSAqL1xuLypcblxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG4qL1xuXG5cblxudmFyIEJlYXV0aWZpZXIgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxNikuQmVhdXRpZmllciksXG4gIE9wdGlvbnMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxNykuT3B0aW9ucyk7XG5cbmZ1bmN0aW9uIGNzc19iZWF1dGlmeShzb3VyY2VfdGV4dCwgb3B0aW9ucykge1xuICB2YXIgYmVhdXRpZmllciA9IG5ldyBCZWF1dGlmaWVyKHNvdXJjZV90ZXh0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGJlYXV0aWZpZXIuYmVhdXRpZnkoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjc3NfYmVhdXRpZnk7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IE9wdGlvbnMoKTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiAxNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qanNoaW50IG5vZGU6dHJ1ZSAqL1xuLypcblxuICBUaGUgTUlUIExpY2Vuc2UgKE1JVClcblxuICBDb3B5cmlnaHQgKGMpIDIwMDctMjAxOCBFaW5hciBMaWVsbWFuaXMsIExpYW0gTmV3bWFuLCBhbmQgY29udHJpYnV0b3JzLlxuXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzXG4gICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cbiAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlNcbiAgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4gIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOXG4gIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAgU09GVFdBUkUuXG4qL1xuXG5cblxudmFyIE9wdGlvbnMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxNykuT3B0aW9ucyk7XG52YXIgT3V0cHV0ID0gKF9fd2VicGFja19yZXF1aXJlX18oMikuT3V0cHV0KTtcbnZhciBJbnB1dFNjYW5uZXIgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyg4KS5JbnB1dFNjYW5uZXIpO1xudmFyIERpcmVjdGl2ZXMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygxMykuRGlyZWN0aXZlcyk7XG5cbnZhciBkaXJlY3RpdmVzX2NvcmUgPSBuZXcgRGlyZWN0aXZlcygvXFwvXFwqLywgL1xcKlxcLy8pO1xuXG52YXIgbGluZUJyZWFrID0gL1xcclxcbnxbXFxyXFxuXS87XG52YXIgYWxsTGluZUJyZWFrcyA9IC9cXHJcXG58W1xcclxcbl0vZztcblxuLy8gdG9rZW5pemVyXG52YXIgd2hpdGVzcGFjZUNoYXIgPSAvXFxzLztcbnZhciB3aGl0ZXNwYWNlUGF0dGVybiA9IC8oPzpcXHN8XFxuKSsvZztcbnZhciBibG9ja19jb21tZW50X3BhdHRlcm4gPSAvXFwvXFwqKD86W1xcc1xcU10qPykoKD86XFwqXFwvKXwkKS9nO1xudmFyIGNvbW1lbnRfcGF0dGVybiA9IC9cXC9cXC8oPzpbXlxcblxcclxcdTIwMjhcXHUyMDI5XSopL2c7XG5cbmZ1bmN0aW9uIEJlYXV0aWZpZXIoc291cmNlX3RleHQsIG9wdGlvbnMpIHtcbiAgdGhpcy5fc291cmNlX3RleHQgPSBzb3VyY2VfdGV4dCB8fCAnJztcbiAgLy8gQWxsb3cgdGhlIHNldHRpbmcgb2YgbGFuZ3VhZ2UvZmlsZS10eXBlIHNwZWNpZmljIG9wdGlvbnNcbiAgLy8gd2l0aCBpbmhlcml0YW5jZSBvZiBvdmVyYWxsIHNldHRpbmdzXG4gIHRoaXMuX29wdGlvbnMgPSBuZXcgT3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5fY2ggPSBudWxsO1xuICB0aGlzLl9pbnB1dCA9IG51bGw7XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0F0LXJ1bGVcbiAgdGhpcy5ORVNURURfQVRfUlVMRSA9IHtcbiAgICBcInBhZ2VcIjogdHJ1ZSxcbiAgICBcImZvbnQtZmFjZVwiOiB0cnVlLFxuICAgIFwia2V5ZnJhbWVzXCI6IHRydWUsXG4gICAgLy8gYWxzbyBpbiBDT05ESVRJT05BTF9HUk9VUF9SVUxFIGJlbG93XG4gICAgXCJtZWRpYVwiOiB0cnVlLFxuICAgIFwic3VwcG9ydHNcIjogdHJ1ZSxcbiAgICBcImRvY3VtZW50XCI6IHRydWVcbiAgfTtcbiAgdGhpcy5DT05ESVRJT05BTF9HUk9VUF9SVUxFID0ge1xuICAgIFwibWVkaWFcIjogdHJ1ZSxcbiAgICBcInN1cHBvcnRzXCI6IHRydWUsXG4gICAgXCJkb2N1bWVudFwiOiB0cnVlXG4gIH07XG4gIHRoaXMuTk9OX1NFTUlDT0xPTl9ORVdMSU5FX1BST1BFUlRZID0gW1xuICAgIFwiZ3JpZC10ZW1wbGF0ZS1hcmVhc1wiLFxuICAgIFwiZ3JpZC10ZW1wbGF0ZVwiXG4gIF07XG5cbn1cblxuQmVhdXRpZmllci5wcm90b3R5cGUuZWF0U3RyaW5nID0gZnVuY3Rpb24oZW5kQ2hhcnMpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB0aGlzLl9jaCA9IHRoaXMuX2lucHV0Lm5leHQoKTtcbiAgd2hpbGUgKHRoaXMuX2NoKSB7XG4gICAgcmVzdWx0ICs9IHRoaXMuX2NoO1xuICAgIGlmICh0aGlzLl9jaCA9PT0gXCJcXFxcXCIpIHtcbiAgICAgIHJlc3VsdCArPSB0aGlzLl9pbnB1dC5uZXh0KCk7XG4gICAgfSBlbHNlIGlmIChlbmRDaGFycy5pbmRleE9mKHRoaXMuX2NoKSAhPT0gLTEgfHwgdGhpcy5fY2ggPT09IFwiXFxuXCIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl9jaCA9IHRoaXMuX2lucHV0Lm5leHQoKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gU2tpcHMgYW55IHdoaXRlIHNwYWNlIGluIHRoZSBzb3VyY2UgdGV4dCBmcm9tIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuLy8gV2hlbiBhbGxvd0F0TGVhc3RPbmVOZXdMaW5lIGlzIHRydWUsIHdpbGwgb3V0cHV0IG5ldyBsaW5lcyBmb3IgZWFjaFxuLy8gbmV3bGluZSBjaGFyYWN0ZXIgZm91bmQ7IGlmIHRoZSB1c2VyIGhhcyBwcmVzZXJ2ZV9uZXdsaW5lcyBvZmYsIG9ubHlcbi8vIHRoZSBmaXJzdCBuZXdsaW5lIHdpbGwgYmUgb3V0cHV0XG5CZWF1dGlmaWVyLnByb3RvdHlwZS5lYXRXaGl0ZXNwYWNlID0gZnVuY3Rpb24oYWxsb3dBdExlYXN0T25lTmV3TGluZSkge1xuICB2YXIgcmVzdWx0ID0gd2hpdGVzcGFjZUNoYXIudGVzdCh0aGlzLl9pbnB1dC5wZWVrKCkpO1xuICB2YXIgbmV3bGluZV9jb3VudCA9IDA7XG4gIHdoaWxlICh3aGl0ZXNwYWNlQ2hhci50ZXN0KHRoaXMuX2lucHV0LnBlZWsoKSkpIHtcbiAgICB0aGlzLl9jaCA9IHRoaXMuX2lucHV0Lm5leHQoKTtcbiAgICBpZiAoYWxsb3dBdExlYXN0T25lTmV3TGluZSAmJiB0aGlzLl9jaCA9PT0gJ1xcbicpIHtcbiAgICAgIGlmIChuZXdsaW5lX2NvdW50ID09PSAwIHx8IG5ld2xpbmVfY291bnQgPCB0aGlzLl9vcHRpb25zLm1heF9wcmVzZXJ2ZV9uZXdsaW5lcykge1xuICAgICAgICBuZXdsaW5lX2NvdW50Kys7XG4gICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBOZXN0ZWQgcHNldWRvLWNsYXNzIGlmIHdlIGFyZSBpbnNpZGVSdWxlXG4vLyBhbmQgdGhlIG5leHQgc3BlY2lhbCBjaGFyYWN0ZXIgZm91bmQgb3BlbnNcbi8vIGEgbmV3IGJsb2NrXG5CZWF1dGlmaWVyLnByb3RvdHlwZS5mb3VuZE5lc3RlZFBzZXVkb0NsYXNzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBvcGVuUGFyZW4gPSAwO1xuICB2YXIgaSA9IDE7XG4gIHZhciBjaCA9IHRoaXMuX2lucHV0LnBlZWsoaSk7XG4gIHdoaWxlIChjaCkge1xuICAgIGlmIChjaCA9PT0gXCJ7XCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09ICcoJykge1xuICAgICAgLy8gcHNldWRvY2xhc3NlcyBjYW4gY29udGFpbiAoKVxuICAgICAgb3BlblBhcmVuICs9IDE7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gJyknKSB7XG4gICAgICBpZiAob3BlblBhcmVuID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9wZW5QYXJlbiAtPSAxO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IFwiO1wiIHx8IGNoID09PSBcIn1cIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpKys7XG4gICAgY2ggPSB0aGlzLl9pbnB1dC5wZWVrKGkpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbkJlYXV0aWZpZXIucHJvdG90eXBlLnByaW50X3N0cmluZyA9IGZ1bmN0aW9uKG91dHB1dF9zdHJpbmcpIHtcbiAgdGhpcy5fb3V0cHV0LnNldF9pbmRlbnQodGhpcy5faW5kZW50TGV2ZWwpO1xuICB0aGlzLl9vdXRwdXQubm9uX2JyZWFraW5nX3NwYWNlID0gdHJ1ZTtcbiAgdGhpcy5fb3V0cHV0LmFkZF90b2tlbihvdXRwdXRfc3RyaW5nKTtcbn07XG5cbkJlYXV0aWZpZXIucHJvdG90eXBlLnByZXNlcnZlU2luZ2xlU3BhY2UgPSBmdW5jdGlvbihpc0FmdGVyU3BhY2UpIHtcbiAgaWYgKGlzQWZ0ZXJTcGFjZSkge1xuICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICB9XG59O1xuXG5CZWF1dGlmaWVyLnByb3RvdHlwZS5pbmRlbnQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5faW5kZW50TGV2ZWwrKztcbn07XG5cbkJlYXV0aWZpZXIucHJvdG90eXBlLm91dGRlbnQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuX2luZGVudExldmVsID4gMCkge1xuICAgIHRoaXMuX2luZGVudExldmVsLS07XG4gIH1cbn07XG5cbi8qX19fX19fX19fX19fX19fX19fX19fLS0tLS0tLS0tLS0tLS0tLS0tLS1fX19fX19fX19fX19fX19fX19fX18qL1xuXG5CZWF1dGlmaWVyLnByb3RvdHlwZS5iZWF1dGlmeSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fb3B0aW9ucy5kaXNhYmxlZCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VfdGV4dDtcbiAgfVxuXG4gIHZhciBzb3VyY2VfdGV4dCA9IHRoaXMuX3NvdXJjZV90ZXh0O1xuICB2YXIgZW9sID0gdGhpcy5fb3B0aW9ucy5lb2w7XG4gIGlmIChlb2wgPT09ICdhdXRvJykge1xuICAgIGVvbCA9ICdcXG4nO1xuICAgIGlmIChzb3VyY2VfdGV4dCAmJiBsaW5lQnJlYWsudGVzdChzb3VyY2VfdGV4dCB8fCAnJykpIHtcbiAgICAgIGVvbCA9IHNvdXJjZV90ZXh0Lm1hdGNoKGxpbmVCcmVhaylbMF07XG4gICAgfVxuICB9XG5cblxuICAvLyBIQUNLOiBuZXdsaW5lIHBhcnNpbmcgaW5jb25zaXN0ZW50LiBUaGlzIGJydXRlIGZvcmNlIG5vcm1hbGl6ZXMgdGhlIHRoaXMuX2lucHV0LlxuICBzb3VyY2VfdGV4dCA9IHNvdXJjZV90ZXh0LnJlcGxhY2UoYWxsTGluZUJyZWFrcywgJ1xcbicpO1xuXG4gIC8vIHJlc2V0XG4gIHZhciBiYXNlSW5kZW50U3RyaW5nID0gc291cmNlX3RleHQubWF0Y2goL15bXFx0IF0qLylbMF07XG5cbiAgdGhpcy5fb3V0cHV0ID0gbmV3IE91dHB1dCh0aGlzLl9vcHRpb25zLCBiYXNlSW5kZW50U3RyaW5nKTtcbiAgdGhpcy5faW5wdXQgPSBuZXcgSW5wdXRTY2FubmVyKHNvdXJjZV90ZXh0KTtcbiAgdGhpcy5faW5kZW50TGV2ZWwgPSAwO1xuICB0aGlzLl9uZXN0ZWRMZXZlbCA9IDA7XG5cbiAgdGhpcy5fY2ggPSBudWxsO1xuICB2YXIgcGFyZW5MZXZlbCA9IDA7XG5cbiAgdmFyIGluc2lkZVJ1bGUgPSBmYWxzZTtcbiAgLy8gVGhpcyBpcyB0aGUgdmFsdWUgc2lkZSBvZiBhIHByb3BlcnR5IHZhbHVlIHBhaXIgKGJsdWUgaW4gdGhlIGZvbGxvd2luZyBleClcbiAgLy8gbGFiZWwgeyBjb250ZW50OiBibHVlIH1cbiAgdmFyIGluc2lkZVByb3BlcnR5VmFsdWUgPSBmYWxzZTtcbiAgdmFyIGVudGVyaW5nQ29uZGl0aW9uYWxHcm91cCA9IGZhbHNlO1xuICB2YXIgaW5zaWRlTm9uTmVzdGVkQXRSdWxlID0gZmFsc2U7XG4gIHZhciBpbnNpZGVTY3NzTWFwID0gZmFsc2U7XG4gIHZhciB0b3BDaGFyYWN0ZXIgPSB0aGlzLl9jaDtcbiAgdmFyIGluc2lkZU5vblNlbWlDb2xvblZhbHVlcyA9IGZhbHNlO1xuICB2YXIgd2hpdGVzcGFjZTtcbiAgdmFyIGlzQWZ0ZXJTcGFjZTtcbiAgdmFyIHByZXZpb3VzX2NoO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgd2hpdGVzcGFjZSA9IHRoaXMuX2lucHV0LnJlYWQod2hpdGVzcGFjZVBhdHRlcm4pO1xuICAgIGlzQWZ0ZXJTcGFjZSA9IHdoaXRlc3BhY2UgIT09ICcnO1xuICAgIHByZXZpb3VzX2NoID0gdG9wQ2hhcmFjdGVyO1xuICAgIHRoaXMuX2NoID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgIGlmICh0aGlzLl9jaCA9PT0gJ1xcXFwnICYmIHRoaXMuX2lucHV0Lmhhc05leHQoKSkge1xuICAgICAgdGhpcy5fY2ggKz0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgIH1cbiAgICB0b3BDaGFyYWN0ZXIgPSB0aGlzLl9jaDtcblxuICAgIGlmICghdGhpcy5fY2gpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICcvJyAmJiB0aGlzLl9pbnB1dC5wZWVrKCkgPT09ICcqJykge1xuICAgICAgLy8gLyogY3NzIGNvbW1lbnQgKi9cbiAgICAgIC8vIEFsd2F5cyBzdGFydCBibG9jayBjb21tZW50cyBvbiBhIG5ldyBsaW5lLlxuICAgICAgLy8gVGhpcyBoYW5kbGVzIHNjZW5hcmlvcyB3aGVyZSBhIGJsb2NrIGNvbW1lbnQgaW1tZWRpYXRlbHlcbiAgICAgIC8vIGZvbGxvd3MgYSBwcm9wZXJ0eSBkZWZpbml0aW9uIG9uIHRoZSBzYW1lIGxpbmUgb3Igd2hlcmVcbiAgICAgIC8vIG1pbmlmaWVkIGNvZGUgaXMgYmVpbmcgYmVhdXRpZmllZC5cbiAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgIHRoaXMuX2lucHV0LmJhY2soKTtcblxuICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLl9pbnB1dC5yZWFkKGJsb2NrX2NvbW1lbnRfcGF0dGVybik7XG5cbiAgICAgIC8vIEhhbmRsZSBpZ25vcmUgZGlyZWN0aXZlXG4gICAgICB2YXIgZGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXNfY29yZS5nZXRfZGlyZWN0aXZlcyhjb21tZW50KTtcbiAgICAgIGlmIChkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMuaWdub3JlID09PSAnc3RhcnQnKSB7XG4gICAgICAgIGNvbW1lbnQgKz0gZGlyZWN0aXZlc19jb3JlLnJlYWRJZ25vcmVkKHRoaXMuX2lucHV0KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmludF9zdHJpbmcoY29tbWVudCk7XG5cbiAgICAgIC8vIEVuc3VyZXMgYW55IG5ldyBsaW5lcyBmb2xsb3dpbmcgdGhlIGNvbW1lbnQgYXJlIHByZXNlcnZlZFxuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuXG4gICAgICAvLyBCbG9jayBjb21tZW50cyBhcmUgZm9sbG93ZWQgYnkgYSBuZXcgbGluZSBzbyB0aGV5IGRvbid0XG4gICAgICAvLyBzaGFyZSBhIGxpbmUgd2l0aCBvdGhlciBwcm9wZXJ0aWVzXG4gICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gJy8nICYmIHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gJy8nKSB7XG4gICAgICAvLyAvLyBzaW5nbGUgbGluZSBjb21tZW50XG4gICAgICAvLyBQcmVzZXJ2ZXMgdGhlIHNwYWNlIGJlZm9yZSBhIGNvbW1lbnRcbiAgICAgIC8vIG9uIHRoZSBzYW1lIGxpbmUgYXMgYSBydWxlXG4gICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2lucHV0LmJhY2soKTtcbiAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2lucHV0LnJlYWQoY29tbWVudF9wYXR0ZXJuKSk7XG5cbiAgICAgIC8vIEVuc3VyZXMgYW55IG5ldyBsaW5lcyBmb2xsb3dpbmcgdGhlIGNvbW1lbnQgYXJlIHByZXNlcnZlZFxuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICckJykge1xuICAgICAgdGhpcy5wcmVzZXJ2ZVNpbmdsZVNwYWNlKGlzQWZ0ZXJTcGFjZSk7XG5cbiAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcblxuICAgICAgLy8gc3RyaXAgdHJhaWxpbmcgc3BhY2UsIGlmIHByZXNlbnQsIGZvciBoYXNoIHByb3BlcnR5IGNoZWNrc1xuICAgICAgdmFyIHZhcmlhYmxlID0gdGhpcy5faW5wdXQucGVla1VudGlsQWZ0ZXIoL1s6ICw7e30oKVtcXF1cXC89J1wiXS9nKTtcblxuICAgICAgaWYgKHZhcmlhYmxlLm1hdGNoKC9bIDpdJC8pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSB2YXJpYWJsZSBvciBwc2V1ZG8tY2xhc3MsIGFkZCBpdCBhbmQgaW5zZXJ0IG9uZSBzcGFjZSBiZWZvcmUgY29udGludWluZ1xuICAgICAgICB2YXJpYWJsZSA9IHRoaXMuZWF0U3RyaW5nKFwiOiBcIikucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG4gICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHZhcmlhYmxlKTtcbiAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIG1pZ2h0IGJlIHNhc3MgdmFyaWFibGVcbiAgICAgIGlmIChwYXJlbkxldmVsID09PSAwICYmIHZhcmlhYmxlLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICAgICAgaW5zaWRlUHJvcGVydHlWYWx1ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gJ0AnKSB7XG4gICAgICB0aGlzLnByZXNlcnZlU2luZ2xlU3BhY2UoaXNBZnRlclNwYWNlKTtcblxuICAgICAgLy8gZGVhbCB3aXRoIGxlc3MgcHJvcGVydHkgbWl4aW5zIEB7Li4ufVxuICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gJ3snKSB7XG4gICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoICsgdGhpcy5lYXRTdHJpbmcoJ30nKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG5cbiAgICAgICAgLy8gc3RyaXAgdHJhaWxpbmcgc3BhY2UsIGlmIHByZXNlbnQsIGZvciBoYXNoIHByb3BlcnR5IGNoZWNrc1xuICAgICAgICB2YXIgdmFyaWFibGVPclJ1bGUgPSB0aGlzLl9pbnB1dC5wZWVrVW50aWxBZnRlcigvWzogLDt7fSgpW1xcXVxcLz0nXCJdL2cpO1xuXG4gICAgICAgIGlmICh2YXJpYWJsZU9yUnVsZS5tYXRjaCgvWyA6XSQvKSkge1xuICAgICAgICAgIC8vIHdlIGhhdmUgYSB2YXJpYWJsZSBvciBwc2V1ZG8tY2xhc3MsIGFkZCBpdCBhbmQgaW5zZXJ0IG9uZSBzcGFjZSBiZWZvcmUgY29udGludWluZ1xuICAgICAgICAgIHZhcmlhYmxlT3JSdWxlID0gdGhpcy5lYXRTdHJpbmcoXCI6IFwiKS5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh2YXJpYWJsZU9yUnVsZSk7XG4gICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtaWdodCBiZSBsZXNzIHZhcmlhYmxlXG4gICAgICAgIGlmIChwYXJlbkxldmVsID09PSAwICYmIHZhcmlhYmxlT3JSdWxlLmluZGV4T2YoJzonKSAhPT0gLTEpIHtcbiAgICAgICAgICBpbnNpZGVQcm9wZXJ0eVZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmluZGVudCgpO1xuXG4gICAgICAgICAgLy8gbWlnaHQgYmUgYSBuZXN0aW5nIGF0LXJ1bGVcbiAgICAgICAgfSBlbHNlIGlmICh2YXJpYWJsZU9yUnVsZSBpbiB0aGlzLk5FU1RFRF9BVF9SVUxFKSB7XG4gICAgICAgICAgdGhpcy5fbmVzdGVkTGV2ZWwgKz0gMTtcbiAgICAgICAgICBpZiAodmFyaWFibGVPclJ1bGUgaW4gdGhpcy5DT05ESVRJT05BTF9HUk9VUF9SVUxFKSB7XG4gICAgICAgICAgICBlbnRlcmluZ0NvbmRpdGlvbmFsR3JvdXAgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIG1pZ2h0IGJlIGEgbm9uLW5lc3RlZCBhdC1ydWxlXG4gICAgICAgIH0gZWxzZSBpZiAocGFyZW5MZXZlbCA9PT0gMCAmJiAhaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgIGluc2lkZU5vbk5lc3RlZEF0UnVsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAnIycgJiYgdGhpcy5faW5wdXQucGVlaygpID09PSAneycpIHtcbiAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShpc0FmdGVyU3BhY2UpO1xuICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2ggKyB0aGlzLmVhdFN0cmluZygnfScpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAneycpIHtcbiAgICAgIGlmIChpbnNpZGVQcm9wZXJ0eVZhbHVlKSB7XG4gICAgICAgIGluc2lkZVByb3BlcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIG5vbiBuZXN0ZWQgYXQgcnVsZSBiZWNvbWVzIG5lc3RlZFxuICAgICAgaW5zaWRlTm9uTmVzdGVkQXRSdWxlID0gZmFsc2U7XG5cbiAgICAgIC8vIHdoZW4gZW50ZXJpbmcgY29uZGl0aW9uYWwgZ3JvdXBzLCBvbmx5IHJ1bGVzZXRzIGFyZSBhbGxvd2VkXG4gICAgICBpZiAoZW50ZXJpbmdDb25kaXRpb25hbEdyb3VwKSB7XG4gICAgICAgIGVudGVyaW5nQ29uZGl0aW9uYWxHcm91cCA9IGZhbHNlO1xuICAgICAgICBpbnNpZGVSdWxlID0gKHRoaXMuX2luZGVudExldmVsID49IHRoaXMuX25lc3RlZExldmVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG90aGVyd2lzZSwgZGVjbGFyYXRpb25zIGFyZSBhbHNvIGFsbG93ZWRcbiAgICAgICAgaW5zaWRlUnVsZSA9ICh0aGlzLl9pbmRlbnRMZXZlbCA+PSB0aGlzLl9uZXN0ZWRMZXZlbCAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX29wdGlvbnMubmV3bGluZV9iZXR3ZWVuX3J1bGVzICYmIGluc2lkZVJ1bGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX291dHB1dC5wcmV2aW91c19saW5lICYmIHRoaXMuX291dHB1dC5wcmV2aW91c19saW5lLml0ZW0oLTEpICE9PSAneycpIHtcbiAgICAgICAgICB0aGlzLl9vdXRwdXQuZW5zdXJlX2VtcHR5X2xpbmVfYWJvdmUoJy8nLCAnLCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuXG4gICAgICAvLyBUaGUgZGlmZmVyZW5jZSBpbiBwcmludF9zdHJpbmcgYW5kIGluZGVudCBvcmRlciBpcyBuZWNlc3NhcnkgdG8gaW5kZW50IHRoZSAneycgY29ycmVjdGx5XG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5icmFjZV9zdHlsZSA9PT0gJ2V4cGFuZCcpIHtcbiAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgIHRoaXMuX291dHB1dC5zZXRfaW5kZW50KHRoaXMuX2luZGVudExldmVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluc2lkZSBtaXhpbiBhbmQgZmlyc3QgcGFyYW0gaXMgb2JqZWN0XG4gICAgICAgIGlmIChwcmV2aW91c19jaCA9PT0gJygnKSB7XG4gICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzX2NoICE9PSAnLCcpIHtcbiAgICAgICAgICB0aGlzLmluZGVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICd9Jykge1xuICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICBpZiAocHJldmlvdXNfY2ggPT09ICd7Jykge1xuICAgICAgICB0aGlzLl9vdXRwdXQudHJpbSh0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc2lkZVByb3BlcnR5VmFsdWUpIHtcbiAgICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICAgIGluc2lkZVByb3BlcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgIGluc2lkZVJ1bGUgPSBmYWxzZTtcbiAgICAgIGlmICh0aGlzLl9uZXN0ZWRMZXZlbCkge1xuICAgICAgICB0aGlzLl9uZXN0ZWRMZXZlbC0tO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG5cbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLm5ld2xpbmVfYmV0d2Vlbl9ydWxlcyAmJiAhdGhpcy5fb3V0cHV0Lmp1c3RfYWRkZWRfYmxhbmtsaW5lKCkpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSAhPT0gJ30nKSB7XG4gICAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gJyknKSB7XG4gICAgICAgIHRoaXMuX291dHB1dC50cmltKHRydWUpO1xuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucy5icmFjZV9zdHlsZSA9PT0gXCJleHBhbmRcIikge1xuICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSBcIjpcIikge1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuTk9OX1NFTUlDT0xPTl9ORVdMSU5FX1BST1BFUlRZLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnB1dC5sb29rQmFjayh0aGlzLk5PTl9TRU1JQ09MT05fTkVXTElORV9QUk9QRVJUWVtpXSkpIHtcbiAgICAgICAgICBpbnNpZGVOb25TZW1pQ29sb25WYWx1ZXMgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgoaW5zaWRlUnVsZSB8fCBlbnRlcmluZ0NvbmRpdGlvbmFsR3JvdXApICYmICEodGhpcy5faW5wdXQubG9va0JhY2soXCImXCIpIHx8IHRoaXMuZm91bmROZXN0ZWRQc2V1ZG9DbGFzcygpKSAmJiAhdGhpcy5faW5wdXQubG9va0JhY2soXCIoXCIpICYmICFpbnNpZGVOb25OZXN0ZWRBdFJ1bGUgJiYgcGFyZW5MZXZlbCA9PT0gMCkge1xuICAgICAgICAvLyAncHJvcGVydHk6IHZhbHVlJyBkZWxpbWl0ZXJcbiAgICAgICAgLy8gd2hpY2ggY291bGQgYmUgaW4gYSBjb25kaXRpb25hbCBncm91cCBxdWVyeVxuXG4gICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKCc6Jyk7XG4gICAgICAgIGlmICghaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgIGluc2lkZVByb3BlcnR5VmFsdWUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICAgICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSh0cnVlKTtcbiAgICAgICAgICB0aGlzLmluZGVudCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzYXNzL2xlc3MgcGFyZW50IHJlZmVyZW5jZSBkb24ndCB1c2UgYSBzcGFjZVxuICAgICAgICAvLyBzYXNzIG5lc3RlZCBwc2V1ZG8tY2xhc3MgZG9uJ3QgdXNlIGEgc3BhY2VcblxuICAgICAgICAvLyBwcmVzZXJ2ZSBzcGFjZSBiZWZvcmUgcHNldWRvY2xhc3Nlcy9wc2V1ZG9lbGVtZW50cywgYXMgaXQgbWVhbnMgXCJpbiBhbnkgY2hpbGRcIlxuICAgICAgICBpZiAodGhpcy5faW5wdXQubG9va0JhY2soXCIgXCIpKSB7XG4gICAgICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gXCI6XCIpIHtcbiAgICAgICAgICAvLyBwc2V1ZG8tZWxlbWVudFxuICAgICAgICAgIHRoaXMuX2NoID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKFwiOjpcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHNldWRvLWNsYXNzXG4gICAgICAgICAgdGhpcy5wcmludF9zdHJpbmcoJzonKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICdcIicgfHwgdGhpcy5fY2ggPT09ICdcXCcnKSB7XG4gICAgICB2YXIgcHJlc2VydmVRdW90ZVNwYWNlID0gcHJldmlvdXNfY2ggPT09ICdcIicgfHwgcHJldmlvdXNfY2ggPT09ICdcXCcnO1xuICAgICAgdGhpcy5wcmVzZXJ2ZVNpbmdsZVNwYWNlKHByZXNlcnZlUXVvdGVTcGFjZSB8fCBpc0FmdGVyU3BhY2UpO1xuICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2ggKyB0aGlzLmVhdFN0cmluZyh0aGlzLl9jaCkpO1xuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICc7Jykge1xuICAgICAgaW5zaWRlTm9uU2VtaUNvbG9uVmFsdWVzID0gZmFsc2U7XG4gICAgICBpZiAocGFyZW5MZXZlbCA9PT0gMCkge1xuICAgICAgICBpZiAoaW5zaWRlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgIHRoaXMub3V0ZGVudCgpO1xuICAgICAgICAgIGluc2lkZVByb3BlcnR5VmFsdWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnNpZGVOb25OZXN0ZWRBdFJ1bGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG5cbiAgICAgICAgLy8gVGhpcyBtYWludGFpbnMgc2luZ2xlIGxpbmUgY29tbWVudHMgb24gdGhlIHNhbWVcbiAgICAgICAgLy8gbGluZS4gQmxvY2sgY29tbWVudHMgYXJlIGFsc28gYWZmZWN0ZWQsIGJ1dFxuICAgICAgICAvLyBhIG5ldyBsaW5lIGlzIGFsd2F5cyBvdXRwdXQgYmVmb3JlIG9uZSBpbnNpZGVcbiAgICAgICAgLy8gdGhhdCBzZWN0aW9uXG4gICAgICAgIGlmICh0aGlzLl9pbnB1dC5wZWVrKCkgIT09ICcvJykge1xuICAgICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICB0aGlzLmVhdFdoaXRlc3BhY2UodHJ1ZSk7XG4gICAgICAgIHRoaXMuX291dHB1dC5zcGFjZV9iZWZvcmVfdG9rZW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICcoJykgeyAvLyBtYXkgYmUgYSB1cmxcbiAgICAgIGlmICh0aGlzLl9pbnB1dC5sb29rQmFjayhcInVybFwiKSkge1xuICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgICAgIHRoaXMuZWF0V2hpdGVzcGFjZSgpO1xuICAgICAgICBwYXJlbkxldmVsKys7XG4gICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgIHRoaXMuX2NoID0gdGhpcy5faW5wdXQubmV4dCgpO1xuICAgICAgICBpZiAodGhpcy5fY2ggPT09ICcpJyB8fCB0aGlzLl9jaCA9PT0gJ1wiJyB8fCB0aGlzLl9jaCA9PT0gJ1xcJycpIHtcbiAgICAgICAgICB0aGlzLl9pbnB1dC5iYWNrKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2gpIHtcbiAgICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCArIHRoaXMuZWF0U3RyaW5nKCcpJykpO1xuICAgICAgICAgIGlmIChwYXJlbkxldmVsKSB7XG4gICAgICAgICAgICBwYXJlbkxldmVsLS07XG4gICAgICAgICAgICB0aGlzLm91dGRlbnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzcGFjZV9uZWVkZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2lucHV0Lmxvb2tCYWNrKFwid2l0aFwiKSkge1xuICAgICAgICAgIC8vIGxvb2sgYmFjayBpcyBub3QgYW4gYWNjdXJhdGUgc29sdXRpb24sIHdlIG5lZWQgdG9rZW5zIHRvIGNvbmZpcm0gd2l0aG91dCB3aGl0ZXNwYWNlc1xuICAgICAgICAgIHNwYWNlX25lZWRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVzZXJ2ZVNpbmdsZVNwYWNlKGlzQWZ0ZXJTcGFjZSB8fCBzcGFjZV9uZWVkZWQpO1xuICAgICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG5cbiAgICAgICAgLy8gaGFuZGxlIHNjc3Mvc2FzcyBtYXBcbiAgICAgICAgaWYgKGluc2lkZVByb3BlcnR5VmFsdWUgJiYgcHJldmlvdXNfY2ggPT09IFwiJFwiICYmIHRoaXMuX29wdGlvbnMuc2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmUpIHtcbiAgICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICAgICAgaW5zaWRlU2Nzc01hcCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgcGFyZW5MZXZlbCsrO1xuICAgICAgICAgIHRoaXMuaW5kZW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAnKScpIHtcbiAgICAgIGlmIChwYXJlbkxldmVsKSB7XG4gICAgICAgIHBhcmVuTGV2ZWwtLTtcbiAgICAgICAgdGhpcy5vdXRkZW50KCk7XG4gICAgICB9XG4gICAgICBpZiAoaW5zaWRlU2Nzc01hcCAmJiB0aGlzLl9pbnB1dC5wZWVrKCkgPT09IFwiO1wiICYmIHRoaXMuX29wdGlvbnMuc2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmUpIHtcbiAgICAgICAgaW5zaWRlU2Nzc01hcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm91dGRlbnQoKTtcbiAgICAgICAgdGhpcy5fb3V0cHV0LmFkZF9uZXdfbGluZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICcsJykge1xuICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKHRydWUpO1xuICAgICAgaWYgKHRoaXMuX29wdGlvbnMuc2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmUgJiYgKCFpbnNpZGVQcm9wZXJ0eVZhbHVlIHx8IGluc2lkZVNjc3NNYXApICYmIHBhcmVuTGV2ZWwgPT09IDAgJiYgIWluc2lkZU5vbk5lc3RlZEF0UnVsZSkge1xuICAgICAgICB0aGlzLl9vdXRwdXQuYWRkX25ld19saW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCh0aGlzLl9jaCA9PT0gJz4nIHx8IHRoaXMuX2NoID09PSAnKycgfHwgdGhpcy5fY2ggPT09ICd+JykgJiYgIWluc2lkZVByb3BlcnR5VmFsdWUgJiYgcGFyZW5MZXZlbCA9PT0gMCkge1xuICAgICAgLy9oYW5kbGUgY29tYmluYXRvciBzcGFjaW5nXG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5zcGFjZV9hcm91bmRfY29tYmluYXRvcikge1xuICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgICAgICB0aGlzLl9vdXRwdXQuc3BhY2VfYmVmb3JlX3Rva2VuID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKCk7XG4gICAgICAgIC8vIHNxdWFzaCBleHRyYSB3aGl0ZXNwYWNlXG4gICAgICAgIGlmICh0aGlzLl9jaCAmJiB3aGl0ZXNwYWNlQ2hhci50ZXN0KHRoaXMuX2NoKSkge1xuICAgICAgICAgIHRoaXMuX2NoID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAnXScpIHtcbiAgICAgIHRoaXMucHJpbnRfc3RyaW5nKHRoaXMuX2NoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2NoID09PSAnWycpIHtcbiAgICAgIHRoaXMucHJlc2VydmVTaW5nbGVTcGFjZShpc0FmdGVyU3BhY2UpO1xuICAgICAgdGhpcy5wcmludF9zdHJpbmcodGhpcy5fY2gpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fY2ggPT09ICc9JykgeyAvLyBubyB3aGl0ZXNwYWNlIGJlZm9yZSBvciBhZnRlclxuICAgICAgdGhpcy5lYXRXaGl0ZXNwYWNlKCk7XG4gICAgICB0aGlzLnByaW50X3N0cmluZygnPScpO1xuICAgICAgaWYgKHdoaXRlc3BhY2VDaGFyLnRlc3QodGhpcy5fY2gpKSB7XG4gICAgICAgIHRoaXMuX2NoID0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9jaCA9PT0gJyEnICYmICF0aGlzLl9pbnB1dC5sb29rQmFjayhcIlxcXFxcIikpIHsgLy8gIWltcG9ydGFudFxuICAgICAgdGhpcy5fb3V0cHV0LnNwYWNlX2JlZm9yZV90b2tlbiA9IHRydWU7XG4gICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVzZXJ2ZUFmdGVyU3BhY2UgPSBwcmV2aW91c19jaCA9PT0gJ1wiJyB8fCBwcmV2aW91c19jaCA9PT0gJ1xcJyc7XG4gICAgICB0aGlzLnByZXNlcnZlU2luZ2xlU3BhY2UocHJlc2VydmVBZnRlclNwYWNlIHx8IGlzQWZ0ZXJTcGFjZSk7XG4gICAgICB0aGlzLnByaW50X3N0cmluZyh0aGlzLl9jaCk7XG5cbiAgICAgIGlmICghdGhpcy5fb3V0cHV0Lmp1c3RfYWRkZWRfbmV3bGluZSgpICYmIHRoaXMuX2lucHV0LnBlZWsoKSA9PT0gJ1xcbicgJiYgaW5zaWRlTm9uU2VtaUNvbG9uVmFsdWVzKSB7XG4gICAgICAgIHRoaXMuX291dHB1dC5hZGRfbmV3X2xpbmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgc3dlZXRDb2RlID0gdGhpcy5fb3V0cHV0LmdldF9jb2RlKGVvbCk7XG5cbiAgcmV0dXJuIHN3ZWV0Q29kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLkJlYXV0aWZpZXIgPSBCZWF1dGlmaWVyO1xuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKmpzaGludCBub2RlOnRydWUgKi9cbi8qXG5cbiAgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5cbiAgQ29weXJpZ2h0IChjKSAyMDA3LTIwMTggRWluYXIgTGllbG1hbmlzLCBMaWFtIE5ld21hbiwgYW5kIGNvbnRyaWJ1dG9ycy5cblxuICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlc1xuICAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTXG4gIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuICBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTlxuICBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gIFNPRlRXQVJFLlxuKi9cblxuXG5cbnZhciBCYXNlT3B0aW9ucyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDYpLk9wdGlvbnMpO1xuXG5mdW5jdGlvbiBPcHRpb25zKG9wdGlvbnMpIHtcbiAgQmFzZU9wdGlvbnMuY2FsbCh0aGlzLCBvcHRpb25zLCAnY3NzJyk7XG5cbiAgdGhpcy5zZWxlY3Rvcl9zZXBhcmF0b3JfbmV3bGluZSA9IHRoaXMuX2dldF9ib29sZWFuKCdzZWxlY3Rvcl9zZXBhcmF0b3JfbmV3bGluZScsIHRydWUpO1xuICB0aGlzLm5ld2xpbmVfYmV0d2Vlbl9ydWxlcyA9IHRoaXMuX2dldF9ib29sZWFuKCduZXdsaW5lX2JldHdlZW5fcnVsZXMnLCB0cnVlKTtcbiAgdmFyIHNwYWNlX2Fyb3VuZF9zZWxlY3Rvcl9zZXBhcmF0b3IgPSB0aGlzLl9nZXRfYm9vbGVhbignc3BhY2VfYXJvdW5kX3NlbGVjdG9yX3NlcGFyYXRvcicpO1xuICB0aGlzLnNwYWNlX2Fyb3VuZF9jb21iaW5hdG9yID0gdGhpcy5fZ2V0X2Jvb2xlYW4oJ3NwYWNlX2Fyb3VuZF9jb21iaW5hdG9yJykgfHwgc3BhY2VfYXJvdW5kX3NlbGVjdG9yX3NlcGFyYXRvcjtcblxuICB2YXIgYnJhY2Vfc3R5bGVfc3BsaXQgPSB0aGlzLl9nZXRfc2VsZWN0aW9uX2xpc3QoJ2JyYWNlX3N0eWxlJywgWydjb2xsYXBzZScsICdleHBhbmQnLCAnZW5kLWV4cGFuZCcsICdub25lJywgJ3ByZXNlcnZlLWlubGluZSddKTtcbiAgdGhpcy5icmFjZV9zdHlsZSA9ICdjb2xsYXBzZSc7XG4gIGZvciAodmFyIGJzID0gMDsgYnMgPCBicmFjZV9zdHlsZV9zcGxpdC5sZW5ndGg7IGJzKyspIHtcbiAgICBpZiAoYnJhY2Vfc3R5bGVfc3BsaXRbYnNdICE9PSAnZXhwYW5kJykge1xuICAgICAgLy8gZGVmYXVsdCB0byBjb2xsYXBzZSwgYXMgb25seSBjb2xsYXBzZXxleHBhbmQgaXMgaW1wbGVtZW50ZWQgZm9yIG5vd1xuICAgICAgdGhpcy5icmFjZV9zdHlsZSA9ICdjb2xsYXBzZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYnJhY2Vfc3R5bGUgPSBicmFjZV9zdHlsZV9zcGxpdFtic107XG4gICAgfVxuICB9XG59XG5PcHRpb25zLnByb3RvdHlwZSA9IG5ldyBCYXNlT3B0aW9ucygpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMuT3B0aW9ucyA9IE9wdGlvbnM7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIFx0XSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBzdGFydHVwXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHQvLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuLyoqKioqKi8gXHRsZWdhY3lfYmVhdXRpZnlfY3NzID0gX193ZWJwYWNrX2V4cG9ydHNfXztcbi8qKioqKiovIFx0XG4vKioqKioqLyB9KSgpXG47XG52YXIgY3NzX2JlYXV0aWZ5ID0gbGVnYWN5X2JlYXV0aWZ5X2Nzcztcbi8qIEZvb3RlciAqL1xuaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQWRkIHN1cHBvcnQgZm9yIEFNRCAoIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTUQjZGVmaW5lYW1kLXByb3BlcnR5LSApXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNzc19iZWF1dGlmeTogY3NzX2JlYXV0aWZ5XG4gICAgICAgIH07XG4gICAgfSk7XG59IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gQWRkIHN1cHBvcnQgZm9yIENvbW1vbkpTLiBKdXN0IHB1dCB0aGlzIGZpbGUgc29tZXdoZXJlIG9uIHlvdXIgcmVxdWlyZS5wYXRoc1xuICAgIC8vIGFuZCB5b3Ugd2lsbCBiZSBhYmxlIHRvIGB2YXIgaHRtbF9iZWF1dGlmeSA9IHJlcXVpcmUoXCJiZWF1dGlmeVwiKS5odG1sX2JlYXV0aWZ5YC5cbiAgICBleHBvcnRzLmNzc19iZWF1dGlmeSA9IGNzc19iZWF1dGlmeTtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIC8vIElmIHdlJ3JlIHJ1bm5pbmcgYSB3ZWIgcGFnZSBhbmQgZG9uJ3QgaGF2ZSBlaXRoZXIgb2YgdGhlIGFib3ZlLCBhZGQgb3VyIG9uZSBnbG9iYWxcbiAgICB3aW5kb3cuY3NzX2JlYXV0aWZ5ID0gY3NzX2JlYXV0aWZ5O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gSWYgd2UgZG9uJ3QgZXZlbiBoYXZlIHdpbmRvdywgdHJ5IGdsb2JhbC5cbiAgICBnbG9iYWwuY3NzX2JlYXV0aWZ5ID0gY3NzX2JlYXV0aWZ5O1xufVxuXG59KCkpO1xuIl0sIm5hbWVzIjpbImxlZ2FjeV9iZWF1dGlmeV9jc3MiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibW9kdWxlIiwiT3V0cHV0TGluZSIsInBhcmVudCIsIl9fcGFyZW50IiwiX19jaGFyYWN0ZXJfY291bnQiLCJfX2luZGVudF9jb3VudCIsIl9fYWxpZ25tZW50X2NvdW50IiwiX193cmFwX3BvaW50X2luZGV4IiwiX193cmFwX3BvaW50X2NoYXJhY3Rlcl9jb3VudCIsIl9fd3JhcF9wb2ludF9pbmRlbnRfY291bnQiLCJfX3dyYXBfcG9pbnRfYWxpZ25tZW50X2NvdW50IiwiX19pdGVtcyIsInByb3RvdHlwZSIsImNsb25lX2VtcHR5IiwibGluZSIsInNldF9pbmRlbnQiLCJpdGVtIiwiaW5kZXgiLCJsZW5ndGgiLCJoYXNfbWF0Y2giLCJwYXR0ZXJuIiwibGFzdENoZWNrZWRPdXRwdXQiLCJtYXRjaCIsImluZGVudCIsImFsaWdubWVudCIsImlzX2VtcHR5IiwiZ2V0X2luZGVudF9zaXplIiwiX3NldF93cmFwX3BvaW50Iiwid3JhcF9saW5lX2xlbmd0aCIsIm5leHRfbGluZSIsIl9zaG91bGRfd3JhcCIsIl9hbGxvd193cmFwIiwiYWRkX25ld19saW5lIiwibmV4dCIsImN1cnJlbnRfbGluZSIsInNsaWNlIiwic3BsaWNlIiwibGFzdCIsInB1c2giLCJsYXN0X25ld2xpbmVfaW5kZXgiLCJsYXN0SW5kZXhPZiIsInBvcCIsIl9yZW1vdmVfaW5kZW50IiwiaW5kZW50X3NpemUiLCJfcmVtb3ZlX3dyYXBfaW5kZW50IiwidHJpbSIsInRvU3RyaW5nIiwicmVzdWx0IiwiaW5kZW50X2VtcHR5X2xpbmVzIiwiZ2V0X2luZGVudF9zdHJpbmciLCJqb2luIiwiSW5kZW50U3RyaW5nQ2FjaGUiLCJvcHRpb25zIiwiYmFzZUluZGVudFN0cmluZyIsIl9fY2FjaGUiLCJfX2luZGVudF9zaXplIiwiX19pbmRlbnRfc3RyaW5nIiwiaW5kZW50X2NoYXIiLCJpbmRlbnRfd2l0aF90YWJzIiwiQXJyYXkiLCJpbmRlbnRfbGV2ZWwiLCJfX2Jhc2Vfc3RyaW5nIiwiX19iYXNlX3N0cmluZ19sZW5ndGgiLCJjb2x1bW4iLCJfX2Vuc3VyZV9jYWNoZSIsIl9fYWRkX2NvbHVtbiIsIk1hdGgiLCJmbG9vciIsIk91dHB1dCIsIl9faW5kZW50X2NhY2hlIiwicmF3IiwiX2VuZF93aXRoX25ld2xpbmUiLCJlbmRfd2l0aF9uZXdsaW5lIiwiX19saW5lcyIsInByZXZpb3VzX2xpbmUiLCJzcGFjZV9iZWZvcmVfdG9rZW4iLCJub25fYnJlYWtpbmdfc3BhY2UiLCJwcmV2aW91c190b2tlbl93cmFwcGVkIiwiX19hZGRfb3V0cHV0bGluZSIsImdldF9saW5lX251bWJlciIsImZvcmNlX25ld2xpbmUiLCJqdXN0X2FkZGVkX25ld2xpbmUiLCJnZXRfY29kZSIsImVvbCIsImxhc3RfaXRlbSIsInJlcGxhY2UiLCJzd2VldF9jb2RlIiwic2V0X3dyYXBfcG9pbnQiLCJhZGRfcmF3X3Rva2VuIiwidG9rZW4iLCJ4IiwibmV3bGluZXMiLCJ3aGl0ZXNwYWNlX2JlZm9yZSIsInRleHQiLCJhZGRfdG9rZW4iLCJwcmludGFibGVfdG9rZW4iLCJfX2FkZF9zcGFjZV9iZWZvcmVfdG9rZW4iLCJyZW1vdmVfaW5kZW50Iiwib3V0cHV0X2xlbmd0aCIsImVhdF9uZXdsaW5lcyIsInVuZGVmaW5lZCIsImp1c3RfYWRkZWRfYmxhbmtsaW5lIiwiZW5zdXJlX2VtcHR5X2xpbmVfYWJvdmUiLCJzdGFydHNfd2l0aCIsImVuZHNfd2l0aCIsInBvdGVudGlhbEVtcHR5TGluZSIsImluZGV4T2YiLCJleHBvcnRzIiwiT3B0aW9ucyIsIm1lcmdlX2NoaWxkX2ZpZWxkIiwicmF3X29wdGlvbnMiLCJfbWVyZ2VPcHRzIiwiZGlzYWJsZWQiLCJfZ2V0X2Jvb2xlYW4iLCJfZ2V0X2NoYXJhY3RlcnMiLCJfZ2V0X251bWJlciIsInByZXNlcnZlX25ld2xpbmVzIiwibWF4X3ByZXNlcnZlX25ld2xpbmVzIiwidGVtcGxhdGluZyIsIl9nZXRfc2VsZWN0aW9uX2xpc3QiLCJfZ2V0X2FycmF5IiwibmFtZSIsImRlZmF1bHRfdmFsdWUiLCJvcHRpb25fdmFsdWUiLCJjb25jYXQiLCJzcGxpdCIsInBhcnNlSW50IiwiaXNOYU4iLCJfZ2V0X3NlbGVjdGlvbiIsInNlbGVjdGlvbl9saXN0IiwiRXJyb3IiLCJfaXNfdmFsaWRfc2VsZWN0aW9uIiwic29tZSIsImFsbE9wdGlvbnMiLCJjaGlsZEZpZWxkTmFtZSIsImZpbmFsT3B0cyIsIl9ub3JtYWxpemVPcHRzIiwiY29udmVydGVkT3B0cyIsImtleSIsIm5ld0tleSIsIm5vcm1hbGl6ZU9wdHMiLCJtZXJnZU9wdHMiLCJyZWdleHBfaGFzX3N0aWNreSIsIlJlZ0V4cCIsImhhc093blByb3BlcnR5IiwiSW5wdXRTY2FubmVyIiwiaW5wdXRfc3RyaW5nIiwiX19pbnB1dCIsIl9faW5wdXRfbGVuZ3RoIiwiX19wb3NpdGlvbiIsInJlc3RhcnQiLCJiYWNrIiwiaGFzTmV4dCIsInZhbCIsImNoYXJBdCIsInBlZWsiLCJfX21hdGNoIiwibGFzdEluZGV4IiwicGF0dGVybl9tYXRjaCIsImV4ZWMiLCJzdGlja3kiLCJ0ZXN0IiwidGVzdENoYXIiLCJyZWFkIiwic3RhcnRpbmdfcGF0dGVybiIsInVudGlsX3BhdHRlcm4iLCJ1bnRpbF9hZnRlciIsInJlYWRVbnRpbCIsIm1hdGNoX2luZGV4Iiwic3Vic3RyaW5nIiwicmVhZFVudGlsQWZ0ZXIiLCJnZXRfcmVnZXhwIiwibWF0Y2hfZnJvbSIsImZsYWdzIiwic291cmNlIiwiZ2V0X2xpdGVyYWxfcmVnZXhwIiwibGl0ZXJhbF9zdHJpbmciLCJwZWVrVW50aWxBZnRlciIsInN0YXJ0IiwibG9va0JhY2siLCJ0ZXN0VmFsIiwidG9Mb3dlckNhc2UiLCJEaXJlY3RpdmVzIiwic3RhcnRfYmxvY2tfcGF0dGVybiIsImVuZF9ibG9ja19wYXR0ZXJuIiwiX19kaXJlY3RpdmVzX2Jsb2NrX3BhdHRlcm4iLCJfX2RpcmVjdGl2ZV9wYXR0ZXJuIiwiX19kaXJlY3RpdmVzX2VuZF9pZ25vcmVfcGF0dGVybiIsImdldF9kaXJlY3RpdmVzIiwiZGlyZWN0aXZlcyIsImRpcmVjdGl2ZV9tYXRjaCIsInJlYWRJZ25vcmVkIiwiaW5wdXQiLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiQmVhdXRpZmllciIsImNzc19iZWF1dGlmeSIsInNvdXJjZV90ZXh0IiwiYmVhdXRpZmllciIsImJlYXV0aWZ5IiwiZGVmYXVsdE9wdGlvbnMiLCJkaXJlY3RpdmVzX2NvcmUiLCJsaW5lQnJlYWsiLCJhbGxMaW5lQnJlYWtzIiwid2hpdGVzcGFjZUNoYXIiLCJ3aGl0ZXNwYWNlUGF0dGVybiIsImJsb2NrX2NvbW1lbnRfcGF0dGVybiIsImNvbW1lbnRfcGF0dGVybiIsIl9zb3VyY2VfdGV4dCIsIl9vcHRpb25zIiwiX2NoIiwiX2lucHV0IiwiTkVTVEVEX0FUX1JVTEUiLCJDT05ESVRJT05BTF9HUk9VUF9SVUxFIiwiTk9OX1NFTUlDT0xPTl9ORVdMSU5FX1BST1BFUlRZIiwiZWF0U3RyaW5nIiwiZW5kQ2hhcnMiLCJlYXRXaGl0ZXNwYWNlIiwiYWxsb3dBdExlYXN0T25lTmV3TGluZSIsIm5ld2xpbmVfY291bnQiLCJfb3V0cHV0IiwiZm91bmROZXN0ZWRQc2V1ZG9DbGFzcyIsIm9wZW5QYXJlbiIsImkiLCJjaCIsInByaW50X3N0cmluZyIsIm91dHB1dF9zdHJpbmciLCJfaW5kZW50TGV2ZWwiLCJwcmVzZXJ2ZVNpbmdsZVNwYWNlIiwiaXNBZnRlclNwYWNlIiwib3V0ZGVudCIsIl9uZXN0ZWRMZXZlbCIsInBhcmVuTGV2ZWwiLCJpbnNpZGVSdWxlIiwiaW5zaWRlUHJvcGVydHlWYWx1ZSIsImVudGVyaW5nQ29uZGl0aW9uYWxHcm91cCIsImluc2lkZU5vbk5lc3RlZEF0UnVsZSIsImluc2lkZVNjc3NNYXAiLCJ0b3BDaGFyYWN0ZXIiLCJpbnNpZGVOb25TZW1pQ29sb25WYWx1ZXMiLCJ3aGl0ZXNwYWNlIiwicHJldmlvdXNfY2giLCJjb21tZW50IiwiaWdub3JlIiwidmFyaWFibGUiLCJ2YXJpYWJsZU9yUnVsZSIsIm5ld2xpbmVfYmV0d2Vlbl9ydWxlcyIsImJyYWNlX3N0eWxlIiwicHJlc2VydmVRdW90ZVNwYWNlIiwic3BhY2VfbmVlZGVkIiwic2VsZWN0b3Jfc2VwYXJhdG9yX25ld2xpbmUiLCJzcGFjZV9hcm91bmRfY29tYmluYXRvciIsInByZXNlcnZlQWZ0ZXJTcGFjZSIsInN3ZWV0Q29kZSIsIkJhc2VPcHRpb25zIiwiY2FsbCIsInNwYWNlX2Fyb3VuZF9zZWxlY3Rvcl9zZXBhcmF0b3IiLCJicmFjZV9zdHlsZV9zcGxpdCIsImJzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZGVmaW5lIiwiYW1kIiwid2luZG93IiwiZ2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-beautify/js/lib/beautify-css.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/js-beautify/js/lib/beautify-html.js":
/*!**********************************************************!*\
  !*** ./node_modules/js-beautify/js/lib/beautify-html.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* AUTO-GENERATED. DO NOT MODIFY. */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>\n    https://beautifier.io/\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_inner_html (default false)  — indent <head> and <body> sections,\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n    inline (defaults to inline tags) - list of tags to be considered inline tags\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    content_unformatted (defaults to [\"pre\", \"textarea\"] tags) - list of tags, whose content shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n                                        Only works before elements, not inside tags or for text.\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n    end_with_newline (false)          - end with a newline\n    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_inner_html': false,\n      'indent_size': 2,\n      'indent_char': ' ',\n      'wrap_line_length': 78,\n      'brace_style': 'expand',\n      'preserve_newlines': true,\n      'max_preserve_newlines': 5,\n      'indent_handlebars': false,\n      'extra_liners': ['/html']\n    });\n*/ (function() {\n    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_html;\n    /******/ (function() {\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = [\n            ,\n            ,\n            /* 2 */ /***/ function(module) {\n                /*jshint node:true */ /*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function OutputLine(parent) {\n                    this.__parent = parent;\n                    this.__character_count = 0;\n                    // use indent_count as a marker for this.__lines that have preserved indentation\n                    this.__indent_count = -1;\n                    this.__alignment_count = 0;\n                    this.__wrap_point_index = 0;\n                    this.__wrap_point_character_count = 0;\n                    this.__wrap_point_indent_count = -1;\n                    this.__wrap_point_alignment_count = 0;\n                    this.__items = [];\n                }\n                OutputLine.prototype.clone_empty = function() {\n                    var line = new OutputLine(this.__parent);\n                    line.set_indent(this.__indent_count, this.__alignment_count);\n                    return line;\n                };\n                OutputLine.prototype.item = function(index) {\n                    if (index < 0) {\n                        return this.__items[this.__items.length + index];\n                    } else {\n                        return this.__items[index];\n                    }\n                };\n                OutputLine.prototype.has_match = function(pattern) {\n                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){\n                        if (this.__items[lastCheckedOutput].match(pattern)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n                OutputLine.prototype.set_indent = function(indent, alignment) {\n                    if (this.is_empty()) {\n                        this.__indent_count = indent || 0;\n                        this.__alignment_count = alignment || 0;\n                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n                    }\n                };\n                OutputLine.prototype._set_wrap_point = function() {\n                    if (this.__parent.wrap_line_length) {\n                        this.__wrap_point_index = this.__items.length;\n                        this.__wrap_point_character_count = this.__character_count;\n                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n                    }\n                };\n                OutputLine.prototype._should_wrap = function() {\n                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n                };\n                OutputLine.prototype._allow_wrap = function() {\n                    if (this._should_wrap()) {\n                        this.__parent.add_new_line();\n                        var next = this.__parent.current_line;\n                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n                        next.__items = this.__items.slice(this.__wrap_point_index);\n                        this.__items = this.__items.slice(0, this.__wrap_point_index);\n                        next.__character_count += this.__character_count - this.__wrap_point_character_count;\n                        this.__character_count = this.__wrap_point_character_count;\n                        if (next.__items[0] === \" \") {\n                            next.__items.splice(0, 1);\n                            next.__character_count -= 1;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                OutputLine.prototype.is_empty = function() {\n                    return this.__items.length === 0;\n                };\n                OutputLine.prototype.last = function() {\n                    if (!this.is_empty()) {\n                        return this.__items[this.__items.length - 1];\n                    } else {\n                        return null;\n                    }\n                };\n                OutputLine.prototype.push = function(item) {\n                    this.__items.push(item);\n                    var last_newline_index = item.lastIndexOf(\"\\n\");\n                    if (last_newline_index !== -1) {\n                        this.__character_count = item.length - last_newline_index;\n                    } else {\n                        this.__character_count += item.length;\n                    }\n                };\n                OutputLine.prototype.pop = function() {\n                    var item = null;\n                    if (!this.is_empty()) {\n                        item = this.__items.pop();\n                        this.__character_count -= item.length;\n                    }\n                    return item;\n                };\n                OutputLine.prototype._remove_indent = function() {\n                    if (this.__indent_count > 0) {\n                        this.__indent_count -= 1;\n                        this.__character_count -= this.__parent.indent_size;\n                    }\n                };\n                OutputLine.prototype._remove_wrap_indent = function() {\n                    if (this.__wrap_point_indent_count > 0) {\n                        this.__wrap_point_indent_count -= 1;\n                    }\n                };\n                OutputLine.prototype.trim = function() {\n                    while(this.last() === \" \"){\n                        this.__items.pop();\n                        this.__character_count -= 1;\n                    }\n                };\n                OutputLine.prototype.toString = function() {\n                    var result = \"\";\n                    if (this.is_empty()) {\n                        if (this.__parent.indent_empty_lines) {\n                            result = this.__parent.get_indent_string(this.__indent_count);\n                        }\n                    } else {\n                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n                        result += this.__items.join(\"\");\n                    }\n                    return result;\n                };\n                function IndentStringCache(options, baseIndentString) {\n                    this.__cache = [\n                        \"\"\n                    ];\n                    this.__indent_size = options.indent_size;\n                    this.__indent_string = options.indent_char;\n                    if (!options.indent_with_tabs) {\n                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n                    }\n                    // Set to null to continue support for auto detection of base indent\n                    baseIndentString = baseIndentString || \"\";\n                    if (options.indent_level > 0) {\n                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n                    }\n                    this.__base_string = baseIndentString;\n                    this.__base_string_length = baseIndentString.length;\n                }\n                IndentStringCache.prototype.get_indent_size = function(indent, column) {\n                    var result = this.__base_string_length;\n                    column = column || 0;\n                    if (indent < 0) {\n                        result = 0;\n                    }\n                    result += indent * this.__indent_size;\n                    result += column;\n                    return result;\n                };\n                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n                    var result = this.__base_string;\n                    column = column || 0;\n                    if (indent_level < 0) {\n                        indent_level = 0;\n                        result = \"\";\n                    }\n                    column += indent_level * this.__indent_size;\n                    this.__ensure_cache(column);\n                    result += this.__cache[column];\n                    return result;\n                };\n                IndentStringCache.prototype.__ensure_cache = function(column) {\n                    while(column >= this.__cache.length){\n                        this.__add_column();\n                    }\n                };\n                IndentStringCache.prototype.__add_column = function() {\n                    var column = this.__cache.length;\n                    var indent = 0;\n                    var result = \"\";\n                    if (this.__indent_size && column >= this.__indent_size) {\n                        indent = Math.floor(column / this.__indent_size);\n                        column -= indent * this.__indent_size;\n                        result = new Array(indent + 1).join(this.__indent_string);\n                    }\n                    if (column) {\n                        result += new Array(column + 1).join(\" \");\n                    }\n                    this.__cache.push(result);\n                };\n                function Output(options, baseIndentString) {\n                    this.__indent_cache = new IndentStringCache(options, baseIndentString);\n                    this.raw = false;\n                    this._end_with_newline = options.end_with_newline;\n                    this.indent_size = options.indent_size;\n                    this.wrap_line_length = options.wrap_line_length;\n                    this.indent_empty_lines = options.indent_empty_lines;\n                    this.__lines = [];\n                    this.previous_line = null;\n                    this.current_line = null;\n                    this.next_line = new OutputLine(this);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                    // initialize\n                    this.__add_outputline();\n                }\n                Output.prototype.__add_outputline = function() {\n                    this.previous_line = this.current_line;\n                    this.current_line = this.next_line.clone_empty();\n                    this.__lines.push(this.current_line);\n                };\n                Output.prototype.get_line_number = function() {\n                    return this.__lines.length;\n                };\n                Output.prototype.get_indent_string = function(indent, column) {\n                    return this.__indent_cache.get_indent_string(indent, column);\n                };\n                Output.prototype.get_indent_size = function(indent, column) {\n                    return this.__indent_cache.get_indent_size(indent, column);\n                };\n                Output.prototype.is_empty = function() {\n                    return !this.previous_line && this.current_line.is_empty();\n                };\n                Output.prototype.add_new_line = function(force_newline) {\n                    // never newline at the start of file\n                    // otherwise, newline only if we didn't just add one or we're forced\n                    if (this.is_empty() || !force_newline && this.just_added_newline()) {\n                        return false;\n                    }\n                    // if raw output is enabled, don't print additional newlines,\n                    // but still return True as though you had\n                    if (!this.raw) {\n                        this.__add_outputline();\n                    }\n                    return true;\n                };\n                Output.prototype.get_code = function(eol) {\n                    this.trim(true);\n                    // handle some edge cases where the last tokens\n                    // has text that ends with newline(s)\n                    var last_item = this.current_line.pop();\n                    if (last_item) {\n                        if (last_item[last_item.length - 1] === \"\\n\") {\n                            last_item = last_item.replace(/\\n+$/g, \"\");\n                        }\n                        this.current_line.push(last_item);\n                    }\n                    if (this._end_with_newline) {\n                        this.__add_outputline();\n                    }\n                    var sweet_code = this.__lines.join(\"\\n\");\n                    if (eol !== \"\\n\") {\n                        sweet_code = sweet_code.replace(/[\\n]/g, eol);\n                    }\n                    return sweet_code;\n                };\n                Output.prototype.set_wrap_point = function() {\n                    this.current_line._set_wrap_point();\n                };\n                Output.prototype.set_indent = function(indent, alignment) {\n                    indent = indent || 0;\n                    alignment = alignment || 0;\n                    // Next line stores alignment values\n                    this.next_line.set_indent(indent, alignment);\n                    // Never indent your first output indent at the start of the file\n                    if (this.__lines.length > 1) {\n                        this.current_line.set_indent(indent, alignment);\n                        return true;\n                    }\n                    this.current_line.set_indent();\n                    return false;\n                };\n                Output.prototype.add_raw_token = function(token) {\n                    for(var x = 0; x < token.newlines; x++){\n                        this.__add_outputline();\n                    }\n                    this.current_line.set_indent(-1);\n                    this.current_line.push(token.whitespace_before);\n                    this.current_line.push(token.text);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                };\n                Output.prototype.add_token = function(printable_token) {\n                    this.__add_space_before_token();\n                    this.current_line.push(printable_token);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = this.current_line._allow_wrap();\n                };\n                Output.prototype.__add_space_before_token = function() {\n                    if (this.space_before_token && !this.just_added_newline()) {\n                        if (!this.non_breaking_space) {\n                            this.set_wrap_point();\n                        }\n                        this.current_line.push(\" \");\n                    }\n                };\n                Output.prototype.remove_indent = function(index) {\n                    var output_length = this.__lines.length;\n                    while(index < output_length){\n                        this.__lines[index]._remove_indent();\n                        index++;\n                    }\n                    this.current_line._remove_wrap_indent();\n                };\n                Output.prototype.trim = function(eat_newlines) {\n                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;\n                    this.current_line.trim();\n                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){\n                        this.__lines.pop();\n                        this.current_line = this.__lines[this.__lines.length - 1];\n                        this.current_line.trim();\n                    }\n                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n                };\n                Output.prototype.just_added_newline = function() {\n                    return this.current_line.is_empty();\n                };\n                Output.prototype.just_added_blankline = function() {\n                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n                };\n                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n                    var index = this.__lines.length - 2;\n                    while(index >= 0){\n                        var potentialEmptyLine = this.__lines[index];\n                        if (potentialEmptyLine.is_empty()) {\n                            break;\n                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n                            this.__lines.splice(index + 1, 0, new OutputLine(this));\n                            this.previous_line = this.__lines[this.__lines.length - 2];\n                            break;\n                        }\n                        index--;\n                    }\n                };\n                module.exports.Output = Output;\n            /***/ },\n            /* 3 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Token(type, text, newlines, whitespace_before) {\n                    this.type = type;\n                    this.text = text;\n                    // comments_before are\n                    // comments that have a new line before them\n                    // and may or may not have a newline after\n                    // this is a set of comments before\n                    this.comments_before = null; /* inline comment*/ \n                    // this.comments_after =  new TokenStream(); // no new line before and newline after\n                    this.newlines = newlines || 0;\n                    this.whitespace_before = whitespace_before || \"\";\n                    this.parent = null;\n                    this.next = null;\n                    this.previous = null;\n                    this.opened = null;\n                    this.closed = null;\n                    this.directives = null;\n                }\n                module.exports.Token = Token;\n            /***/ },\n            ,\n            ,\n            /* 6 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Options(options, merge_child_field) {\n                    this.raw_options = _mergeOpts(options, merge_child_field);\n                    // Support passing the source text back with no change\n                    this.disabled = this._get_boolean(\"disabled\");\n                    this.eol = this._get_characters(\"eol\", \"auto\");\n                    this.end_with_newline = this._get_boolean(\"end_with_newline\");\n                    this.indent_size = this._get_number(\"indent_size\", 4);\n                    this.indent_char = this._get_characters(\"indent_char\", \" \");\n                    this.indent_level = this._get_number(\"indent_level\");\n                    this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n                    this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n                    if (!this.preserve_newlines) {\n                        this.max_preserve_newlines = 0;\n                    }\n                    this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n                    if (this.indent_with_tabs) {\n                        this.indent_char = \"\t\";\n                        // indent_size behavior changed after 1.8.6\n                        // It used to be that indent_size would be\n                        // set to 1 for indent_with_tabs. That is no longer needed and\n                        // actually doesn't make sense - why not use spaces? Further,\n                        // that might produce unexpected behavior - tabs being used\n                        // for single-column alignment. So, when indent_with_tabs is true\n                        // and indent_size is 1, reset indent_size to 4.\n                        if (this.indent_size === 1) {\n                            this.indent_size = 4;\n                        }\n                    }\n                    // Backwards compat with 1.3.x\n                    this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n                    this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']\n                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).\n                    // other values ignored\n                    this.templating = this._get_selection_list(\"templating\", [\n                        \"auto\",\n                        \"none\",\n                        \"django\",\n                        \"erb\",\n                        \"handlebars\",\n                        \"php\",\n                        \"smarty\"\n                    ], [\n                        \"auto\"\n                    ]);\n                }\n                Options.prototype._get_array = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || [];\n                    if (typeof option_value === \"object\") {\n                        if (option_value !== null && typeof option_value.concat === \"function\") {\n                            result = option_value.concat();\n                        }\n                    } else if (typeof option_value === \"string\") {\n                        result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n                    }\n                    return result;\n                };\n                Options.prototype._get_boolean = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = option_value === undefined ? !!default_value : !!option_value;\n                    return result;\n                };\n                Options.prototype._get_characters = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || \"\";\n                    if (typeof option_value === \"string\") {\n                        result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n                    }\n                    return result;\n                };\n                Options.prototype._get_number = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    default_value = parseInt(default_value, 10);\n                    if (isNaN(default_value)) {\n                        default_value = 0;\n                    }\n                    var result = parseInt(option_value, 10);\n                    if (isNaN(result)) {\n                        result = default_value;\n                    }\n                    return result;\n                };\n                Options.prototype._get_selection = function(name, selection_list, default_value) {\n                    var result = this._get_selection_list(name, selection_list, default_value);\n                    if (result.length !== 1) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result[0];\n                };\n                Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n                    if (!selection_list || selection_list.length === 0) {\n                        throw new Error(\"Selection list cannot be empty.\");\n                    }\n                    default_value = default_value || [\n                        selection_list[0]\n                    ];\n                    if (!this._is_valid_selection(default_value, selection_list)) {\n                        throw new Error(\"Invalid Default Value!\");\n                    }\n                    var result = this._get_array(name, default_value);\n                    if (!this._is_valid_selection(result, selection_list)) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result;\n                };\n                Options.prototype._is_valid_selection = function(result, selection_list) {\n                    return result.length && selection_list.length && !result.some(function(item) {\n                        return selection_list.indexOf(item) === -1;\n                    });\n                };\n                // merges child options up with the parent options object\n                // Example: obj = {a: 1, b: {a: 2}}\n                //          mergeOpts(obj, 'b')\n                //\n                //          Returns: {a: 2}\n                function _mergeOpts(allOptions, childFieldName) {\n                    var finalOpts = {};\n                    allOptions = _normalizeOpts(allOptions);\n                    var name;\n                    for(name in allOptions){\n                        if (name !== childFieldName) {\n                            finalOpts[name] = allOptions[name];\n                        }\n                    }\n                    //merge in the per type settings for the childFieldName\n                    if (childFieldName && allOptions[childFieldName]) {\n                        for(name in allOptions[childFieldName]){\n                            finalOpts[name] = allOptions[childFieldName][name];\n                        }\n                    }\n                    return finalOpts;\n                }\n                function _normalizeOpts(options) {\n                    var convertedOpts = {};\n                    var key;\n                    for(key in options){\n                        var newKey = key.replace(/-/g, \"_\");\n                        convertedOpts[newKey] = options[key];\n                    }\n                    return convertedOpts;\n                }\n                module.exports.Options = Options;\n                module.exports.normalizeOpts = _normalizeOpts;\n                module.exports.mergeOpts = _mergeOpts;\n            /***/ },\n            ,\n            /* 8 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n                function InputScanner(input_string) {\n                    this.__input = input_string || \"\";\n                    this.__input_length = this.__input.length;\n                    this.__position = 0;\n                }\n                InputScanner.prototype.restart = function() {\n                    this.__position = 0;\n                };\n                InputScanner.prototype.back = function() {\n                    if (this.__position > 0) {\n                        this.__position -= 1;\n                    }\n                };\n                InputScanner.prototype.hasNext = function() {\n                    return this.__position < this.__input_length;\n                };\n                InputScanner.prototype.next = function() {\n                    var val = null;\n                    if (this.hasNext()) {\n                        val = this.__input.charAt(this.__position);\n                        this.__position += 1;\n                    }\n                    return val;\n                };\n                InputScanner.prototype.peek = function(index) {\n                    var val = null;\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        val = this.__input.charAt(index);\n                    }\n                    return val;\n                };\n                // This is a JavaScript only helper function (not in python)\n                // Javascript doesn't have a match method\n                // and not all implementation support \"sticky\" flag.\n                // If they do not support sticky then both this.match() and this.test() method\n                // must get the match and check the index of the match.\n                // If sticky is supported and set, this method will use it.\n                // Otherwise it will check that global is set, and fall back to the slower method.\n                InputScanner.prototype.__match = function(pattern, index) {\n                    pattern.lastIndex = index;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n                        if (pattern_match.index !== index) {\n                            pattern_match = null;\n                        }\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.test = function(pattern, index) {\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        return !!this.__match(pattern, index);\n                    } else {\n                        return false;\n                    }\n                };\n                InputScanner.prototype.testChar = function(pattern, index) {\n                    // test one character regex match\n                    var val = this.peek(index);\n                    pattern.lastIndex = 0;\n                    return val !== null && pattern.test(val);\n                };\n                InputScanner.prototype.match = function(pattern) {\n                    var pattern_match = this.__match(pattern, this.__position);\n                    if (pattern_match) {\n                        this.__position += pattern_match[0].length;\n                    } else {\n                        pattern_match = null;\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n                    var val = \"\";\n                    var match;\n                    if (starting_pattern) {\n                        match = this.match(starting_pattern);\n                        if (match) {\n                            val += match[0];\n                        }\n                    }\n                    if (until_pattern && (match || !starting_pattern)) {\n                        val += this.readUntil(until_pattern, until_after);\n                    }\n                    return val;\n                };\n                InputScanner.prototype.readUntil = function(pattern, until_after) {\n                    var val = \"\";\n                    var match_index = this.__position;\n                    pattern.lastIndex = this.__position;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match) {\n                        match_index = pattern_match.index;\n                        if (until_after) {\n                            match_index += pattern_match[0].length;\n                        }\n                    } else {\n                        match_index = this.__input_length;\n                    }\n                    val = this.__input.substring(this.__position, match_index);\n                    this.__position = match_index;\n                    return val;\n                };\n                InputScanner.prototype.readUntilAfter = function(pattern) {\n                    return this.readUntil(pattern, true);\n                };\n                InputScanner.prototype.get_regexp = function(pattern, match_from) {\n                    var result = null;\n                    var flags = \"g\";\n                    if (match_from && regexp_has_sticky) {\n                        flags = \"y\";\n                    }\n                    // strings are converted to regexp\n                    if (typeof pattern === \"string\" && pattern !== \"\") {\n                        // result = new RegExp(pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), flags);\n                        result = new RegExp(pattern, flags);\n                    } else if (pattern) {\n                        result = new RegExp(pattern.source, flags);\n                    }\n                    return result;\n                };\n                InputScanner.prototype.get_literal_regexp = function(literal_string) {\n                    return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n                };\n                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {\n                    var start = this.__position;\n                    var val = this.readUntilAfter(pattern);\n                    this.__position = start;\n                    return val;\n                };\n                InputScanner.prototype.lookBack = function(testVal) {\n                    var start = this.__position - 1;\n                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n                };\n                module.exports.InputScanner = InputScanner;\n            /***/ },\n            /* 9 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_41623__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var InputScanner = __nested_webpack_require_41623__(8).InputScanner;\n                var Token = __nested_webpack_require_41623__(3).Token;\n                var TokenStream = __nested_webpack_require_41623__(10).TokenStream;\n                var WhitespacePattern = __nested_webpack_require_41623__(11).WhitespacePattern;\n                var TOKEN = {\n                    START: \"TK_START\",\n                    RAW: \"TK_RAW\",\n                    EOF: \"TK_EOF\"\n                };\n                var Tokenizer = function(input_string, options) {\n                    this._input = new InputScanner(input_string);\n                    this._options = options || {};\n                    this.__tokens = null;\n                    this._patterns = {};\n                    this._patterns.whitespace = new WhitespacePattern(this._input);\n                };\n                Tokenizer.prototype.tokenize = function() {\n                    this._input.restart();\n                    this.__tokens = new TokenStream();\n                    this._reset();\n                    var current;\n                    var previous = new Token(TOKEN.START, \"\");\n                    var open_token = null;\n                    var open_stack = [];\n                    var comments = new TokenStream();\n                    while(previous.type !== TOKEN.EOF){\n                        current = this._get_next_token(previous, open_token);\n                        while(this._is_comment(current)){\n                            comments.add(current);\n                            current = this._get_next_token(previous, open_token);\n                        }\n                        if (!comments.isEmpty()) {\n                            current.comments_before = comments;\n                            comments = new TokenStream();\n                        }\n                        current.parent = open_token;\n                        if (this._is_opening(current)) {\n                            open_stack.push(open_token);\n                            open_token = current;\n                        } else if (open_token && this._is_closing(current, open_token)) {\n                            current.opened = open_token;\n                            open_token.closed = current;\n                            open_token = open_stack.pop();\n                            current.parent = open_token;\n                        }\n                        current.previous = previous;\n                        previous.next = current;\n                        this.__tokens.add(current);\n                        previous = current;\n                    }\n                    return this.__tokens;\n                };\n                Tokenizer.prototype._is_first_token = function() {\n                    return this.__tokens.isEmpty();\n                };\n                Tokenizer.prototype._reset = function() {};\n                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n                    this._readWhitespace();\n                    var resulting_string = this._input.read(/.+/g);\n                    if (resulting_string) {\n                        return this._create_token(TOKEN.RAW, resulting_string);\n                    } else {\n                        return this._create_token(TOKEN.EOF, \"\");\n                    }\n                };\n                Tokenizer.prototype._is_comment = function(current_token) {\n                    return false;\n                };\n                Tokenizer.prototype._is_opening = function(current_token) {\n                    return false;\n                };\n                Tokenizer.prototype._is_closing = function(current_token, open_token) {\n                    return false;\n                };\n                Tokenizer.prototype._create_token = function(type, text) {\n                    var token = new Token(type, text, this._patterns.whitespace.newline_count, this._patterns.whitespace.whitespace_before_token);\n                    return token;\n                };\n                Tokenizer.prototype._readWhitespace = function() {\n                    return this._patterns.whitespace.read();\n                };\n                module.exports.Tokenizer = Tokenizer;\n                module.exports.TOKEN = TOKEN;\n            /***/ },\n            /* 10 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function TokenStream(parent_token) {\n                    // private\n                    this.__tokens = [];\n                    this.__tokens_length = this.__tokens.length;\n                    this.__position = 0;\n                    this.__parent_token = parent_token;\n                }\n                TokenStream.prototype.restart = function() {\n                    this.__position = 0;\n                };\n                TokenStream.prototype.isEmpty = function() {\n                    return this.__tokens_length === 0;\n                };\n                TokenStream.prototype.hasNext = function() {\n                    return this.__position < this.__tokens_length;\n                };\n                TokenStream.prototype.next = function() {\n                    var val = null;\n                    if (this.hasNext()) {\n                        val = this.__tokens[this.__position];\n                        this.__position += 1;\n                    }\n                    return val;\n                };\n                TokenStream.prototype.peek = function(index) {\n                    var val = null;\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__tokens_length) {\n                        val = this.__tokens[index];\n                    }\n                    return val;\n                };\n                TokenStream.prototype.add = function(token) {\n                    if (this.__parent_token) {\n                        token.parent = this.__parent_token;\n                    }\n                    this.__tokens.push(token);\n                    this.__tokens_length += 1;\n                };\n                module.exports.TokenStream = TokenStream;\n            /***/ },\n            /* 11 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_50157__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Pattern = __nested_webpack_require_50157__(12).Pattern;\n                function WhitespacePattern(input_scanner, parent) {\n                    Pattern.call(this, input_scanner, parent);\n                    if (parent) {\n                        this._line_regexp = this._input.get_regexp(parent._line_regexp);\n                    } else {\n                        this.__set_whitespace_patterns(\"\", \"\");\n                    }\n                    this.newline_count = 0;\n                    this.whitespace_before_token = \"\";\n                }\n                WhitespacePattern.prototype = new Pattern();\n                WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n                    whitespace_chars += \"\\\\t \";\n                    newline_chars += \"\\\\n\\\\r\";\n                    this._match_pattern = this._input.get_regexp(\"[\" + whitespace_chars + newline_chars + \"]+\", true);\n                    this._newline_regexp = this._input.get_regexp(\"\\\\r\\\\n|[\" + newline_chars + \"]\");\n                };\n                WhitespacePattern.prototype.read = function() {\n                    this.newline_count = 0;\n                    this.whitespace_before_token = \"\";\n                    var resulting_string = this._input.read(this._match_pattern);\n                    if (resulting_string === \" \") {\n                        this.whitespace_before_token = \" \";\n                    } else if (resulting_string) {\n                        var matches = this.__split(this._newline_regexp, resulting_string);\n                        this.newline_count = matches.length - 1;\n                        this.whitespace_before_token = matches[this.newline_count];\n                    }\n                    return resulting_string;\n                };\n                WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n                    var result = this._create();\n                    result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n                    result._update();\n                    return result;\n                };\n                WhitespacePattern.prototype._create = function() {\n                    return new WhitespacePattern(this._input, this);\n                };\n                WhitespacePattern.prototype.__split = function(regexp, input_string) {\n                    regexp.lastIndex = 0;\n                    var start_index = 0;\n                    var result = [];\n                    var next_match = regexp.exec(input_string);\n                    while(next_match){\n                        result.push(input_string.substring(start_index, next_match.index));\n                        start_index = next_match.index + next_match[0].length;\n                        next_match = regexp.exec(input_string);\n                    }\n                    if (start_index < input_string.length) {\n                        result.push(input_string.substring(start_index, input_string.length));\n                    } else {\n                        result.push(\"\");\n                    }\n                    return result;\n                };\n                module.exports.WhitespacePattern = WhitespacePattern;\n            /***/ },\n            /* 12 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Pattern(input_scanner, parent) {\n                    this._input = input_scanner;\n                    this._starting_pattern = null;\n                    this._match_pattern = null;\n                    this._until_pattern = null;\n                    this._until_after = false;\n                    if (parent) {\n                        this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n                        this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n                        this._until_pattern = this._input.get_regexp(parent._until_pattern);\n                        this._until_after = parent._until_after;\n                    }\n                }\n                Pattern.prototype.read = function() {\n                    var result = this._input.read(this._starting_pattern);\n                    if (!this._starting_pattern || result) {\n                        result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n                    }\n                    return result;\n                };\n                Pattern.prototype.read_match = function() {\n                    return this._input.match(this._match_pattern);\n                };\n                Pattern.prototype.until_after = function(pattern) {\n                    var result = this._create();\n                    result._until_after = true;\n                    result._until_pattern = this._input.get_regexp(pattern);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.until = function(pattern) {\n                    var result = this._create();\n                    result._until_after = false;\n                    result._until_pattern = this._input.get_regexp(pattern);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.starting_with = function(pattern) {\n                    var result = this._create();\n                    result._starting_pattern = this._input.get_regexp(pattern, true);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.matching = function(pattern) {\n                    var result = this._create();\n                    result._match_pattern = this._input.get_regexp(pattern, true);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype._create = function() {\n                    return new Pattern(this._input, this);\n                };\n                Pattern.prototype._update = function() {};\n                module.exports.Pattern = Pattern;\n            /***/ },\n            /* 13 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Directives(start_block_pattern, end_block_pattern) {\n                    start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n                    end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n                    this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n                }\n                Directives.prototype.get_directives = function(text) {\n                    if (!text.match(this.__directives_block_pattern)) {\n                        return null;\n                    }\n                    var directives = {};\n                    this.__directive_pattern.lastIndex = 0;\n                    var directive_match = this.__directive_pattern.exec(text);\n                    while(directive_match){\n                        directives[directive_match[1]] = directive_match[2];\n                        directive_match = this.__directive_pattern.exec(text);\n                    }\n                    return directives;\n                };\n                Directives.prototype.readIgnored = function(input) {\n                    return input.readUntilAfter(this.__directives_end_ignore_pattern);\n                };\n                module.exports.Directives = Directives;\n            /***/ },\n            /* 14 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_61549__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Pattern = __nested_webpack_require_61549__(12).Pattern;\n                var template_names = {\n                    django: false,\n                    erb: false,\n                    handlebars: false,\n                    php: false,\n                    smarty: false\n                };\n                // This lets templates appear anywhere we would do a readUntil\n                // The cost is higher but it is pay to play.\n                function TemplatablePattern(input_scanner, parent) {\n                    Pattern.call(this, input_scanner, parent);\n                    this.__template_pattern = null;\n                    this._disabled = Object.assign({}, template_names);\n                    this._excluded = Object.assign({}, template_names);\n                    if (parent) {\n                        this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n                        this._excluded = Object.assign(this._excluded, parent._excluded);\n                        this._disabled = Object.assign(this._disabled, parent._disabled);\n                    }\n                    var pattern = new Pattern(input_scanner);\n                    this.__patterns = {\n                        handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n                        handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n                        handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n                        php: pattern.starting_with(/<\\?(?:[= ]|php)/).until_after(/\\?>/),\n                        erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n                        // django coflicts with handlebars a bit.\n                        django: pattern.starting_with(/{%/).until_after(/%}/),\n                        django_value: pattern.starting_with(/{{/).until_after(/}}/),\n                        django_comment: pattern.starting_with(/{#/).until_after(/#}/),\n                        smarty: pattern.starting_with(/{(?=[^}{\\s\\n])/).until_after(/[^\\s\\n]}/),\n                        smarty_comment: pattern.starting_with(/{\\*/).until_after(/\\*}/),\n                        smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\\/literal}/)\n                    };\n                }\n                TemplatablePattern.prototype = new Pattern();\n                TemplatablePattern.prototype._create = function() {\n                    return new TemplatablePattern(this._input, this);\n                };\n                TemplatablePattern.prototype._update = function() {\n                    this.__set_templated_pattern();\n                };\n                TemplatablePattern.prototype.disable = function(language) {\n                    var result = this._create();\n                    result._disabled[language] = true;\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.read_options = function(options) {\n                    var result = this._create();\n                    for(var language in template_names){\n                        result._disabled[language] = options.templating.indexOf(language) === -1;\n                    }\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.exclude = function(language) {\n                    var result = this._create();\n                    result._excluded[language] = true;\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.read = function() {\n                    var result = \"\";\n                    if (this._match_pattern) {\n                        result = this._input.read(this._starting_pattern);\n                    } else {\n                        result = this._input.read(this._starting_pattern, this.__template_pattern);\n                    }\n                    var next = this._read_template();\n                    while(next){\n                        if (this._match_pattern) {\n                            next += this._input.read(this._match_pattern);\n                        } else {\n                            next += this._input.readUntil(this.__template_pattern);\n                        }\n                        result += next;\n                        next = this._read_template();\n                    }\n                    if (this._until_after) {\n                        result += this._input.readUntilAfter(this._until_pattern);\n                    }\n                    return result;\n                };\n                TemplatablePattern.prototype.__set_templated_pattern = function() {\n                    var items = [];\n                    if (!this._disabled.php) {\n                        items.push(this.__patterns.php._starting_pattern.source);\n                    }\n                    if (!this._disabled.handlebars) {\n                        items.push(this.__patterns.handlebars._starting_pattern.source);\n                    }\n                    if (!this._disabled.erb) {\n                        items.push(this.__patterns.erb._starting_pattern.source);\n                    }\n                    if (!this._disabled.django) {\n                        items.push(this.__patterns.django._starting_pattern.source);\n                        // The starting pattern for django is more complex because it has different\n                        // patterns for value, comment, and other sections\n                        items.push(this.__patterns.django_value._starting_pattern.source);\n                        items.push(this.__patterns.django_comment._starting_pattern.source);\n                    }\n                    if (!this._disabled.smarty) {\n                        items.push(this.__patterns.smarty._starting_pattern.source);\n                    }\n                    if (this._until_pattern) {\n                        items.push(this._until_pattern.source);\n                    }\n                    this.__template_pattern = this._input.get_regexp(\"(?:\" + items.join(\"|\") + \")\");\n                };\n                TemplatablePattern.prototype._read_template = function() {\n                    var resulting_string = \"\";\n                    var c = this._input.peek();\n                    if (c === \"<\") {\n                        var peek1 = this._input.peek(1);\n                        //if we're in a comment, do something special\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we just look for the appropriate close tag\n                        if (!this._disabled.php && !this._excluded.php && peek1 === \"?\") {\n                            resulting_string = resulting_string || this.__patterns.php.read();\n                        }\n                        if (!this._disabled.erb && !this._excluded.erb && peek1 === \"%\") {\n                            resulting_string = resulting_string || this.__patterns.erb.read();\n                        }\n                    } else if (c === \"{\") {\n                        if (!this._disabled.handlebars && !this._excluded.handlebars) {\n                            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();\n                            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();\n                            resulting_string = resulting_string || this.__patterns.handlebars.read();\n                        }\n                        if (!this._disabled.django) {\n                            // django coflicts with handlebars a bit.\n                            if (!this._excluded.django && !this._excluded.handlebars) {\n                                resulting_string = resulting_string || this.__patterns.django_value.read();\n                            }\n                            if (!this._excluded.django) {\n                                resulting_string = resulting_string || this.__patterns.django_comment.read();\n                                resulting_string = resulting_string || this.__patterns.django.read();\n                            }\n                        }\n                        if (!this._disabled.smarty) {\n                            // smarty cannot be enabled with django or handlebars enabled\n                            if (this._disabled.django && this._disabled.handlebars) {\n                                resulting_string = resulting_string || this.__patterns.smarty_comment.read();\n                                resulting_string = resulting_string || this.__patterns.smarty_literal.read();\n                                resulting_string = resulting_string || this.__patterns.smarty.read();\n                            }\n                        }\n                    }\n                    return resulting_string;\n                };\n                module.exports.TemplatablePattern = TemplatablePattern;\n            /***/ },\n            ,\n            ,\n            ,\n            /* 18 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_71896__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Beautifier = __nested_webpack_require_71896__(19).Beautifier, Options = __nested_webpack_require_71896__(20).Options;\n                function style_html(html_source, options, js_beautify, css_beautify) {\n                    var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);\n                    return beautifier.beautify();\n                }\n                module.exports = style_html;\n                module.exports.defaultOptions = function() {\n                    return new Options();\n                };\n            /***/ },\n            /* 19 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_73732__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Options = __nested_webpack_require_73732__(20).Options;\n                var Output = __nested_webpack_require_73732__(2).Output;\n                var Tokenizer = __nested_webpack_require_73732__(21).Tokenizer;\n                var TOKEN = __nested_webpack_require_73732__(21).TOKEN;\n                var lineBreak = /\\r\\n|[\\r\\n]/;\n                var allLineBreaks = /\\r\\n|[\\r\\n]/g;\n                var Printer = function(options, base_indent_string) {\n                    this.indent_level = 0;\n                    this.alignment_size = 0;\n                    this.max_preserve_newlines = options.max_preserve_newlines;\n                    this.preserve_newlines = options.preserve_newlines;\n                    this._output = new Output(options, base_indent_string);\n                };\n                Printer.prototype.current_line_has_match = function(pattern) {\n                    return this._output.current_line.has_match(pattern);\n                };\n                Printer.prototype.set_space_before_token = function(value, non_breaking) {\n                    this._output.space_before_token = value;\n                    this._output.non_breaking_space = non_breaking;\n                };\n                Printer.prototype.set_wrap_point = function() {\n                    this._output.set_indent(this.indent_level, this.alignment_size);\n                    this._output.set_wrap_point();\n                };\n                Printer.prototype.add_raw_token = function(token) {\n                    this._output.add_raw_token(token);\n                };\n                Printer.prototype.print_preserved_newlines = function(raw_token) {\n                    var newlines = 0;\n                    if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {\n                        newlines = raw_token.newlines ? 1 : 0;\n                    }\n                    if (this.preserve_newlines) {\n                        newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;\n                    }\n                    for(var n = 0; n < newlines; n++){\n                        this.print_newline(n > 0);\n                    }\n                    return newlines !== 0;\n                };\n                Printer.prototype.traverse_whitespace = function(raw_token) {\n                    if (raw_token.whitespace_before || raw_token.newlines) {\n                        if (!this.print_preserved_newlines(raw_token)) {\n                            this._output.space_before_token = true;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Printer.prototype.previous_token_wrapped = function() {\n                    return this._output.previous_token_wrapped;\n                };\n                Printer.prototype.print_newline = function(force) {\n                    this._output.add_new_line(force);\n                };\n                Printer.prototype.print_token = function(token) {\n                    if (token.text) {\n                        this._output.set_indent(this.indent_level, this.alignment_size);\n                        this._output.add_token(token.text);\n                    }\n                };\n                Printer.prototype.indent = function() {\n                    this.indent_level++;\n                };\n                Printer.prototype.get_full_indent = function(level) {\n                    level = this.indent_level + (level || 0);\n                    if (level < 1) {\n                        return \"\";\n                    }\n                    return this._output.get_indent_string(level);\n                };\n                var get_type_attribute = function(start_token) {\n                    var result = null;\n                    var raw_token = start_token.next;\n                    // Search attributes for a type attribute\n                    while(raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token){\n                        if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === \"type\") {\n                            if (raw_token.next && raw_token.next.type === TOKEN.EQUALS && raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {\n                                result = raw_token.next.next.text;\n                            }\n                            break;\n                        }\n                        raw_token = raw_token.next;\n                    }\n                    return result;\n                };\n                var get_custom_beautifier_name = function(tag_check, raw_token) {\n                    var typeAttribute = null;\n                    var result = null;\n                    if (!raw_token.closed) {\n                        return null;\n                    }\n                    if (tag_check === \"script\") {\n                        typeAttribute = \"text/javascript\";\n                    } else if (tag_check === \"style\") {\n                        typeAttribute = \"text/css\";\n                    }\n                    typeAttribute = get_type_attribute(raw_token) || typeAttribute;\n                    // For script and style tags that have a type attribute, only enable custom beautifiers for matching values\n                    // For those without a type attribute use default;\n                    if (typeAttribute.search(\"text/css\") > -1) {\n                        result = \"css\";\n                    } else if (typeAttribute.search(/module|((text|application|dojo)\\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\\+)?json|method|aspect))/) > -1) {\n                        result = \"javascript\";\n                    } else if (typeAttribute.search(/(text|application|dojo)\\/(x-)?(html)/) > -1) {\n                        result = \"html\";\n                    } else if (typeAttribute.search(/test\\/null/) > -1) {\n                        // Test only mime-type for testing the beautifier when null is passed as beautifing function\n                        result = \"null\";\n                    }\n                    return result;\n                };\n                function in_array(what, arr) {\n                    return arr.indexOf(what) !== -1;\n                }\n                function TagFrame(parent, parser_token, indent_level) {\n                    this.parent = parent || null;\n                    this.tag = parser_token ? parser_token.tag_name : \"\";\n                    this.indent_level = indent_level || 0;\n                    this.parser_token = parser_token || null;\n                }\n                function TagStack(printer) {\n                    this._printer = printer;\n                    this._current_frame = null;\n                }\n                TagStack.prototype.get_parser_token = function() {\n                    return this._current_frame ? this._current_frame.parser_token : null;\n                };\n                TagStack.prototype.record_tag = function(parser_token) {\n                    var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);\n                    this._current_frame = new_frame;\n                };\n                TagStack.prototype._try_pop_frame = function(frame) {\n                    var parser_token = null;\n                    if (frame) {\n                        parser_token = frame.parser_token;\n                        this._printer.indent_level = frame.indent_level;\n                        this._current_frame = frame.parent;\n                    }\n                    return parser_token;\n                };\n                TagStack.prototype._get_frame = function(tag_list, stop_list) {\n                    var frame = this._current_frame;\n                    while(frame){\n                        if (tag_list.indexOf(frame.tag) !== -1) {\n                            break;\n                        } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {\n                            frame = null;\n                            break;\n                        }\n                        frame = frame.parent;\n                    }\n                    return frame;\n                };\n                TagStack.prototype.try_pop = function(tag, stop_list) {\n                    var frame = this._get_frame([\n                        tag\n                    ], stop_list);\n                    return this._try_pop_frame(frame);\n                };\n                TagStack.prototype.indent_to_tag = function(tag_list) {\n                    var frame = this._get_frame(tag_list);\n                    if (frame) {\n                        this._printer.indent_level = frame.indent_level;\n                    }\n                };\n                function Beautifier(source_text, options, js_beautify, css_beautify) {\n                    //Wrapper function to invoke all the necessary constructors and deal with the output.\n                    this._source_text = source_text || \"\";\n                    options = options || {};\n                    this._js_beautify = js_beautify;\n                    this._css_beautify = css_beautify;\n                    this._tag_stack = null;\n                    // Allow the setting of language/file-type specific options\n                    // with inheritance of overall settings\n                    var optionHtml = new Options(options, \"html\");\n                    this._options = optionHtml;\n                    this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, \"force\".length) === \"force\";\n                    this._is_wrap_attributes_force_expand_multiline = this._options.wrap_attributes === \"force-expand-multiline\";\n                    this._is_wrap_attributes_force_aligned = this._options.wrap_attributes === \"force-aligned\";\n                    this._is_wrap_attributes_aligned_multiple = this._options.wrap_attributes === \"aligned-multiple\";\n                    this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, \"preserve\".length) === \"preserve\";\n                    this._is_wrap_attributes_preserve_aligned = this._options.wrap_attributes === \"preserve-aligned\";\n                }\n                Beautifier.prototype.beautify = function() {\n                    // if disabled, return the input unchanged.\n                    if (this._options.disabled) {\n                        return this._source_text;\n                    }\n                    var source_text = this._source_text;\n                    var eol = this._options.eol;\n                    if (this._options.eol === \"auto\") {\n                        eol = \"\\n\";\n                        if (source_text && lineBreak.test(source_text)) {\n                            eol = source_text.match(lineBreak)[0];\n                        }\n                    }\n                    // HACK: newline parsing inconsistent. This brute force normalizes the input.\n                    source_text = source_text.replace(allLineBreaks, \"\\n\");\n                    var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n                    var last_token = {\n                        text: \"\",\n                        type: \"\"\n                    };\n                    var last_tag_token = new TagOpenParserToken();\n                    var printer = new Printer(this._options, baseIndentString);\n                    var tokens = new Tokenizer(source_text, this._options).tokenize();\n                    this._tag_stack = new TagStack(printer);\n                    var parser_token = null;\n                    var raw_token = tokens.next();\n                    while(raw_token.type !== TOKEN.EOF){\n                        if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {\n                            parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token, tokens);\n                            last_tag_token = parser_token;\n                        } else if (raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE || raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete) {\n                            parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, last_token);\n                        } else if (raw_token.type === TOKEN.TAG_CLOSE) {\n                            parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);\n                        } else if (raw_token.type === TOKEN.TEXT) {\n                            parser_token = this._handle_text(printer, raw_token, last_tag_token);\n                        } else {\n                            // This should never happen, but if it does. Print the raw token\n                            printer.add_raw_token(raw_token);\n                        }\n                        last_token = parser_token;\n                        raw_token = tokens.next();\n                    }\n                    var sweet_code = printer._output.get_code(eol);\n                    return sweet_code;\n                };\n                Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {\n                    var parser_token = {\n                        text: raw_token.text,\n                        type: raw_token.type\n                    };\n                    printer.alignment_size = 0;\n                    last_tag_token.tag_complete = true;\n                    printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n                    if (last_tag_token.is_unformatted) {\n                        printer.add_raw_token(raw_token);\n                    } else {\n                        if (last_tag_token.tag_start_char === \"<\") {\n                            printer.set_space_before_token(raw_token.text[0] === \"/\", true); // space before />, no space before >\n                            if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {\n                                printer.print_newline(false);\n                            }\n                        }\n                        printer.print_token(raw_token);\n                    }\n                    if (last_tag_token.indent_content && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n                        printer.indent();\n                        // only indent once per opened tag\n                        last_tag_token.indent_content = false;\n                    }\n                    if (!last_tag_token.is_inline_element && !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {\n                        printer.set_wrap_point();\n                    }\n                    return parser_token;\n                };\n                Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, last_token) {\n                    var wrapped = last_tag_token.has_wrapped_attrs;\n                    var parser_token = {\n                        text: raw_token.text,\n                        type: raw_token.type\n                    };\n                    printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== \"\", true);\n                    if (last_tag_token.is_unformatted) {\n                        printer.add_raw_token(raw_token);\n                    } else if (last_tag_token.tag_start_char === \"{\" && raw_token.type === TOKEN.TEXT) {\n                        // For the insides of handlebars allow newlines or a single space between open and contents\n                        if (printer.print_preserved_newlines(raw_token)) {\n                            raw_token.newlines = 0;\n                            printer.add_raw_token(raw_token);\n                        } else {\n                            printer.print_token(raw_token);\n                        }\n                    } else {\n                        if (raw_token.type === TOKEN.ATTRIBUTE) {\n                            printer.set_space_before_token(true);\n                        } else if (raw_token.type === TOKEN.EQUALS) {\n                            printer.set_space_before_token(false);\n                        } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) {\n                            printer.set_space_before_token(false);\n                        }\n                        if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === \"<\") {\n                            if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {\n                                printer.traverse_whitespace(raw_token);\n                                wrapped = wrapped || raw_token.newlines !== 0;\n                            }\n                            // Wrap for 'force' options, and if the number of attributes is at least that specified in 'wrap_attributes_min_attrs':\n                            // 1. always wrap the second and beyond attributes\n                            // 2. wrap the first attribute only if 'force-expand-multiline' is specified\n                            if (this._is_wrap_attributes_force && last_tag_token.attr_count >= this._options.wrap_attributes_min_attrs && (last_token.type !== TOKEN.TAG_OPEN || // ie. second attribute and beyond\n                            this._is_wrap_attributes_force_expand_multiline)) {\n                                printer.print_newline(false);\n                                wrapped = true;\n                            }\n                        }\n                        printer.print_token(raw_token);\n                        wrapped = wrapped || printer.previous_token_wrapped();\n                        last_tag_token.has_wrapped_attrs = wrapped;\n                    }\n                    return parser_token;\n                };\n                Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {\n                    var parser_token = {\n                        text: raw_token.text,\n                        type: \"TK_CONTENT\"\n                    };\n                    if (last_tag_token.custom_beautifier_name) {\n                        this._print_custom_beatifier_text(printer, raw_token, last_tag_token);\n                    } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {\n                        printer.add_raw_token(raw_token);\n                    } else {\n                        printer.traverse_whitespace(raw_token);\n                        printer.print_token(raw_token);\n                    }\n                    return parser_token;\n                };\n                Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {\n                    var local = this;\n                    if (raw_token.text !== \"\") {\n                        var text = raw_token.text, _beautifier, script_indent_level = 1, pre = \"\", post = \"\";\n                        if (last_tag_token.custom_beautifier_name === \"javascript\" && typeof this._js_beautify === \"function\") {\n                            _beautifier = this._js_beautify;\n                        } else if (last_tag_token.custom_beautifier_name === \"css\" && typeof this._css_beautify === \"function\") {\n                            _beautifier = this._css_beautify;\n                        } else if (last_tag_token.custom_beautifier_name === \"html\") {\n                            _beautifier = function(html_source, options) {\n                                var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);\n                                return beautifier.beautify();\n                            };\n                        }\n                        if (this._options.indent_scripts === \"keep\") {\n                            script_indent_level = 0;\n                        } else if (this._options.indent_scripts === \"separate\") {\n                            script_indent_level = -printer.indent_level;\n                        }\n                        var indentation = printer.get_full_indent(script_indent_level);\n                        // if there is at least one empty line at the end of this text, strip it\n                        // we'll be adding one back after the text but before the containing tag.\n                        text = text.replace(/\\n[ \\t]*$/, \"\");\n                        // Handle the case where content is wrapped in a comment or cdata.\n                        if (last_tag_token.custom_beautifier_name !== \"html\" && text[0] === \"<\" && text.match(/^(<!--|<!\\[CDATA\\[)/)) {\n                            var matched = /^(<!--[^\\n]*|<!\\[CDATA\\[)(\\n?)([ \\t\\n]*)([\\s\\S]*)(-->|]]>)$/.exec(text);\n                            // if we start to wrap but don't finish, print raw\n                            if (!matched) {\n                                printer.add_raw_token(raw_token);\n                                return;\n                            }\n                            pre = indentation + matched[1] + \"\\n\";\n                            text = matched[4];\n                            if (matched[5]) {\n                                post = indentation + matched[5];\n                            }\n                            // if there is at least one empty line at the end of this text, strip it\n                            // we'll be adding one back after the text but before the containing tag.\n                            text = text.replace(/\\n[ \\t]*$/, \"\");\n                            if (matched[2] || matched[3].indexOf(\"\\n\") !== -1) {\n                                // if the first line of the non-comment text has spaces\n                                // use that as the basis for indenting in null case.\n                                matched = matched[3].match(/[ \\t]+$/);\n                                if (matched) {\n                                    raw_token.whitespace_before = matched[0];\n                                }\n                            }\n                        }\n                        if (text) {\n                            if (_beautifier) {\n                                // call the Beautifier if avaliable\n                                var Child_options = function() {\n                                    this.eol = \"\\n\";\n                                };\n                                Child_options.prototype = this._options.raw_options;\n                                var child_options = new Child_options();\n                                text = _beautifier(indentation + text, child_options);\n                            } else {\n                                // simply indent the string otherwise\n                                var white = raw_token.whitespace_before;\n                                if (white) {\n                                    text = text.replace(new RegExp(\"\\n(\" + white + \")?\", \"g\"), \"\\n\");\n                                }\n                                text = indentation + text.replace(/\\n/g, \"\\n\" + indentation);\n                            }\n                        }\n                        if (pre) {\n                            if (!text) {\n                                text = pre + post;\n                            } else {\n                                text = pre + text + \"\\n\" + post;\n                            }\n                        }\n                        printer.print_newline(false);\n                        if (text) {\n                            raw_token.text = text;\n                            raw_token.whitespace_before = \"\";\n                            raw_token.newlines = 0;\n                            printer.add_raw_token(raw_token);\n                            printer.print_newline(true);\n                        }\n                    }\n                };\n                Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token, tokens) {\n                    var parser_token = this._get_tag_open_token(raw_token);\n                    if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) && !last_tag_token.is_empty_element && raw_token.type === TOKEN.TAG_OPEN && !parser_token.is_start_tag) {\n                        // End element tags for unformatted or content_unformatted elements\n                        // are printed raw to keep any newlines inside them exactly the same.\n                        printer.add_raw_token(raw_token);\n                        parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);\n                    } else {\n                        printer.traverse_whitespace(raw_token);\n                        this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);\n                        if (!parser_token.is_inline_element) {\n                            printer.set_wrap_point();\n                        }\n                        printer.print_token(raw_token);\n                    }\n                    // count the number of attributes\n                    if (parser_token.is_start_tag && this._is_wrap_attributes_force) {\n                        var peek_index = 0;\n                        var peek_token;\n                        do {\n                            peek_token = tokens.peek(peek_index);\n                            if (peek_token.type === TOKEN.ATTRIBUTE) {\n                                parser_token.attr_count += 1;\n                            }\n                            peek_index += 1;\n                        }while (peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);\n                    }\n                    //indent attributes an auto, forced, aligned or forced-align line-wrap\n                    if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {\n                        parser_token.alignment_size = raw_token.text.length + 1;\n                    }\n                    if (!parser_token.tag_complete && !parser_token.is_unformatted) {\n                        printer.alignment_size = parser_token.alignment_size;\n                    }\n                    return parser_token;\n                };\n                var TagOpenParserToken = function(parent, raw_token) {\n                    this.parent = parent || null;\n                    this.text = \"\";\n                    this.type = \"TK_TAG_OPEN\";\n                    this.tag_name = \"\";\n                    this.is_inline_element = false;\n                    this.is_unformatted = false;\n                    this.is_content_unformatted = false;\n                    this.is_empty_element = false;\n                    this.is_start_tag = false;\n                    this.is_end_tag = false;\n                    this.indent_content = false;\n                    this.multiline_content = false;\n                    this.custom_beautifier_name = null;\n                    this.start_tag_token = null;\n                    this.attr_count = 0;\n                    this.has_wrapped_attrs = false;\n                    this.alignment_size = 0;\n                    this.tag_complete = false;\n                    this.tag_start_char = \"\";\n                    this.tag_check = \"\";\n                    if (!raw_token) {\n                        this.tag_complete = true;\n                    } else {\n                        var tag_check_match;\n                        this.tag_start_char = raw_token.text[0];\n                        this.text = raw_token.text;\n                        if (this.tag_start_char === \"<\") {\n                            tag_check_match = raw_token.text.match(/^<([^\\s>]*)/);\n                            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n                        } else {\n                            tag_check_match = raw_token.text.match(/^{{~?(?:[\\^]|#\\*?)?([^\\s}]+)/);\n                            this.tag_check = tag_check_match ? tag_check_match[1] : \"\";\n                            // handle \"{{#> myPartial}}\" or \"{{~#> myPartial}}\"\n                            if ((raw_token.text.startsWith(\"{{#>\") || raw_token.text.startsWith(\"{{~#>\")) && this.tag_check[0] === \">\") {\n                                if (this.tag_check === \">\" && raw_token.next !== null) {\n                                    this.tag_check = raw_token.next.text.split(\" \")[0];\n                                } else {\n                                    this.tag_check = raw_token.text.split(\">\")[1];\n                                }\n                            }\n                        }\n                        this.tag_check = this.tag_check.toLowerCase();\n                        if (raw_token.type === TOKEN.COMMENT) {\n                            this.tag_complete = true;\n                        }\n                        this.is_start_tag = this.tag_check.charAt(0) !== \"/\";\n                        this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;\n                        this.is_end_tag = !this.is_start_tag || raw_token.closed && raw_token.closed.text === \"/>\";\n                        // if whitespace handler ~ included (i.e. {{~#if true}}), handlebars tags start at pos 3 not pos 2\n                        var handlebar_starts = 2;\n                        if (this.tag_start_char === \"{\" && this.text.length >= 3) {\n                            if (this.text.charAt(2) === \"~\") {\n                                handlebar_starts = 3;\n                            }\n                        }\n                        // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.\n                        this.is_end_tag = this.is_end_tag || this.tag_start_char === \"{\" && (this.text.length < 3 || /[^#\\^]/.test(this.text.charAt(handlebar_starts)));\n                    }\n                };\n                Beautifier.prototype._get_tag_open_token = function(raw_token) {\n                    var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);\n                    parser_token.alignment_size = this._options.wrap_attributes_indent_size;\n                    parser_token.is_end_tag = parser_token.is_end_tag || in_array(parser_token.tag_check, this._options.void_elements);\n                    parser_token.is_empty_element = parser_token.tag_complete || parser_token.is_start_tag && parser_token.is_end_tag;\n                    parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);\n                    parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);\n                    parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || this._options.inline_custom_elements && parser_token.tag_name.includes(\"-\") || parser_token.tag_start_char === \"{\";\n                    return parser_token;\n                };\n                Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {\n                    if (!parser_token.is_empty_element) {\n                        if (parser_token.is_end_tag) {\n                            parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors\n                        } else {\n                            // check if this tag is starting an element that has optional end element\n                            // and do an ending needed\n                            if (this._do_optional_end_element(parser_token)) {\n                                if (!parser_token.is_inline_element) {\n                                    printer.print_newline(false);\n                                }\n                            }\n                            this._tag_stack.record_tag(parser_token); //push it on the tag stack\n                            if ((parser_token.tag_name === \"script\" || parser_token.tag_name === \"style\") && !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {\n                                parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);\n                            }\n                        }\n                    }\n                    if (in_array(parser_token.tag_check, this._options.extra_liners)) {\n                        printer.print_newline(false);\n                        if (!printer._output.just_added_blankline()) {\n                            printer.print_newline(true);\n                        }\n                    }\n                    if (parser_token.is_empty_element) {\n                        // if you hit an else case, reset the indent level if you are inside an:\n                        // 'if', 'unless', or 'each' block.\n                        if (parser_token.tag_start_char === \"{\" && parser_token.tag_check === \"else\") {\n                            this._tag_stack.indent_to_tag([\n                                \"if\",\n                                \"unless\",\n                                \"each\"\n                            ]);\n                            parser_token.indent_content = true;\n                            // Don't add a newline if opening {{#if}} tag is on the current line\n                            var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);\n                            if (!foundIfOnCurrentLine) {\n                                printer.print_newline(false);\n                            }\n                        }\n                        // Don't add a newline before elements that should remain where they are.\n                        if (parser_token.tag_name === \"!--\" && last_token.type === TOKEN.TAG_CLOSE && last_tag_token.is_end_tag && parser_token.text.indexOf(\"\\n\") === -1) {\n                        //Do nothing. Leave comments on same line.\n                        } else {\n                            if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {\n                                printer.print_newline(false);\n                            }\n                            this._calcluate_parent_multiline(printer, parser_token);\n                        }\n                    } else if (parser_token.is_end_tag) {\n                        var do_end_expand = false;\n                        // deciding whether a block is multiline should not be this hard\n                        do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;\n                        do_end_expand = do_end_expand || !parser_token.is_inline_element && !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) && !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) && last_token.type !== \"TK_CONTENT\";\n                        if (parser_token.is_content_unformatted || parser_token.is_unformatted) {\n                            do_end_expand = false;\n                        }\n                        if (do_end_expand) {\n                            printer.print_newline(false);\n                        }\n                    } else {\n                        parser_token.indent_content = !parser_token.custom_beautifier_name;\n                        if (parser_token.tag_start_char === \"<\") {\n                            if (parser_token.tag_name === \"html\") {\n                                parser_token.indent_content = this._options.indent_inner_html;\n                            } else if (parser_token.tag_name === \"head\") {\n                                parser_token.indent_content = this._options.indent_head_inner_html;\n                            } else if (parser_token.tag_name === \"body\") {\n                                parser_token.indent_content = this._options.indent_body_inner_html;\n                            }\n                        }\n                        if (!(parser_token.is_inline_element || parser_token.is_unformatted) && (last_token.type !== \"TK_CONTENT\" || parser_token.is_content_unformatted)) {\n                            printer.print_newline(false);\n                        }\n                        this._calcluate_parent_multiline(printer, parser_token);\n                    }\n                };\n                Beautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {\n                    if (parser_token.parent && printer._output.just_added_newline() && !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {\n                        parser_token.parent.multiline_content = true;\n                    }\n                };\n                //To be used for <p> tag special case:\n                var p_closers = [\n                    \"address\",\n                    \"article\",\n                    \"aside\",\n                    \"blockquote\",\n                    \"details\",\n                    \"div\",\n                    \"dl\",\n                    \"fieldset\",\n                    \"figcaption\",\n                    \"figure\",\n                    \"footer\",\n                    \"form\",\n                    \"h1\",\n                    \"h2\",\n                    \"h3\",\n                    \"h4\",\n                    \"h5\",\n                    \"h6\",\n                    \"header\",\n                    \"hr\",\n                    \"main\",\n                    \"menu\",\n                    \"nav\",\n                    \"ol\",\n                    \"p\",\n                    \"pre\",\n                    \"section\",\n                    \"table\",\n                    \"ul\"\n                ];\n                var p_parent_excludes = [\n                    \"a\",\n                    \"audio\",\n                    \"del\",\n                    \"ins\",\n                    \"map\",\n                    \"noscript\",\n                    \"video\"\n                ];\n                Beautifier.prototype._do_optional_end_element = function(parser_token) {\n                    var result = null;\n                    // NOTE: cases of \"if there is no more content in the parent element\"\n                    // are handled automatically by the beautifier.\n                    // It assumes parent or ancestor close tag closes all children.\n                    // https://www.w3.org/TR/html5/syntax.html#optional-tags\n                    if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {\n                        return;\n                    }\n                    if (parser_token.tag_name === \"body\") {\n                        // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.\n                        result = result || this._tag_stack.try_pop(\"head\");\n                    //} else if (parser_token.tag_name === 'body') {\n                    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.\n                    } else if (parser_token.tag_name === \"li\") {\n                        // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.\n                        result = result || this._tag_stack.try_pop(\"li\", [\n                            \"ol\",\n                            \"ul\",\n                            \"menu\"\n                        ]);\n                    } else if (parser_token.tag_name === \"dd\" || parser_token.tag_name === \"dt\") {\n                        // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.\n                        // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.\n                        result = result || this._tag_stack.try_pop(\"dt\", [\n                            \"dl\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"dd\", [\n                            \"dl\"\n                        ]);\n                    } else if (parser_token.parent.tag_name === \"p\" && p_closers.indexOf(parser_token.tag_name) !== -1) {\n                        // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method\n                        // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.\n                        // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.\n                        // But to start with (if we ignore \"autonomous custom elements\") the exclusion would be fine.\n                        var p_parent = parser_token.parent.parent;\n                        if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {\n                            result = result || this._tag_stack.try_pop(\"p\");\n                        }\n                    } else if (parser_token.tag_name === \"rp\" || parser_token.tag_name === \"rt\") {\n                        // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.\n                        // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.\n                        result = result || this._tag_stack.try_pop(\"rt\", [\n                            \"ruby\",\n                            \"rtc\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"rp\", [\n                            \"ruby\",\n                            \"rtc\"\n                        ]);\n                    } else if (parser_token.tag_name === \"optgroup\") {\n                        // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.\n                        // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.\n                        result = result || this._tag_stack.try_pop(\"optgroup\", [\n                            \"select\"\n                        ]);\n                    //result = result || this._tag_stack.try_pop('option', ['select']);\n                    } else if (parser_token.tag_name === \"option\") {\n                        // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.\n                        result = result || this._tag_stack.try_pop(\"option\", [\n                            \"select\",\n                            \"datalist\",\n                            \"optgroup\"\n                        ]);\n                    } else if (parser_token.tag_name === \"colgroup\") {\n                        // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.\n                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n                        result = result || this._tag_stack.try_pop(\"caption\", [\n                            \"table\"\n                        ]);\n                    } else if (parser_token.tag_name === \"thead\") {\n                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n                        result = result || this._tag_stack.try_pop(\"caption\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"colgroup\", [\n                            \"table\"\n                        ]);\n                    //} else if (parser_token.tag_name === 'caption') {\n                    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.\n                    } else if (parser_token.tag_name === \"tbody\" || parser_token.tag_name === \"tfoot\") {\n                        // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.\n                        // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.\n                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n                        result = result || this._tag_stack.try_pop(\"caption\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"colgroup\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"thead\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"tbody\", [\n                            \"table\"\n                        ]);\n                    //} else if (parser_token.tag_name === 'tfoot') {\n                    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.\n                    } else if (parser_token.tag_name === \"tr\") {\n                        // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.\n                        // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.\n                        // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.\n                        result = result || this._tag_stack.try_pop(\"caption\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"colgroup\", [\n                            \"table\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"tr\", [\n                            \"table\",\n                            \"thead\",\n                            \"tbody\",\n                            \"tfoot\"\n                        ]);\n                    } else if (parser_token.tag_name === \"th\" || parser_token.tag_name === \"td\") {\n                        // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.\n                        // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.\n                        result = result || this._tag_stack.try_pop(\"td\", [\n                            \"table\",\n                            \"thead\",\n                            \"tbody\",\n                            \"tfoot\",\n                            \"tr\"\n                        ]);\n                        result = result || this._tag_stack.try_pop(\"th\", [\n                            \"table\",\n                            \"thead\",\n                            \"tbody\",\n                            \"tfoot\",\n                            \"tr\"\n                        ]);\n                    }\n                    // Start element omission not handled currently\n                    // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.\n                    // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)\n                    // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)\n                    // Fix up the parent of the parser token\n                    parser_token.parent = this._tag_stack.get_parser_token();\n                    return result;\n                };\n                module.exports.Beautifier = Beautifier;\n            /***/ },\n            /* 20 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_124314__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var BaseOptions = __nested_webpack_require_124314__(6).Options;\n                function Options(options) {\n                    BaseOptions.call(this, options, \"html\");\n                    if (this.templating.length === 1 && this.templating[0] === \"auto\") {\n                        this.templating = [\n                            \"django\",\n                            \"erb\",\n                            \"handlebars\",\n                            \"php\"\n                        ];\n                    }\n                    this.indent_inner_html = this._get_boolean(\"indent_inner_html\");\n                    this.indent_body_inner_html = this._get_boolean(\"indent_body_inner_html\", true);\n                    this.indent_head_inner_html = this._get_boolean(\"indent_head_inner_html\", true);\n                    this.indent_handlebars = this._get_boolean(\"indent_handlebars\", true);\n                    this.wrap_attributes = this._get_selection(\"wrap_attributes\", [\n                        \"auto\",\n                        \"force\",\n                        \"force-aligned\",\n                        \"force-expand-multiline\",\n                        \"aligned-multiple\",\n                        \"preserve\",\n                        \"preserve-aligned\"\n                    ]);\n                    this.wrap_attributes_min_attrs = this._get_number(\"wrap_attributes_min_attrs\", 2);\n                    this.wrap_attributes_indent_size = this._get_number(\"wrap_attributes_indent_size\", this.indent_size);\n                    this.extra_liners = this._get_array(\"extra_liners\", [\n                        \"head\",\n                        \"body\",\n                        \"/html\"\n                    ]);\n                    // Block vs inline elements\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n                    // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\n                    // https://www.w3.org/TR/html5/dom.html#phrasing-content\n                    this.inline = this._get_array(\"inline\", [\n                        \"a\",\n                        \"abbr\",\n                        \"area\",\n                        \"audio\",\n                        \"b\",\n                        \"bdi\",\n                        \"bdo\",\n                        \"br\",\n                        \"button\",\n                        \"canvas\",\n                        \"cite\",\n                        \"code\",\n                        \"data\",\n                        \"datalist\",\n                        \"del\",\n                        \"dfn\",\n                        \"em\",\n                        \"embed\",\n                        \"i\",\n                        \"iframe\",\n                        \"img\",\n                        \"input\",\n                        \"ins\",\n                        \"kbd\",\n                        \"keygen\",\n                        \"label\",\n                        \"map\",\n                        \"mark\",\n                        \"math\",\n                        \"meter\",\n                        \"noscript\",\n                        \"object\",\n                        \"output\",\n                        \"progress\",\n                        \"q\",\n                        \"ruby\",\n                        \"s\",\n                        \"samp\",\n                        /* 'script', */ \"select\",\n                        \"small\",\n                        \"span\",\n                        \"strong\",\n                        \"sub\",\n                        \"sup\",\n                        \"svg\",\n                        \"template\",\n                        \"textarea\",\n                        \"time\",\n                        \"u\",\n                        \"var\",\n                        \"video\",\n                        \"wbr\",\n                        \"text\",\n                        // obsolete inline tags\n                        \"acronym\",\n                        \"big\",\n                        \"strike\",\n                        \"tt\"\n                    ]);\n                    this.inline_custom_elements = this._get_boolean(\"inline_custom_elements\", true);\n                    this.void_elements = this._get_array(\"void_elements\", [\n                        // HTLM void elements - aka self-closing tags - aka singletons\n                        // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n                        \"area\",\n                        \"base\",\n                        \"br\",\n                        \"col\",\n                        \"embed\",\n                        \"hr\",\n                        \"img\",\n                        \"input\",\n                        \"keygen\",\n                        \"link\",\n                        \"menuitem\",\n                        \"meta\",\n                        \"param\",\n                        \"source\",\n                        \"track\",\n                        \"wbr\",\n                        // NOTE: Optional tags are too complex for a simple list\n                        // they are hard coded in _do_optional_end_element\n                        // Doctype and xml elements\n                        \"!doctype\",\n                        \"?xml\",\n                        // obsolete tags\n                        // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm\n                        // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex\n                        \"basefont\",\n                        \"isindex\"\n                    ]);\n                    this.unformatted = this._get_array(\"unformatted\", []);\n                    this.content_unformatted = this._get_array(\"content_unformatted\", [\n                        \"pre\",\n                        \"textarea\"\n                    ]);\n                    this.unformatted_content_delimiter = this._get_characters(\"unformatted_content_delimiter\");\n                    this.indent_scripts = this._get_selection(\"indent_scripts\", [\n                        \"normal\",\n                        \"keep\",\n                        \"separate\"\n                    ]);\n                }\n                Options.prototype = new BaseOptions();\n                module.exports.Options = Options;\n            /***/ },\n            /* 21 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_131775__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var BaseTokenizer = __nested_webpack_require_131775__(9).Tokenizer;\n                var BASETOKEN = __nested_webpack_require_131775__(9).TOKEN;\n                var Directives = __nested_webpack_require_131775__(13).Directives;\n                var TemplatablePattern = __nested_webpack_require_131775__(14).TemplatablePattern;\n                var Pattern = __nested_webpack_require_131775__(12).Pattern;\n                var TOKEN = {\n                    TAG_OPEN: \"TK_TAG_OPEN\",\n                    TAG_CLOSE: \"TK_TAG_CLOSE\",\n                    ATTRIBUTE: \"TK_ATTRIBUTE\",\n                    EQUALS: \"TK_EQUALS\",\n                    VALUE: \"TK_VALUE\",\n                    COMMENT: \"TK_COMMENT\",\n                    TEXT: \"TK_TEXT\",\n                    UNKNOWN: \"TK_UNKNOWN\",\n                    START: BASETOKEN.START,\n                    RAW: BASETOKEN.RAW,\n                    EOF: BASETOKEN.EOF\n                };\n                var directives_core = new Directives(/<\\!--/, /-->/);\n                var Tokenizer = function(input_string, options) {\n                    BaseTokenizer.call(this, input_string, options);\n                    this._current_tag_name = \"\";\n                    // Words end at whitespace or when a tag starts\n                    // if we are indenting handlebars, they are considered tags\n                    var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);\n                    var pattern_reader = new Pattern(this._input);\n                    this.__patterns = {\n                        word: templatable_reader.until(/[\\n\\r\\t <]/),\n                        single_quote: templatable_reader.until_after(/'/),\n                        double_quote: templatable_reader.until_after(/\"/),\n                        attribute: templatable_reader.until(/[\\n\\r\\t =>]|\\/>/),\n                        element_name: templatable_reader.until(/[\\n\\r\\t >\\/]/),\n                        handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),\n                        handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),\n                        handlebars_open: pattern_reader.until(/[\\n\\r\\t }]/),\n                        handlebars_raw_close: pattern_reader.until(/}}/),\n                        comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),\n                        cdata: pattern_reader.starting_with(/<!\\[CDATA\\[/).until_after(/]]>/),\n                        // https://en.wikipedia.org/wiki/Conditional_comment\n                        conditional_comment: pattern_reader.starting_with(/<!\\[/).until_after(/]>/),\n                        processing: pattern_reader.starting_with(/<\\?/).until_after(/\\?>/)\n                    };\n                    if (this._options.indent_handlebars) {\n                        this.__patterns.word = this.__patterns.word.exclude(\"handlebars\");\n                    }\n                    this._unformatted_content_delimiter = null;\n                    if (this._options.unformatted_content_delimiter) {\n                        var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);\n                        this.__patterns.unformatted_content_delimiter = pattern_reader.matching(literal_regexp).until_after(literal_regexp);\n                    }\n                };\n                Tokenizer.prototype = new BaseTokenizer();\n                Tokenizer.prototype._is_comment = function(current_token) {\n                    return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;\n                };\n                Tokenizer.prototype._is_opening = function(current_token) {\n                    return current_token.type === TOKEN.TAG_OPEN;\n                };\n                Tokenizer.prototype._is_closing = function(current_token, open_token) {\n                    return current_token.type === TOKEN.TAG_CLOSE && open_token && ((current_token.text === \">\" || current_token.text === \"/>\") && open_token.text[0] === \"<\" || current_token.text === \"}}\" && open_token.text[0] === \"{\" && open_token.text[1] === \"{\");\n                };\n                Tokenizer.prototype._reset = function() {\n                    this._current_tag_name = \"\";\n                };\n                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n                    var token = null;\n                    this._readWhitespace();\n                    var c = this._input.peek();\n                    if (c === null) {\n                        return this._create_token(TOKEN.EOF, \"\");\n                    }\n                    token = token || this._read_open_handlebars(c, open_token);\n                    token = token || this._read_attribute(c, previous_token, open_token);\n                    token = token || this._read_close(c, open_token);\n                    token = token || this._read_raw_content(c, previous_token, open_token);\n                    token = token || this._read_content_word(c);\n                    token = token || this._read_comment_or_cdata(c);\n                    token = token || this._read_processing(c);\n                    token = token || this._read_open(c, open_token);\n                    token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n                    return token;\n                };\n                Tokenizer.prototype._read_comment_or_cdata = function(c) {\n                    var token = null;\n                    var resulting_string = null;\n                    var directives = null;\n                    if (c === \"<\") {\n                        var peek1 = this._input.peek(1);\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we only look for the appropriate closing marker\n                        if (peek1 === \"!\") {\n                            resulting_string = this.__patterns.comment.read();\n                            // only process directive on html comments\n                            if (resulting_string) {\n                                directives = directives_core.get_directives(resulting_string);\n                                if (directives && directives.ignore === \"start\") {\n                                    resulting_string += directives_core.readIgnored(this._input);\n                                }\n                            } else {\n                                resulting_string = this.__patterns.cdata.read();\n                            }\n                        }\n                        if (resulting_string) {\n                            token = this._create_token(TOKEN.COMMENT, resulting_string);\n                            token.directives = directives;\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_processing = function(c) {\n                    var token = null;\n                    var resulting_string = null;\n                    var directives = null;\n                    if (c === \"<\") {\n                        var peek1 = this._input.peek(1);\n                        if (peek1 === \"!\" || peek1 === \"?\") {\n                            resulting_string = this.__patterns.conditional_comment.read();\n                            resulting_string = resulting_string || this.__patterns.processing.read();\n                        }\n                        if (resulting_string) {\n                            token = this._create_token(TOKEN.COMMENT, resulting_string);\n                            token.directives = directives;\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_open = function(c, open_token) {\n                    var resulting_string = null;\n                    var token = null;\n                    if (!open_token) {\n                        if (c === \"<\") {\n                            resulting_string = this._input.next();\n                            if (this._input.peek() === \"/\") {\n                                resulting_string += this._input.next();\n                            }\n                            resulting_string += this.__patterns.element_name.read();\n                            token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_open_handlebars = function(c, open_token) {\n                    var resulting_string = null;\n                    var token = null;\n                    if (!open_token) {\n                        if (this._options.indent_handlebars && c === \"{\" && this._input.peek(1) === \"{\") {\n                            if (this._input.peek(2) === \"!\") {\n                                resulting_string = this.__patterns.handlebars_comment.read();\n                                resulting_string = resulting_string || this.__patterns.handlebars.read();\n                                token = this._create_token(TOKEN.COMMENT, resulting_string);\n                            } else {\n                                resulting_string = this.__patterns.handlebars_open.read();\n                                token = this._create_token(TOKEN.TAG_OPEN, resulting_string);\n                            }\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_close = function(c, open_token) {\n                    var resulting_string = null;\n                    var token = null;\n                    if (open_token) {\n                        if (open_token.text[0] === \"<\" && (c === \">\" || c === \"/\" && this._input.peek(1) === \">\")) {\n                            resulting_string = this._input.next();\n                            if (c === \"/\") {\n                                resulting_string += this._input.next();\n                            }\n                            token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);\n                        } else if (open_token.text[0] === \"{\" && c === \"}\" && this._input.peek(1) === \"}\") {\n                            this._input.next();\n                            this._input.next();\n                            token = this._create_token(TOKEN.TAG_CLOSE, \"}}\");\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {\n                    var token = null;\n                    var resulting_string = \"\";\n                    if (open_token && open_token.text[0] === \"<\") {\n                        if (c === \"=\") {\n                            token = this._create_token(TOKEN.EQUALS, this._input.next());\n                        } else if (c === '\"' || c === \"'\") {\n                            var content = this._input.next();\n                            if (c === '\"') {\n                                content += this.__patterns.double_quote.read();\n                            } else {\n                                content += this.__patterns.single_quote.read();\n                            }\n                            token = this._create_token(TOKEN.VALUE, content);\n                        } else {\n                            resulting_string = this.__patterns.attribute.read();\n                            if (resulting_string) {\n                                if (previous_token.type === TOKEN.EQUALS) {\n                                    token = this._create_token(TOKEN.VALUE, resulting_string);\n                                } else {\n                                    token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);\n                                }\n                            }\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._is_content_unformatted = function(tag_name) {\n                    // void_elements have no content and so cannot have unformatted content\n                    // script and style tags should always be read as unformatted content\n                    // finally content_unformatted and unformatted element contents are unformatted\n                    return this._options.void_elements.indexOf(tag_name) === -1 && (this._options.content_unformatted.indexOf(tag_name) !== -1 || this._options.unformatted.indexOf(tag_name) !== -1);\n                };\n                Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) {\n                    var resulting_string = \"\";\n                    if (open_token && open_token.text[0] === \"{\") {\n                        resulting_string = this.__patterns.handlebars_raw_close.read();\n                    } else if (previous_token.type === TOKEN.TAG_CLOSE && previous_token.opened.text[0] === \"<\" && previous_token.text[0] !== \"/\") {\n                        // ^^ empty tag has no content \n                        var tag_name = previous_token.opened.text.substr(1).toLowerCase();\n                        if (tag_name === \"script\" || tag_name === \"style\") {\n                            // Script and style tags are allowed to have comments wrapping their content\n                            // or just have regular content.\n                            var token = this._read_comment_or_cdata(c);\n                            if (token) {\n                                token.type = TOKEN.TEXT;\n                                return token;\n                            }\n                            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n                        } else if (this._is_content_unformatted(tag_name)) {\n                            resulting_string = this._input.readUntil(new RegExp(\"</\" + tag_name + \"[\\\\n\\\\r\\\\t ]*?>\", \"ig\"));\n                        }\n                    }\n                    if (resulting_string) {\n                        return this._create_token(TOKEN.TEXT, resulting_string);\n                    }\n                    return null;\n                };\n                Tokenizer.prototype._read_content_word = function(c) {\n                    var resulting_string = \"\";\n                    if (this._options.unformatted_content_delimiter) {\n                        if (c === this._options.unformatted_content_delimiter[0]) {\n                            resulting_string = this.__patterns.unformatted_content_delimiter.read();\n                        }\n                    }\n                    if (!resulting_string) {\n                        resulting_string = this.__patterns.word.read();\n                    }\n                    if (resulting_string) {\n                        return this._create_token(TOKEN.TEXT, resulting_string);\n                    }\n                };\n                module.exports.Tokenizer = Tokenizer;\n                module.exports.TOKEN = TOKEN;\n            /***/ }\n        ];\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_148279__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_148279__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_148279__(18);\n        /******/ legacy_beautify_html = __nested_webpack_exports__;\n    /******/ /******/ })();\n    var style_html = legacy_beautify_html;\n    /* Footer */ if (true) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n            __webpack_require__,\n            __webpack_require__(/*! ./beautify */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify.js\"),\n            __webpack_require__(/*! ./beautify-css */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify-css.js\")\n        ], __WEBPACK_AMD_DEFINE_RESULT__ = (function(requireamd) {\n            var js_beautify = __webpack_require__(/*! ./beautify */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify.js\");\n            var css_beautify = __webpack_require__(/*! ./beautify-css */ \"(rsc)/./node_modules/js-beautify/js/lib/beautify-css.js\");\n            return {\n                html_beautify: function(html_source, options) {\n                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);\n                }\n            };\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else { var css_beautify, js_beautify; }\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-beautify/js/lib/beautify-html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/js-beautify/js/lib/beautify.js":
/*!*****************************************************!*\
  !*** ./node_modules/js-beautify/js/lib/beautify.js ***!
  \*****************************************************/
/***/ ((module, exports) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* AUTO-GENERATED. DO NOT MODIFY. */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@beautifier.io>\n      https://beautifier.io/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@beautifier.io>\n\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy        !jslint_happy\n            ---------------------------------\n            function ()         function()\n\n            switch () {         switch() {\n            case 1:               case 1:\n              break;                break;\n            }                   }\n\n    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, \"function()\" vs \"function ()\",\n          NOTE: This option is overridden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\" | any of the former + \",preserve-inline\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n            preserve-inline will try to preserve inline blocks of curly braces\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.\n          NOTE: This is not a hard limit. Lines will continue until a point where a newline would\n                be preserved if it were present.\n\n    end_with_newline (default false)  - end output with a newline\n\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n*/ (function() {\n    /* GENERATED_BUILD_OUTPUT */ var legacy_beautify_js;\n    /******/ (function() {\n        /******/ \"use strict\";\n        /******/ var __webpack_modules__ = [\n            /* 0 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_4010__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Beautifier = __nested_webpack_require_4010__(1).Beautifier, Options = __nested_webpack_require_4010__(5).Options;\n                function js_beautify(js_source_text, options) {\n                    var beautifier = new Beautifier(js_source_text, options);\n                    return beautifier.beautify();\n                }\n                module.exports = js_beautify;\n                module.exports.defaultOptions = function() {\n                    return new Options();\n                };\n            /***/ },\n            /* 1 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_5797__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Output = __nested_webpack_require_5797__(2).Output;\n                var Token = __nested_webpack_require_5797__(3).Token;\n                var acorn = __nested_webpack_require_5797__(4);\n                var Options = __nested_webpack_require_5797__(5).Options;\n                var Tokenizer = __nested_webpack_require_5797__(7).Tokenizer;\n                var line_starters = __nested_webpack_require_5797__(7).line_starters;\n                var positionable_operators = __nested_webpack_require_5797__(7).positionable_operators;\n                var TOKEN = __nested_webpack_require_5797__(7).TOKEN;\n                function in_array(what, arr) {\n                    return arr.indexOf(what) !== -1;\n                }\n                function ltrim(s) {\n                    return s.replace(/^\\s+/g, \"\");\n                }\n                function generateMapFromStrings(list) {\n                    var result = {};\n                    for(var x = 0; x < list.length; x++){\n                        // make the mapped names underscored instead of dash\n                        result[list[x].replace(/-/g, \"_\")] = list[x];\n                    }\n                    return result;\n                }\n                function reserved_word(token, word) {\n                    return token && token.type === TOKEN.RESERVED && token.text === word;\n                }\n                function reserved_array(token, words) {\n                    return token && token.type === TOKEN.RESERVED && in_array(token.text, words);\n                }\n                // Unsure of what they mean, but they work. Worth cleaning up in future.\n                var special_words = [\n                    \"case\",\n                    \"return\",\n                    \"do\",\n                    \"if\",\n                    \"throw\",\n                    \"else\",\n                    \"await\",\n                    \"break\",\n                    \"continue\",\n                    \"async\"\n                ];\n                var validPositionValues = [\n                    \"before-newline\",\n                    \"after-newline\",\n                    \"preserve-newline\"\n                ];\n                // Generate map from array\n                var OPERATOR_POSITION = generateMapFromStrings(validPositionValues);\n                var OPERATOR_POSITION_BEFORE_OR_PRESERVE = [\n                    OPERATOR_POSITION.before_newline,\n                    OPERATOR_POSITION.preserve_newline\n                ];\n                var MODE = {\n                    BlockStatement: \"BlockStatement\",\n                    Statement: \"Statement\",\n                    ObjectLiteral: \"ObjectLiteral\",\n                    ArrayLiteral: \"ArrayLiteral\",\n                    ForInitializer: \"ForInitializer\",\n                    Conditional: \"Conditional\",\n                    Expression: \"Expression\" //'(EXPRESSION)'\n                };\n                function remove_redundant_indentation(output, frame) {\n                    // This implementation is effective but has some issues:\n                    //     - can cause line wrap to happen too soon due to indent removal\n                    //           after wrap points are calculated\n                    // These issues are minor compared to ugly indentation.\n                    if (frame.multiline_frame || frame.mode === MODE.ForInitializer || frame.mode === MODE.Conditional) {\n                        return;\n                    }\n                    // remove one indent from each line inside this section\n                    output.remove_indent(frame.start_line_index);\n                }\n                // we could use just string.split, but\n                // IE doesn't like returning empty strings\n                function split_linebreaks(s) {\n                    //return s.split(/\\x0d\\x0a|\\x0a/);\n                    s = s.replace(acorn.allLineBreaks, \"\\n\");\n                    var out = [], idx = s.indexOf(\"\\n\");\n                    while(idx !== -1){\n                        out.push(s.substring(0, idx));\n                        s = s.substring(idx + 1);\n                        idx = s.indexOf(\"\\n\");\n                    }\n                    if (s.length) {\n                        out.push(s);\n                    }\n                    return out;\n                }\n                function is_array(mode) {\n                    return mode === MODE.ArrayLiteral;\n                }\n                function is_expression(mode) {\n                    return in_array(mode, [\n                        MODE.Expression,\n                        MODE.ForInitializer,\n                        MODE.Conditional\n                    ]);\n                }\n                function all_lines_start_with(lines, c) {\n                    for(var i = 0; i < lines.length; i++){\n                        var line = lines[i].trim();\n                        if (line.charAt(0) !== c) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                function each_line_matches_indent(lines, indent) {\n                    var i = 0, len = lines.length, line;\n                    for(; i < len; i++){\n                        line = lines[i];\n                        // allow empty lines to pass through\n                        if (line && line.indexOf(indent) !== 0) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n                function Beautifier(source_text, options) {\n                    options = options || {};\n                    this._source_text = source_text || \"\";\n                    this._output = null;\n                    this._tokens = null;\n                    this._last_last_text = null;\n                    this._flags = null;\n                    this._previous_flags = null;\n                    this._flag_store = null;\n                    this._options = new Options(options);\n                }\n                Beautifier.prototype.create_flags = function(flags_base, mode) {\n                    var next_indent_level = 0;\n                    if (flags_base) {\n                        next_indent_level = flags_base.indentation_level;\n                        if (!this._output.just_added_newline() && flags_base.line_indent_level > next_indent_level) {\n                            next_indent_level = flags_base.line_indent_level;\n                        }\n                    }\n                    var next_flags = {\n                        mode: mode,\n                        parent: flags_base,\n                        last_token: flags_base ? flags_base.last_token : new Token(TOKEN.START_BLOCK, \"\"),\n                        last_word: flags_base ? flags_base.last_word : \"\",\n                        declaration_statement: false,\n                        declaration_assignment: false,\n                        multiline_frame: false,\n                        inline_frame: false,\n                        if_block: false,\n                        else_block: false,\n                        class_start_block: false,\n                        do_block: false,\n                        do_while: false,\n                        import_block: false,\n                        in_case_statement: false,\n                        in_case: false,\n                        case_body: false,\n                        case_block: false,\n                        indentation_level: next_indent_level,\n                        alignment: 0,\n                        line_indent_level: flags_base ? flags_base.line_indent_level : next_indent_level,\n                        start_line_index: this._output.get_line_number(),\n                        ternary_depth: 0\n                    };\n                    return next_flags;\n                };\n                Beautifier.prototype._reset = function(source_text) {\n                    var baseIndentString = source_text.match(/^[\\t ]*/)[0];\n                    this._last_last_text = \"\"; // pre-last token text\n                    this._output = new Output(this._options, baseIndentString);\n                    // If testing the ignore directive, start with output disable set to true\n                    this._output.raw = this._options.test_output_raw;\n                    // Stack of parsing/formatting states, including MODE.\n                    // We tokenize, parse, and output in an almost purely a forward-only stream of token input\n                    // and formatted output.  This makes the beautifier less accurate than full parsers\n                    // but also far more tolerant of syntax errors.\n                    //\n                    // For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type\n                    // MODE.BlockStatement on the the stack, even though it could be object literal.  If we later\n                    // encounter a \":\", we'll switch to to MODE.ObjectLiteral.  If we then see a \";\",\n                    // most full parsers would die, but the beautifier gracefully falls back to\n                    // MODE.BlockStatement and continues on.\n                    this._flag_store = [];\n                    this.set_mode(MODE.BlockStatement);\n                    var tokenizer = new Tokenizer(source_text, this._options);\n                    this._tokens = tokenizer.tokenize();\n                    return source_text;\n                };\n                Beautifier.prototype.beautify = function() {\n                    // if disabled, return the input unchanged.\n                    if (this._options.disabled) {\n                        return this._source_text;\n                    }\n                    var sweet_code;\n                    var source_text = this._reset(this._source_text);\n                    var eol = this._options.eol;\n                    if (this._options.eol === \"auto\") {\n                        eol = \"\\n\";\n                        if (source_text && acorn.lineBreak.test(source_text || \"\")) {\n                            eol = source_text.match(acorn.lineBreak)[0];\n                        }\n                    }\n                    var current_token = this._tokens.next();\n                    while(current_token){\n                        this.handle_token(current_token);\n                        this._last_last_text = this._flags.last_token.text;\n                        this._flags.last_token = current_token;\n                        current_token = this._tokens.next();\n                    }\n                    sweet_code = this._output.get_code(eol);\n                    return sweet_code;\n                };\n                Beautifier.prototype.handle_token = function(current_token, preserve_statement_flags) {\n                    if (current_token.type === TOKEN.START_EXPR) {\n                        this.handle_start_expr(current_token);\n                    } else if (current_token.type === TOKEN.END_EXPR) {\n                        this.handle_end_expr(current_token);\n                    } else if (current_token.type === TOKEN.START_BLOCK) {\n                        this.handle_start_block(current_token);\n                    } else if (current_token.type === TOKEN.END_BLOCK) {\n                        this.handle_end_block(current_token);\n                    } else if (current_token.type === TOKEN.WORD) {\n                        this.handle_word(current_token);\n                    } else if (current_token.type === TOKEN.RESERVED) {\n                        this.handle_word(current_token);\n                    } else if (current_token.type === TOKEN.SEMICOLON) {\n                        this.handle_semicolon(current_token);\n                    } else if (current_token.type === TOKEN.STRING) {\n                        this.handle_string(current_token);\n                    } else if (current_token.type === TOKEN.EQUALS) {\n                        this.handle_equals(current_token);\n                    } else if (current_token.type === TOKEN.OPERATOR) {\n                        this.handle_operator(current_token);\n                    } else if (current_token.type === TOKEN.COMMA) {\n                        this.handle_comma(current_token);\n                    } else if (current_token.type === TOKEN.BLOCK_COMMENT) {\n                        this.handle_block_comment(current_token, preserve_statement_flags);\n                    } else if (current_token.type === TOKEN.COMMENT) {\n                        this.handle_comment(current_token, preserve_statement_flags);\n                    } else if (current_token.type === TOKEN.DOT) {\n                        this.handle_dot(current_token);\n                    } else if (current_token.type === TOKEN.EOF) {\n                        this.handle_eof(current_token);\n                    } else if (current_token.type === TOKEN.UNKNOWN) {\n                        this.handle_unknown(current_token, preserve_statement_flags);\n                    } else {\n                        this.handle_unknown(current_token, preserve_statement_flags);\n                    }\n                };\n                Beautifier.prototype.handle_whitespace_and_comments = function(current_token, preserve_statement_flags) {\n                    var newlines = current_token.newlines;\n                    var keep_whitespace = this._options.keep_array_indentation && is_array(this._flags.mode);\n                    if (current_token.comments_before) {\n                        var comment_token = current_token.comments_before.next();\n                        while(comment_token){\n                            // The cleanest handling of inline comments is to treat them as though they aren't there.\n                            // Just continue formatting and the behavior should be logical.\n                            // Also ignore unknown tokens.  Again, this should result in better behavior.\n                            this.handle_whitespace_and_comments(comment_token, preserve_statement_flags);\n                            this.handle_token(comment_token, preserve_statement_flags);\n                            comment_token = current_token.comments_before.next();\n                        }\n                    }\n                    if (keep_whitespace) {\n                        for(var i = 0; i < newlines; i += 1){\n                            this.print_newline(i > 0, preserve_statement_flags);\n                        }\n                    } else {\n                        if (this._options.max_preserve_newlines && newlines > this._options.max_preserve_newlines) {\n                            newlines = this._options.max_preserve_newlines;\n                        }\n                        if (this._options.preserve_newlines) {\n                            if (newlines > 1) {\n                                this.print_newline(false, preserve_statement_flags);\n                                for(var j = 1; j < newlines; j += 1){\n                                    this.print_newline(true, preserve_statement_flags);\n                                }\n                            }\n                        }\n                    }\n                };\n                var newline_restricted_tokens = [\n                    \"async\",\n                    \"break\",\n                    \"continue\",\n                    \"return\",\n                    \"throw\",\n                    \"yield\"\n                ];\n                Beautifier.prototype.allow_wrap_or_preserved_newline = function(current_token, force_linewrap) {\n                    force_linewrap = force_linewrap === undefined ? false : force_linewrap;\n                    // Never wrap the first token on a line\n                    if (this._output.just_added_newline()) {\n                        return;\n                    }\n                    var shouldPreserveOrForce = this._options.preserve_newlines && current_token.newlines || force_linewrap;\n                    var operatorLogicApplies = in_array(this._flags.last_token.text, positionable_operators) || in_array(current_token.text, positionable_operators);\n                    if (operatorLogicApplies) {\n                        var shouldPrintOperatorNewline = in_array(this._flags.last_token.text, positionable_operators) && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE) || in_array(current_token.text, positionable_operators);\n                        shouldPreserveOrForce = shouldPreserveOrForce && shouldPrintOperatorNewline;\n                    }\n                    if (shouldPreserveOrForce) {\n                        this.print_newline(false, true);\n                    } else if (this._options.wrap_line_length) {\n                        if (reserved_array(this._flags.last_token, newline_restricted_tokens)) {\n                            // These tokens should never have a newline inserted\n                            // between them and the following expression.\n                            return;\n                        }\n                        this._output.set_wrap_point();\n                    }\n                };\n                Beautifier.prototype.print_newline = function(force_newline, preserve_statement_flags) {\n                    if (!preserve_statement_flags) {\n                        if (this._flags.last_token.text !== \";\" && this._flags.last_token.text !== \",\" && this._flags.last_token.text !== \"=\" && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === \"--\" || this._flags.last_token.text === \"++\")) {\n                            var next_token = this._tokens.peek();\n                            while(this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, \"else\")) && !this._flags.do_block){\n                                this.restore_mode();\n                            }\n                        }\n                    }\n                    if (this._output.add_new_line(force_newline)) {\n                        this._flags.multiline_frame = true;\n                    }\n                };\n                Beautifier.prototype.print_token_line_indentation = function(current_token) {\n                    if (this._output.just_added_newline()) {\n                        if (this._options.keep_array_indentation && current_token.newlines && (current_token.text === \"[\" || is_array(this._flags.mode))) {\n                            this._output.current_line.set_indent(-1);\n                            this._output.current_line.push(current_token.whitespace_before);\n                            this._output.space_before_token = false;\n                        } else if (this._output.set_indent(this._flags.indentation_level, this._flags.alignment)) {\n                            this._flags.line_indent_level = this._flags.indentation_level;\n                        }\n                    }\n                };\n                Beautifier.prototype.print_token = function(current_token) {\n                    if (this._output.raw) {\n                        this._output.add_raw_token(current_token);\n                        return;\n                    }\n                    if (this._options.comma_first && current_token.previous && current_token.previous.type === TOKEN.COMMA && this._output.just_added_newline()) {\n                        if (this._output.previous_line.last() === \",\") {\n                            var popped = this._output.previous_line.pop();\n                            // if the comma was already at the start of the line,\n                            // pull back onto that line and reprint the indentation\n                            if (this._output.previous_line.is_empty()) {\n                                this._output.previous_line.push(popped);\n                                this._output.trim(true);\n                                this._output.current_line.pop();\n                                this._output.trim();\n                            }\n                            // add the comma in front of the next token\n                            this.print_token_line_indentation(current_token);\n                            this._output.add_token(\",\");\n                            this._output.space_before_token = true;\n                        }\n                    }\n                    this.print_token_line_indentation(current_token);\n                    this._output.non_breaking_space = true;\n                    this._output.add_token(current_token.text);\n                    if (this._output.previous_token_wrapped) {\n                        this._flags.multiline_frame = true;\n                    }\n                };\n                Beautifier.prototype.indent = function() {\n                    this._flags.indentation_level += 1;\n                    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n                };\n                Beautifier.prototype.deindent = function() {\n                    if (this._flags.indentation_level > 0 && (!this._flags.parent || this._flags.indentation_level > this._flags.parent.indentation_level)) {\n                        this._flags.indentation_level -= 1;\n                        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n                    }\n                };\n                Beautifier.prototype.set_mode = function(mode) {\n                    if (this._flags) {\n                        this._flag_store.push(this._flags);\n                        this._previous_flags = this._flags;\n                    } else {\n                        this._previous_flags = this.create_flags(null, mode);\n                    }\n                    this._flags = this.create_flags(this._previous_flags, mode);\n                    this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n                };\n                Beautifier.prototype.restore_mode = function() {\n                    if (this._flag_store.length > 0) {\n                        this._previous_flags = this._flags;\n                        this._flags = this._flag_store.pop();\n                        if (this._previous_flags.mode === MODE.Statement) {\n                            remove_redundant_indentation(this._output, this._previous_flags);\n                        }\n                        this._output.set_indent(this._flags.indentation_level, this._flags.alignment);\n                    }\n                };\n                Beautifier.prototype.start_of_object_property = function() {\n                    return this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement && (this._flags.last_token.text === \":\" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [\n                        \"get\",\n                        \"set\"\n                    ]));\n                };\n                Beautifier.prototype.start_of_statement = function(current_token) {\n                    var start = false;\n                    start = start || reserved_array(this._flags.last_token, [\n                        \"var\",\n                        \"let\",\n                        \"const\"\n                    ]) && current_token.type === TOKEN.WORD;\n                    start = start || reserved_word(this._flags.last_token, \"do\");\n                    start = start || !(this._flags.parent.mode === MODE.ObjectLiteral && this._flags.mode === MODE.Statement) && reserved_array(this._flags.last_token, newline_restricted_tokens) && !current_token.newlines;\n                    start = start || reserved_word(this._flags.last_token, \"else\") && !(reserved_word(current_token, \"if\") && !current_token.comments_before);\n                    start = start || this._flags.last_token.type === TOKEN.END_EXPR && (this._previous_flags.mode === MODE.ForInitializer || this._previous_flags.mode === MODE.Conditional);\n                    start = start || this._flags.last_token.type === TOKEN.WORD && this._flags.mode === MODE.BlockStatement && !this._flags.in_case && !(current_token.text === \"--\" || current_token.text === \"++\") && this._last_last_text !== \"function\" && current_token.type !== TOKEN.WORD && current_token.type !== TOKEN.RESERVED;\n                    start = start || this._flags.mode === MODE.ObjectLiteral && (this._flags.last_token.text === \":\" && this._flags.ternary_depth === 0 || reserved_array(this._flags.last_token, [\n                        \"get\",\n                        \"set\"\n                    ]));\n                    if (start) {\n                        this.set_mode(MODE.Statement);\n                        this.indent();\n                        this.handle_whitespace_and_comments(current_token, true);\n                        // Issue #276:\n                        // If starting a new statement with [if, for, while, do], push to a new line.\n                        // if (a) if (b) if(c) d(); else e(); else f();\n                        if (!this.start_of_object_property()) {\n                            this.allow_wrap_or_preserved_newline(current_token, reserved_array(current_token, [\n                                \"do\",\n                                \"for\",\n                                \"if\",\n                                \"while\"\n                            ]));\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Beautifier.prototype.handle_start_expr = function(current_token) {\n                    // The conditional starts the statement if appropriate.\n                    if (!this.start_of_statement(current_token)) {\n                        this.handle_whitespace_and_comments(current_token);\n                    }\n                    var next_mode = MODE.Expression;\n                    if (current_token.text === \"[\") {\n                        if (this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === \")\") {\n                            // this is array index specifier, break immediately\n                            // a[x], fn()[x]\n                            if (reserved_array(this._flags.last_token, line_starters)) {\n                                this._output.space_before_token = true;\n                            }\n                            this.print_token(current_token);\n                            this.set_mode(next_mode);\n                            this.indent();\n                            if (this._options.space_in_paren) {\n                                this._output.space_before_token = true;\n                            }\n                            return;\n                        }\n                        next_mode = MODE.ArrayLiteral;\n                        if (is_array(this._flags.mode)) {\n                            if (this._flags.last_token.text === \"[\" || this._flags.last_token.text === \",\" && (this._last_last_text === \"]\" || this._last_last_text === \"}\")) {\n                                // ], [ goes to new line\n                                // }, [ goes to new line\n                                if (!this._options.keep_array_indentation) {\n                                    this.print_newline();\n                                }\n                            }\n                        }\n                        if (!in_array(this._flags.last_token.type, [\n                            TOKEN.START_EXPR,\n                            TOKEN.END_EXPR,\n                            TOKEN.WORD,\n                            TOKEN.OPERATOR,\n                            TOKEN.DOT\n                        ])) {\n                            this._output.space_before_token = true;\n                        }\n                    } else {\n                        if (this._flags.last_token.type === TOKEN.RESERVED) {\n                            if (this._flags.last_token.text === \"for\") {\n                                this._output.space_before_token = this._options.space_before_conditional;\n                                next_mode = MODE.ForInitializer;\n                            } else if (in_array(this._flags.last_token.text, [\n                                \"if\",\n                                \"while\",\n                                \"switch\"\n                            ])) {\n                                this._output.space_before_token = this._options.space_before_conditional;\n                                next_mode = MODE.Conditional;\n                            } else if (in_array(this._flags.last_word, [\n                                \"await\",\n                                \"async\"\n                            ])) {\n                                // Should be a space between await and an IIFE, or async and an arrow function\n                                this._output.space_before_token = true;\n                            } else if (this._flags.last_token.text === \"import\" && current_token.whitespace_before === \"\") {\n                                this._output.space_before_token = false;\n                            } else if (in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === \"catch\") {\n                                this._output.space_before_token = true;\n                            }\n                        } else if (this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n                            // Support of this kind of newline preservation.\n                            // a = (b &&\n                            //     (c || d));\n                            if (!this.start_of_object_property()) {\n                                this.allow_wrap_or_preserved_newline(current_token);\n                            }\n                        } else if (this._flags.last_token.type === TOKEN.WORD) {\n                            this._output.space_before_token = false;\n                            // function name() vs function name ()\n                            // function* name() vs function* name ()\n                            // async name() vs async name ()\n                            // In ES6, you can also define the method properties of an object\n                            // var obj = {a: function() {}}\n                            // It can be abbreviated\n                            // var obj = {a() {}}\n                            // var obj = { a() {}} vs var obj = { a () {}}\n                            // var obj = { * a() {}} vs var obj = { * a () {}}\n                            var peek_back_two = this._tokens.peek(-3);\n                            if (this._options.space_after_named_function && peek_back_two) {\n                                // peek starts at next character so -1 is current token\n                                var peek_back_three = this._tokens.peek(-4);\n                                if (reserved_array(peek_back_two, [\n                                    \"async\",\n                                    \"function\"\n                                ]) || peek_back_two.text === \"*\" && reserved_array(peek_back_three, [\n                                    \"async\",\n                                    \"function\"\n                                ])) {\n                                    this._output.space_before_token = true;\n                                } else if (this._flags.mode === MODE.ObjectLiteral) {\n                                    if (peek_back_two.text === \"{\" || peek_back_two.text === \",\" || peek_back_two.text === \"*\" && (peek_back_three.text === \"{\" || peek_back_three.text === \",\")) {\n                                        this._output.space_before_token = true;\n                                    }\n                                } else if (this._flags.parent && this._flags.parent.class_start_block) {\n                                    this._output.space_before_token = true;\n                                }\n                            }\n                        } else {\n                            // Support preserving wrapped arrow function expressions\n                            // a.b('c',\n                            //     () => d.e\n                            // )\n                            this.allow_wrap_or_preserved_newline(current_token);\n                        }\n                        // function() vs function ()\n                        // yield*() vs yield* ()\n                        // function*() vs function* ()\n                        if (this._flags.last_token.type === TOKEN.RESERVED && (this._flags.last_word === \"function\" || this._flags.last_word === \"typeof\") || this._flags.last_token.text === \"*\" && (in_array(this._last_last_text, [\n                            \"function\",\n                            \"yield\"\n                        ]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [\n                            \"{\",\n                            \",\"\n                        ]))) {\n                            this._output.space_before_token = this._options.space_after_anon_function;\n                        }\n                    }\n                    if (this._flags.last_token.text === \";\" || this._flags.last_token.type === TOKEN.START_BLOCK) {\n                        this.print_newline();\n                    } else if (this._flags.last_token.type === TOKEN.END_EXPR || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.END_BLOCK || this._flags.last_token.text === \".\" || this._flags.last_token.type === TOKEN.COMMA) {\n                        // do nothing on (( and )( and ][ and ]( and .(\n                        // TODO: Consider whether forcing this is required.  Review failing tests when removed.\n                        this.allow_wrap_or_preserved_newline(current_token, current_token.newlines);\n                    }\n                    this.print_token(current_token);\n                    this.set_mode(next_mode);\n                    if (this._options.space_in_paren) {\n                        this._output.space_before_token = true;\n                    }\n                    // In all cases, if we newline while inside an expression it should be indented.\n                    this.indent();\n                };\n                Beautifier.prototype.handle_end_expr = function(current_token) {\n                    // statements inside expressions are not valid syntax, but...\n                    // statements must all be closed when their container closes\n                    while(this._flags.mode === MODE.Statement){\n                        this.restore_mode();\n                    }\n                    this.handle_whitespace_and_comments(current_token);\n                    if (this._flags.multiline_frame) {\n                        this.allow_wrap_or_preserved_newline(current_token, current_token.text === \"]\" && is_array(this._flags.mode) && !this._options.keep_array_indentation);\n                    }\n                    if (this._options.space_in_paren) {\n                        if (this._flags.last_token.type === TOKEN.START_EXPR && !this._options.space_in_empty_paren) {\n                            // () [] no inner space in empty parens like these, ever, ref #320\n                            this._output.trim();\n                            this._output.space_before_token = false;\n                        } else {\n                            this._output.space_before_token = true;\n                        }\n                    }\n                    this.deindent();\n                    this.print_token(current_token);\n                    this.restore_mode();\n                    remove_redundant_indentation(this._output, this._previous_flags);\n                    // do {} while () // no statement required after\n                    if (this._flags.do_while && this._previous_flags.mode === MODE.Conditional) {\n                        this._previous_flags.mode = MODE.Expression;\n                        this._flags.do_block = false;\n                        this._flags.do_while = false;\n                    }\n                };\n                Beautifier.prototype.handle_start_block = function(current_token) {\n                    this.handle_whitespace_and_comments(current_token);\n                    // Check if this is should be treated as a ObjectLiteral\n                    var next_token = this._tokens.peek();\n                    var second_token = this._tokens.peek(1);\n                    if (this._flags.last_word === \"switch\" && this._flags.last_token.type === TOKEN.END_EXPR) {\n                        this.set_mode(MODE.BlockStatement);\n                        this._flags.in_case_statement = true;\n                    } else if (this._flags.case_body) {\n                        this.set_mode(MODE.BlockStatement);\n                    } else if (second_token && (in_array(second_token.text, [\n                        \":\",\n                        \",\"\n                    ]) && in_array(next_token.type, [\n                        TOKEN.STRING,\n                        TOKEN.WORD,\n                        TOKEN.RESERVED\n                    ]) || in_array(next_token.text, [\n                        \"get\",\n                        \"set\",\n                        \"...\"\n                    ]) && in_array(second_token.type, [\n                        TOKEN.WORD,\n                        TOKEN.RESERVED\n                    ]))) {\n                        // We don't support TypeScript,but we didn't break it for a very long time.\n                        // We'll try to keep not breaking it.\n                        if (in_array(this._last_last_text, [\n                            \"class\",\n                            \"interface\"\n                        ]) && !in_array(second_token.text, [\n                            \":\",\n                            \",\"\n                        ])) {\n                            this.set_mode(MODE.BlockStatement);\n                        } else {\n                            this.set_mode(MODE.ObjectLiteral);\n                        }\n                    } else if (this._flags.last_token.type === TOKEN.OPERATOR && this._flags.last_token.text === \"=>\") {\n                        // arrow function: (param1, paramN) => { statements }\n                        this.set_mode(MODE.BlockStatement);\n                    } else if (in_array(this._flags.last_token.type, [\n                        TOKEN.EQUALS,\n                        TOKEN.START_EXPR,\n                        TOKEN.COMMA,\n                        TOKEN.OPERATOR\n                    ]) || reserved_array(this._flags.last_token, [\n                        \"return\",\n                        \"throw\",\n                        \"import\",\n                        \"default\"\n                    ])) {\n                        // Detecting shorthand function syntax is difficult by scanning forward,\n                        //     so check the surrounding context.\n                        // If the block is being returned, imported, export default, passed as arg,\n                        //     assigned with = or assigned in a nested object, treat as an ObjectLiteral.\n                        this.set_mode(MODE.ObjectLiteral);\n                    } else {\n                        this.set_mode(MODE.BlockStatement);\n                    }\n                    if (this._flags.last_token) {\n                        if (reserved_array(this._flags.last_token.previous, [\n                            \"class\",\n                            \"extends\"\n                        ])) {\n                            this._flags.class_start_block = true;\n                        }\n                    }\n                    var empty_braces = !next_token.comments_before && next_token.text === \"}\";\n                    var empty_anonymous_function = empty_braces && this._flags.last_word === \"function\" && this._flags.last_token.type === TOKEN.END_EXPR;\n                    if (this._options.brace_preserve_inline) {\n                        // search forward for a newline wanted inside this block\n                        var index = 0;\n                        var check_token = null;\n                        this._flags.inline_frame = true;\n                        do {\n                            index += 1;\n                            check_token = this._tokens.peek(index - 1);\n                            if (check_token.newlines) {\n                                this._flags.inline_frame = false;\n                                break;\n                            }\n                        }while (check_token.type !== TOKEN.EOF && !(check_token.type === TOKEN.END_BLOCK && check_token.opened === current_token));\n                    }\n                    if ((this._options.brace_style === \"expand\" || this._options.brace_style === \"none\" && current_token.newlines) && !this._flags.inline_frame) {\n                        if (this._flags.last_token.type !== TOKEN.OPERATOR && (empty_anonymous_function || this._flags.last_token.type === TOKEN.EQUALS || reserved_array(this._flags.last_token, special_words) && this._flags.last_token.text !== \"else\")) {\n                            this._output.space_before_token = true;\n                        } else {\n                            this.print_newline(false, true);\n                        }\n                    } else {\n                        if (is_array(this._previous_flags.mode) && (this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.COMMA)) {\n                            if (this._flags.last_token.type === TOKEN.COMMA || this._options.space_in_paren) {\n                                this._output.space_before_token = true;\n                            }\n                            if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR && this._flags.inline_frame) {\n                                this.allow_wrap_or_preserved_newline(current_token);\n                                this._previous_flags.multiline_frame = this._previous_flags.multiline_frame || this._flags.multiline_frame;\n                                this._flags.multiline_frame = false;\n                            }\n                        }\n                        if (this._flags.last_token.type !== TOKEN.OPERATOR && this._flags.last_token.type !== TOKEN.START_EXPR) {\n                            if (in_array(this._flags.last_token.type, [\n                                TOKEN.START_BLOCK,\n                                TOKEN.SEMICOLON\n                            ]) && !this._flags.inline_frame) {\n                                this.print_newline();\n                            } else {\n                                this._output.space_before_token = true;\n                            }\n                        }\n                    }\n                    this.print_token(current_token);\n                    this.indent();\n                    // Except for specific cases, open braces are followed by a new line.\n                    if (!empty_braces && !(this._options.brace_preserve_inline && this._flags.inline_frame)) {\n                        this.print_newline();\n                    }\n                };\n                Beautifier.prototype.handle_end_block = function(current_token) {\n                    // statements must all be closed when their container closes\n                    this.handle_whitespace_and_comments(current_token);\n                    while(this._flags.mode === MODE.Statement){\n                        this.restore_mode();\n                    }\n                    var empty_braces = this._flags.last_token.type === TOKEN.START_BLOCK;\n                    if (this._flags.inline_frame && !empty_braces) {\n                        this._output.space_before_token = true;\n                    } else if (this._options.brace_style === \"expand\") {\n                        if (!empty_braces) {\n                            this.print_newline();\n                        }\n                    } else {\n                        // skip {}\n                        if (!empty_braces) {\n                            if (is_array(this._flags.mode) && this._options.keep_array_indentation) {\n                                // we REALLY need a newline here, but newliner would skip that\n                                this._options.keep_array_indentation = false;\n                                this.print_newline();\n                                this._options.keep_array_indentation = true;\n                            } else {\n                                this.print_newline();\n                            }\n                        }\n                    }\n                    this.restore_mode();\n                    this.print_token(current_token);\n                };\n                Beautifier.prototype.handle_word = function(current_token) {\n                    if (current_token.type === TOKEN.RESERVED) {\n                        if (in_array(current_token.text, [\n                            \"set\",\n                            \"get\"\n                        ]) && this._flags.mode !== MODE.ObjectLiteral) {\n                            current_token.type = TOKEN.WORD;\n                        } else if (current_token.text === \"import\" && in_array(this._tokens.peek().text, [\n                            \"(\",\n                            \".\"\n                        ])) {\n                            current_token.type = TOKEN.WORD;\n                        } else if (in_array(current_token.text, [\n                            \"as\",\n                            \"from\"\n                        ]) && !this._flags.import_block) {\n                            current_token.type = TOKEN.WORD;\n                        } else if (this._flags.mode === MODE.ObjectLiteral) {\n                            var next_token = this._tokens.peek();\n                            if (next_token.text === \":\") {\n                                current_token.type = TOKEN.WORD;\n                            }\n                        }\n                    }\n                    if (this.start_of_statement(current_token)) {\n                        // The conditional starts the statement if appropriate.\n                        if (reserved_array(this._flags.last_token, [\n                            \"var\",\n                            \"let\",\n                            \"const\"\n                        ]) && current_token.type === TOKEN.WORD) {\n                            this._flags.declaration_statement = true;\n                        }\n                    } else if (current_token.newlines && !is_expression(this._flags.mode) && (this._flags.last_token.type !== TOKEN.OPERATOR || this._flags.last_token.text === \"--\" || this._flags.last_token.text === \"++\") && this._flags.last_token.type !== TOKEN.EQUALS && (this._options.preserve_newlines || !reserved_array(this._flags.last_token, [\n                        \"var\",\n                        \"let\",\n                        \"const\",\n                        \"set\",\n                        \"get\"\n                    ]))) {\n                        this.handle_whitespace_and_comments(current_token);\n                        this.print_newline();\n                    } else {\n                        this.handle_whitespace_and_comments(current_token);\n                    }\n                    if (this._flags.do_block && !this._flags.do_while) {\n                        if (reserved_word(current_token, \"while\")) {\n                            // do {} ## while ()\n                            this._output.space_before_token = true;\n                            this.print_token(current_token);\n                            this._output.space_before_token = true;\n                            this._flags.do_while = true;\n                            return;\n                        } else {\n                            // do {} should always have while as the next word.\n                            // if we don't see the expected while, recover\n                            this.print_newline();\n                            this._flags.do_block = false;\n                        }\n                    }\n                    // if may be followed by else, or not\n                    // Bare/inline ifs are tricky\n                    // Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();\n                    if (this._flags.if_block) {\n                        if (!this._flags.else_block && reserved_word(current_token, \"else\")) {\n                            this._flags.else_block = true;\n                        } else {\n                            while(this._flags.mode === MODE.Statement){\n                                this.restore_mode();\n                            }\n                            this._flags.if_block = false;\n                            this._flags.else_block = false;\n                        }\n                    }\n                    if (this._flags.in_case_statement && reserved_array(current_token, [\n                        \"case\",\n                        \"default\"\n                    ])) {\n                        this.print_newline();\n                        if (!this._flags.case_block && (this._flags.case_body || this._options.jslint_happy)) {\n                            // switch cases following one another\n                            this.deindent();\n                        }\n                        this._flags.case_body = false;\n                        this.print_token(current_token);\n                        this._flags.in_case = true;\n                        return;\n                    }\n                    if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n                        if (!this.start_of_object_property() && !// start of object property is different for numeric values with +/- prefix operators\n                        (in_array(this._flags.last_token.text, [\n                            \"+\",\n                            \"-\"\n                        ]) && this._last_last_text === \":\" && this._flags.parent.mode === MODE.ObjectLiteral)) {\n                            this.allow_wrap_or_preserved_newline(current_token);\n                        }\n                    }\n                    if (reserved_word(current_token, \"function\")) {\n                        if (in_array(this._flags.last_token.text, [\n                            \"}\",\n                            \";\"\n                        ]) || this._output.just_added_newline() && !(in_array(this._flags.last_token.text, [\n                            \"(\",\n                            \"[\",\n                            \"{\",\n                            \":\",\n                            \"=\",\n                            \",\"\n                        ]) || this._flags.last_token.type === TOKEN.OPERATOR)) {\n                            // make sure there is a nice clean space of at least one blank line\n                            // before a new function definition\n                            if (!this._output.just_added_blankline() && !current_token.comments_before) {\n                                this.print_newline();\n                                this.print_newline(true);\n                            }\n                        }\n                        if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD) {\n                            if (reserved_array(this._flags.last_token, [\n                                \"get\",\n                                \"set\",\n                                \"new\",\n                                \"export\"\n                            ]) || reserved_array(this._flags.last_token, newline_restricted_tokens)) {\n                                this._output.space_before_token = true;\n                            } else if (reserved_word(this._flags.last_token, \"default\") && this._last_last_text === \"export\") {\n                                this._output.space_before_token = true;\n                            } else if (this._flags.last_token.text === \"declare\") {\n                                // accomodates Typescript declare function formatting\n                                this._output.space_before_token = true;\n                            } else {\n                                this.print_newline();\n                            }\n                        } else if (this._flags.last_token.type === TOKEN.OPERATOR || this._flags.last_token.text === \"=\") {\n                            // foo = function\n                            this._output.space_before_token = true;\n                        } else if (!this._flags.multiline_frame && (is_expression(this._flags.mode) || is_array(this._flags.mode))) {\n                        // (function\n                        } else {\n                            this.print_newline();\n                        }\n                        this.print_token(current_token);\n                        this._flags.last_word = current_token.text;\n                        return;\n                    }\n                    var prefix = \"NONE\";\n                    if (this._flags.last_token.type === TOKEN.END_BLOCK) {\n                        if (this._previous_flags.inline_frame) {\n                            prefix = \"SPACE\";\n                        } else if (!reserved_array(current_token, [\n                            \"else\",\n                            \"catch\",\n                            \"finally\",\n                            \"from\"\n                        ])) {\n                            prefix = \"NEWLINE\";\n                        } else {\n                            if (this._options.brace_style === \"expand\" || this._options.brace_style === \"end-expand\" || this._options.brace_style === \"none\" && current_token.newlines) {\n                                prefix = \"NEWLINE\";\n                            } else {\n                                prefix = \"SPACE\";\n                                this._output.space_before_token = true;\n                            }\n                        }\n                    } else if (this._flags.last_token.type === TOKEN.SEMICOLON && this._flags.mode === MODE.BlockStatement) {\n                        // TODO: Should this be for STATEMENT as well?\n                        prefix = \"NEWLINE\";\n                    } else if (this._flags.last_token.type === TOKEN.SEMICOLON && is_expression(this._flags.mode)) {\n                        prefix = \"SPACE\";\n                    } else if (this._flags.last_token.type === TOKEN.STRING) {\n                        prefix = \"NEWLINE\";\n                    } else if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.last_token.text === \"*\" && (in_array(this._last_last_text, [\n                        \"function\",\n                        \"yield\"\n                    ]) || this._flags.mode === MODE.ObjectLiteral && in_array(this._last_last_text, [\n                        \"{\",\n                        \",\"\n                    ]))) {\n                        prefix = \"SPACE\";\n                    } else if (this._flags.last_token.type === TOKEN.START_BLOCK) {\n                        if (this._flags.inline_frame) {\n                            prefix = \"SPACE\";\n                        } else {\n                            prefix = \"NEWLINE\";\n                        }\n                    } else if (this._flags.last_token.type === TOKEN.END_EXPR) {\n                        this._output.space_before_token = true;\n                        prefix = \"NEWLINE\";\n                    }\n                    if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== \")\") {\n                        if (this._flags.inline_frame || this._flags.last_token.text === \"else\" || this._flags.last_token.text === \"export\") {\n                            prefix = \"SPACE\";\n                        } else {\n                            prefix = \"NEWLINE\";\n                        }\n                    }\n                    if (reserved_array(current_token, [\n                        \"else\",\n                        \"catch\",\n                        \"finally\"\n                    ])) {\n                        if ((!(this._flags.last_token.type === TOKEN.END_BLOCK && this._previous_flags.mode === MODE.BlockStatement) || this._options.brace_style === \"expand\" || this._options.brace_style === \"end-expand\" || this._options.brace_style === \"none\" && current_token.newlines) && !this._flags.inline_frame) {\n                            this.print_newline();\n                        } else {\n                            this._output.trim(true);\n                            var line = this._output.current_line;\n                            // If we trimmed and there's something other than a close block before us\n                            // put a newline back in.  Handles '} // comment' scenario.\n                            if (line.last() !== \"}\") {\n                                this.print_newline();\n                            }\n                            this._output.space_before_token = true;\n                        }\n                    } else if (prefix === \"NEWLINE\") {\n                        if (reserved_array(this._flags.last_token, special_words)) {\n                            // no newline between 'return nnn'\n                            this._output.space_before_token = true;\n                        } else if (this._flags.last_token.text === \"declare\" && reserved_array(current_token, [\n                            \"var\",\n                            \"let\",\n                            \"const\"\n                        ])) {\n                            // accomodates Typescript declare formatting\n                            this._output.space_before_token = true;\n                        } else if (this._flags.last_token.type !== TOKEN.END_EXPR) {\n                            if ((this._flags.last_token.type !== TOKEN.START_EXPR || !reserved_array(current_token, [\n                                \"var\",\n                                \"let\",\n                                \"const\"\n                            ])) && this._flags.last_token.text !== \":\") {\n                                // no need to force newline on 'var': for (var x = 0...)\n                                if (reserved_word(current_token, \"if\") && reserved_word(current_token.previous, \"else\")) {\n                                    // no newline for } else if {\n                                    this._output.space_before_token = true;\n                                } else {\n                                    this.print_newline();\n                                }\n                            }\n                        } else if (reserved_array(current_token, line_starters) && this._flags.last_token.text !== \")\") {\n                            this.print_newline();\n                        }\n                    } else if (this._flags.multiline_frame && is_array(this._flags.mode) && this._flags.last_token.text === \",\" && this._last_last_text === \"}\") {\n                        this.print_newline(); // }, in lists get a newline treatment\n                    } else if (prefix === \"SPACE\") {\n                        this._output.space_before_token = true;\n                    }\n                    if (current_token.previous && (current_token.previous.type === TOKEN.WORD || current_token.previous.type === TOKEN.RESERVED)) {\n                        this._output.space_before_token = true;\n                    }\n                    this.print_token(current_token);\n                    this._flags.last_word = current_token.text;\n                    if (current_token.type === TOKEN.RESERVED) {\n                        if (current_token.text === \"do\") {\n                            this._flags.do_block = true;\n                        } else if (current_token.text === \"if\") {\n                            this._flags.if_block = true;\n                        } else if (current_token.text === \"import\") {\n                            this._flags.import_block = true;\n                        } else if (this._flags.import_block && reserved_word(current_token, \"from\")) {\n                            this._flags.import_block = false;\n                        }\n                    }\n                };\n                Beautifier.prototype.handle_semicolon = function(current_token) {\n                    if (this.start_of_statement(current_token)) {\n                        // The conditional starts the statement if appropriate.\n                        // Semicolon can be the start (and end) of a statement\n                        this._output.space_before_token = false;\n                    } else {\n                        this.handle_whitespace_and_comments(current_token);\n                    }\n                    var next_token = this._tokens.peek();\n                    while(this._flags.mode === MODE.Statement && !(this._flags.if_block && reserved_word(next_token, \"else\")) && !this._flags.do_block){\n                        this.restore_mode();\n                    }\n                    // hacky but effective for the moment\n                    if (this._flags.import_block) {\n                        this._flags.import_block = false;\n                    }\n                    this.print_token(current_token);\n                };\n                Beautifier.prototype.handle_string = function(current_token) {\n                    if (current_token.text.startsWith(\"`\") && current_token.newlines === 0 && current_token.whitespace_before === \"\" && (current_token.previous.text === \")\" || this._flags.last_token.type === TOKEN.WORD)) {\n                    //Conditional for detectign backtick strings\n                    } else if (this.start_of_statement(current_token)) {\n                        // The conditional starts the statement if appropriate.\n                        // One difference - strings want at least a space before\n                        this._output.space_before_token = true;\n                    } else {\n                        this.handle_whitespace_and_comments(current_token);\n                        if (this._flags.last_token.type === TOKEN.RESERVED || this._flags.last_token.type === TOKEN.WORD || this._flags.inline_frame) {\n                            this._output.space_before_token = true;\n                        } else if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR || this._flags.last_token.type === TOKEN.EQUALS || this._flags.last_token.type === TOKEN.OPERATOR) {\n                            if (!this.start_of_object_property()) {\n                                this.allow_wrap_or_preserved_newline(current_token);\n                            }\n                        } else if (current_token.text.startsWith(\"`\") && this._flags.last_token.type === TOKEN.END_EXPR && (current_token.previous.text === \"]\" || current_token.previous.text === \")\") && current_token.newlines === 0) {\n                            this._output.space_before_token = true;\n                        } else {\n                            this.print_newline();\n                        }\n                    }\n                    this.print_token(current_token);\n                };\n                Beautifier.prototype.handle_equals = function(current_token) {\n                    if (this.start_of_statement(current_token)) {\n                    // The conditional starts the statement if appropriate.\n                    } else {\n                        this.handle_whitespace_and_comments(current_token);\n                    }\n                    if (this._flags.declaration_statement) {\n                        // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n                        this._flags.declaration_assignment = true;\n                    }\n                    this._output.space_before_token = true;\n                    this.print_token(current_token);\n                    this._output.space_before_token = true;\n                };\n                Beautifier.prototype.handle_comma = function(current_token) {\n                    this.handle_whitespace_and_comments(current_token, true);\n                    this.print_token(current_token);\n                    this._output.space_before_token = true;\n                    if (this._flags.declaration_statement) {\n                        if (is_expression(this._flags.parent.mode)) {\n                            // do not break on comma, for(var a = 1, b = 2)\n                            this._flags.declaration_assignment = false;\n                        }\n                        if (this._flags.declaration_assignment) {\n                            this._flags.declaration_assignment = false;\n                            this.print_newline(false, true);\n                        } else if (this._options.comma_first) {\n                            // for comma-first, we want to allow a newline before the comma\n                            // to turn into a newline after the comma, which we will fixup later\n                            this.allow_wrap_or_preserved_newline(current_token);\n                        }\n                    } else if (this._flags.mode === MODE.ObjectLiteral || this._flags.mode === MODE.Statement && this._flags.parent.mode === MODE.ObjectLiteral) {\n                        if (this._flags.mode === MODE.Statement) {\n                            this.restore_mode();\n                        }\n                        if (!this._flags.inline_frame) {\n                            this.print_newline();\n                        }\n                    } else if (this._options.comma_first) {\n                        // EXPR or DO_BLOCK\n                        // for comma-first, we want to allow a newline before the comma\n                        // to turn into a newline after the comma, which we will fixup later\n                        this.allow_wrap_or_preserved_newline(current_token);\n                    }\n                };\n                Beautifier.prototype.handle_operator = function(current_token) {\n                    var isGeneratorAsterisk = current_token.text === \"*\" && (reserved_array(this._flags.last_token, [\n                        \"function\",\n                        \"yield\"\n                    ]) || in_array(this._flags.last_token.type, [\n                        TOKEN.START_BLOCK,\n                        TOKEN.COMMA,\n                        TOKEN.END_BLOCK,\n                        TOKEN.SEMICOLON\n                    ]));\n                    var isUnary = in_array(current_token.text, [\n                        \"-\",\n                        \"+\"\n                    ]) && (in_array(this._flags.last_token.type, [\n                        TOKEN.START_BLOCK,\n                        TOKEN.START_EXPR,\n                        TOKEN.EQUALS,\n                        TOKEN.OPERATOR\n                    ]) || in_array(this._flags.last_token.text, line_starters) || this._flags.last_token.text === \",\");\n                    if (this.start_of_statement(current_token)) {\n                    // The conditional starts the statement if appropriate.\n                    } else {\n                        var preserve_statement_flags = !isGeneratorAsterisk;\n                        this.handle_whitespace_and_comments(current_token, preserve_statement_flags);\n                    }\n                    // hack for actionscript's import .*;\n                    if (current_token.text === \"*\" && this._flags.last_token.type === TOKEN.DOT) {\n                        this.print_token(current_token);\n                        return;\n                    }\n                    if (current_token.text === \"::\") {\n                        // no spaces around exotic namespacing syntax operator\n                        this.print_token(current_token);\n                        return;\n                    }\n                    if (in_array(current_token.text, [\n                        \"-\",\n                        \"+\"\n                    ]) && this.start_of_object_property()) {\n                        // numeric value with +/- symbol in front as a property\n                        this.print_token(current_token);\n                        return;\n                    }\n                    // Allow line wrapping between operators when operator_position is\n                    //   set to before or preserve\n                    if (this._flags.last_token.type === TOKEN.OPERATOR && in_array(this._options.operator_position, OPERATOR_POSITION_BEFORE_OR_PRESERVE)) {\n                        this.allow_wrap_or_preserved_newline(current_token);\n                    }\n                    if (current_token.text === \":\" && this._flags.in_case) {\n                        this.print_token(current_token);\n                        this._flags.in_case = false;\n                        this._flags.case_body = true;\n                        if (this._tokens.peek().type !== TOKEN.START_BLOCK) {\n                            this.indent();\n                            this.print_newline();\n                            this._flags.case_block = false;\n                        } else {\n                            this._flags.case_block = true;\n                            this._output.space_before_token = true;\n                        }\n                        return;\n                    }\n                    var space_before = true;\n                    var space_after = true;\n                    var in_ternary = false;\n                    if (current_token.text === \":\") {\n                        if (this._flags.ternary_depth === 0) {\n                            // Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.\n                            space_before = false;\n                        } else {\n                            this._flags.ternary_depth -= 1;\n                            in_ternary = true;\n                        }\n                    } else if (current_token.text === \"?\") {\n                        this._flags.ternary_depth += 1;\n                    }\n                    // let's handle the operator_position option prior to any conflicting logic\n                    if (!isUnary && !isGeneratorAsterisk && this._options.preserve_newlines && in_array(current_token.text, positionable_operators)) {\n                        var isColon = current_token.text === \":\";\n                        var isTernaryColon = isColon && in_ternary;\n                        var isOtherColon = isColon && !in_ternary;\n                        switch(this._options.operator_position){\n                            case OPERATOR_POSITION.before_newline:\n                                // if the current token is : and it's not a ternary statement then we set space_before to false\n                                this._output.space_before_token = !isOtherColon;\n                                this.print_token(current_token);\n                                if (!isColon || isTernaryColon) {\n                                    this.allow_wrap_or_preserved_newline(current_token);\n                                }\n                                this._output.space_before_token = true;\n                                return;\n                            case OPERATOR_POSITION.after_newline:\n                                // if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,\n                                //   then print a newline.\n                                this._output.space_before_token = true;\n                                if (!isColon || isTernaryColon) {\n                                    if (this._tokens.peek().newlines) {\n                                        this.print_newline(false, true);\n                                    } else {\n                                        this.allow_wrap_or_preserved_newline(current_token);\n                                    }\n                                } else {\n                                    this._output.space_before_token = false;\n                                }\n                                this.print_token(current_token);\n                                this._output.space_before_token = true;\n                                return;\n                            case OPERATOR_POSITION.preserve_newline:\n                                if (!isOtherColon) {\n                                    this.allow_wrap_or_preserved_newline(current_token);\n                                }\n                                // if we just added a newline, or the current token is : and it's not a ternary statement,\n                                //   then we set space_before to false\n                                space_before = !(this._output.just_added_newline() || isOtherColon);\n                                this._output.space_before_token = space_before;\n                                this.print_token(current_token);\n                                this._output.space_before_token = true;\n                                return;\n                        }\n                    }\n                    if (isGeneratorAsterisk) {\n                        this.allow_wrap_or_preserved_newline(current_token);\n                        space_before = false;\n                        var next_token = this._tokens.peek();\n                        space_after = next_token && in_array(next_token.type, [\n                            TOKEN.WORD,\n                            TOKEN.RESERVED\n                        ]);\n                    } else if (current_token.text === \"...\") {\n                        this.allow_wrap_or_preserved_newline(current_token);\n                        space_before = this._flags.last_token.type === TOKEN.START_BLOCK;\n                        space_after = false;\n                    } else if (in_array(current_token.text, [\n                        \"--\",\n                        \"++\",\n                        \"!\",\n                        \"~\"\n                    ]) || isUnary) {\n                        // unary operators (and binary +/- pretending to be unary) special cases\n                        if (this._flags.last_token.type === TOKEN.COMMA || this._flags.last_token.type === TOKEN.START_EXPR) {\n                            this.allow_wrap_or_preserved_newline(current_token);\n                        }\n                        space_before = false;\n                        space_after = false;\n                        // http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1\n                        // if there is a newline between -- or ++ and anything else we should preserve it.\n                        if (current_token.newlines && (current_token.text === \"--\" || current_token.text === \"++\" || current_token.text === \"~\")) {\n                            var new_line_needed = reserved_array(this._flags.last_token, special_words) && current_token.newlines;\n                            if (new_line_needed && (this._previous_flags.if_block || this._previous_flags.else_block)) {\n                                this.restore_mode();\n                            }\n                            this.print_newline(new_line_needed, true);\n                        }\n                        if (this._flags.last_token.text === \";\" && is_expression(this._flags.mode)) {\n                            // for (;; ++i)\n                            //        ^^^\n                            space_before = true;\n                        }\n                        if (this._flags.last_token.type === TOKEN.RESERVED) {\n                            space_before = true;\n                        } else if (this._flags.last_token.type === TOKEN.END_EXPR) {\n                            space_before = !(this._flags.last_token.text === \"]\" && (current_token.text === \"--\" || current_token.text === \"++\"));\n                        } else if (this._flags.last_token.type === TOKEN.OPERATOR) {\n                            // a++ + ++b;\n                            // a - -b\n                            space_before = in_array(current_token.text, [\n                                \"--\",\n                                \"-\",\n                                \"++\",\n                                \"+\"\n                            ]) && in_array(this._flags.last_token.text, [\n                                \"--\",\n                                \"-\",\n                                \"++\",\n                                \"+\"\n                            ]);\n                            // + and - are not unary when preceeded by -- or ++ operator\n                            // a-- + b\n                            // a * +b\n                            // a - -b\n                            if (in_array(current_token.text, [\n                                \"+\",\n                                \"-\"\n                            ]) && in_array(this._flags.last_token.text, [\n                                \"--\",\n                                \"++\"\n                            ])) {\n                                space_after = true;\n                            }\n                        }\n                        if ((this._flags.mode === MODE.BlockStatement && !this._flags.inline_frame || this._flags.mode === MODE.Statement) && (this._flags.last_token.text === \"{\" || this._flags.last_token.text === \";\")) {\n                            // { foo; --i }\n                            // foo(); --bar;\n                            this.print_newline();\n                        }\n                    }\n                    this._output.space_before_token = this._output.space_before_token || space_before;\n                    this.print_token(current_token);\n                    this._output.space_before_token = space_after;\n                };\n                Beautifier.prototype.handle_block_comment = function(current_token, preserve_statement_flags) {\n                    if (this._output.raw) {\n                        this._output.add_raw_token(current_token);\n                        if (current_token.directives && current_token.directives.preserve === \"end\") {\n                            // If we're testing the raw output behavior, do not allow a directive to turn it off.\n                            this._output.raw = this._options.test_output_raw;\n                        }\n                        return;\n                    }\n                    if (current_token.directives) {\n                        this.print_newline(false, preserve_statement_flags);\n                        this.print_token(current_token);\n                        if (current_token.directives.preserve === \"start\") {\n                            this._output.raw = true;\n                        }\n                        this.print_newline(false, true);\n                        return;\n                    }\n                    // inline block\n                    if (!acorn.newline.test(current_token.text) && !current_token.newlines) {\n                        this._output.space_before_token = true;\n                        this.print_token(current_token);\n                        this._output.space_before_token = true;\n                        return;\n                    } else {\n                        this.print_block_commment(current_token, preserve_statement_flags);\n                    }\n                };\n                Beautifier.prototype.print_block_commment = function(current_token, preserve_statement_flags) {\n                    var lines = split_linebreaks(current_token.text);\n                    var j; // iterator for this case\n                    var javadoc = false;\n                    var starless = false;\n                    var lastIndent = current_token.whitespace_before;\n                    var lastIndentLength = lastIndent.length;\n                    // block comment starts with a new line\n                    this.print_newline(false, preserve_statement_flags);\n                    // first line always indented\n                    this.print_token_line_indentation(current_token);\n                    this._output.add_token(lines[0]);\n                    this.print_newline(false, preserve_statement_flags);\n                    if (lines.length > 1) {\n                        lines = lines.slice(1);\n                        javadoc = all_lines_start_with(lines, \"*\");\n                        starless = each_line_matches_indent(lines, lastIndent);\n                        if (javadoc) {\n                            this._flags.alignment = 1;\n                        }\n                        for(j = 0; j < lines.length; j++){\n                            if (javadoc) {\n                                // javadoc: reformat and re-indent\n                                this.print_token_line_indentation(current_token);\n                                this._output.add_token(ltrim(lines[j]));\n                            } else if (starless && lines[j]) {\n                                // starless: re-indent non-empty content, avoiding trim\n                                this.print_token_line_indentation(current_token);\n                                this._output.add_token(lines[j].substring(lastIndentLength));\n                            } else {\n                                // normal comments output raw\n                                this._output.current_line.set_indent(-1);\n                                this._output.add_token(lines[j]);\n                            }\n                            // for comments on their own line or  more than one line, make sure there's a new line after\n                            this.print_newline(false, preserve_statement_flags);\n                        }\n                        this._flags.alignment = 0;\n                    }\n                };\n                Beautifier.prototype.handle_comment = function(current_token, preserve_statement_flags) {\n                    if (current_token.newlines) {\n                        this.print_newline(false, preserve_statement_flags);\n                    } else {\n                        this._output.trim(true);\n                    }\n                    this._output.space_before_token = true;\n                    this.print_token(current_token);\n                    this.print_newline(false, preserve_statement_flags);\n                };\n                Beautifier.prototype.handle_dot = function(current_token) {\n                    if (this.start_of_statement(current_token)) {\n                    // The conditional starts the statement if appropriate.\n                    } else {\n                        this.handle_whitespace_and_comments(current_token, true);\n                    }\n                    if (this._flags.last_token.text.match(\"^[0-9]+$\")) {\n                        this._output.space_before_token = true;\n                    }\n                    if (reserved_array(this._flags.last_token, special_words)) {\n                        this._output.space_before_token = false;\n                    } else {\n                        // allow preserved newlines before dots in general\n                        // force newlines on dots after close paren when break_chained - for bar().baz()\n                        this.allow_wrap_or_preserved_newline(current_token, this._flags.last_token.text === \")\" && this._options.break_chained_methods);\n                    }\n                    // Only unindent chained method dot if this dot starts a new line.\n                    // Otherwise the automatic extra indentation removal will handle the over indent\n                    if (this._options.unindent_chained_methods && this._output.just_added_newline()) {\n                        this.deindent();\n                    }\n                    this.print_token(current_token);\n                };\n                Beautifier.prototype.handle_unknown = function(current_token, preserve_statement_flags) {\n                    this.print_token(current_token);\n                    if (current_token.text[current_token.text.length - 1] === \"\\n\") {\n                        this.print_newline(false, preserve_statement_flags);\n                    }\n                };\n                Beautifier.prototype.handle_eof = function(current_token) {\n                    // Unwind any open statements\n                    while(this._flags.mode === MODE.Statement){\n                        this.restore_mode();\n                    }\n                    this.handle_whitespace_and_comments(current_token);\n                };\n                module.exports.Beautifier = Beautifier;\n            /***/ },\n            /* 2 */ /***/ function(module) {\n                /*jshint node:true */ /*\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function OutputLine(parent) {\n                    this.__parent = parent;\n                    this.__character_count = 0;\n                    // use indent_count as a marker for this.__lines that have preserved indentation\n                    this.__indent_count = -1;\n                    this.__alignment_count = 0;\n                    this.__wrap_point_index = 0;\n                    this.__wrap_point_character_count = 0;\n                    this.__wrap_point_indent_count = -1;\n                    this.__wrap_point_alignment_count = 0;\n                    this.__items = [];\n                }\n                OutputLine.prototype.clone_empty = function() {\n                    var line = new OutputLine(this.__parent);\n                    line.set_indent(this.__indent_count, this.__alignment_count);\n                    return line;\n                };\n                OutputLine.prototype.item = function(index) {\n                    if (index < 0) {\n                        return this.__items[this.__items.length + index];\n                    } else {\n                        return this.__items[index];\n                    }\n                };\n                OutputLine.prototype.has_match = function(pattern) {\n                    for(var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--){\n                        if (this.__items[lastCheckedOutput].match(pattern)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n                OutputLine.prototype.set_indent = function(indent, alignment) {\n                    if (this.is_empty()) {\n                        this.__indent_count = indent || 0;\n                        this.__alignment_count = alignment || 0;\n                        this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);\n                    }\n                };\n                OutputLine.prototype._set_wrap_point = function() {\n                    if (this.__parent.wrap_line_length) {\n                        this.__wrap_point_index = this.__items.length;\n                        this.__wrap_point_character_count = this.__character_count;\n                        this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;\n                        this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;\n                    }\n                };\n                OutputLine.prototype._should_wrap = function() {\n                    return this.__wrap_point_index && this.__character_count > this.__parent.wrap_line_length && this.__wrap_point_character_count > this.__parent.next_line.__character_count;\n                };\n                OutputLine.prototype._allow_wrap = function() {\n                    if (this._should_wrap()) {\n                        this.__parent.add_new_line();\n                        var next = this.__parent.current_line;\n                        next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);\n                        next.__items = this.__items.slice(this.__wrap_point_index);\n                        this.__items = this.__items.slice(0, this.__wrap_point_index);\n                        next.__character_count += this.__character_count - this.__wrap_point_character_count;\n                        this.__character_count = this.__wrap_point_character_count;\n                        if (next.__items[0] === \" \") {\n                            next.__items.splice(0, 1);\n                            next.__character_count -= 1;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                OutputLine.prototype.is_empty = function() {\n                    return this.__items.length === 0;\n                };\n                OutputLine.prototype.last = function() {\n                    if (!this.is_empty()) {\n                        return this.__items[this.__items.length - 1];\n                    } else {\n                        return null;\n                    }\n                };\n                OutputLine.prototype.push = function(item) {\n                    this.__items.push(item);\n                    var last_newline_index = item.lastIndexOf(\"\\n\");\n                    if (last_newline_index !== -1) {\n                        this.__character_count = item.length - last_newline_index;\n                    } else {\n                        this.__character_count += item.length;\n                    }\n                };\n                OutputLine.prototype.pop = function() {\n                    var item = null;\n                    if (!this.is_empty()) {\n                        item = this.__items.pop();\n                        this.__character_count -= item.length;\n                    }\n                    return item;\n                };\n                OutputLine.prototype._remove_indent = function() {\n                    if (this.__indent_count > 0) {\n                        this.__indent_count -= 1;\n                        this.__character_count -= this.__parent.indent_size;\n                    }\n                };\n                OutputLine.prototype._remove_wrap_indent = function() {\n                    if (this.__wrap_point_indent_count > 0) {\n                        this.__wrap_point_indent_count -= 1;\n                    }\n                };\n                OutputLine.prototype.trim = function() {\n                    while(this.last() === \" \"){\n                        this.__items.pop();\n                        this.__character_count -= 1;\n                    }\n                };\n                OutputLine.prototype.toString = function() {\n                    var result = \"\";\n                    if (this.is_empty()) {\n                        if (this.__parent.indent_empty_lines) {\n                            result = this.__parent.get_indent_string(this.__indent_count);\n                        }\n                    } else {\n                        result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);\n                        result += this.__items.join(\"\");\n                    }\n                    return result;\n                };\n                function IndentStringCache(options, baseIndentString) {\n                    this.__cache = [\n                        \"\"\n                    ];\n                    this.__indent_size = options.indent_size;\n                    this.__indent_string = options.indent_char;\n                    if (!options.indent_with_tabs) {\n                        this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);\n                    }\n                    // Set to null to continue support for auto detection of base indent\n                    baseIndentString = baseIndentString || \"\";\n                    if (options.indent_level > 0) {\n                        baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);\n                    }\n                    this.__base_string = baseIndentString;\n                    this.__base_string_length = baseIndentString.length;\n                }\n                IndentStringCache.prototype.get_indent_size = function(indent, column) {\n                    var result = this.__base_string_length;\n                    column = column || 0;\n                    if (indent < 0) {\n                        result = 0;\n                    }\n                    result += indent * this.__indent_size;\n                    result += column;\n                    return result;\n                };\n                IndentStringCache.prototype.get_indent_string = function(indent_level, column) {\n                    var result = this.__base_string;\n                    column = column || 0;\n                    if (indent_level < 0) {\n                        indent_level = 0;\n                        result = \"\";\n                    }\n                    column += indent_level * this.__indent_size;\n                    this.__ensure_cache(column);\n                    result += this.__cache[column];\n                    return result;\n                };\n                IndentStringCache.prototype.__ensure_cache = function(column) {\n                    while(column >= this.__cache.length){\n                        this.__add_column();\n                    }\n                };\n                IndentStringCache.prototype.__add_column = function() {\n                    var column = this.__cache.length;\n                    var indent = 0;\n                    var result = \"\";\n                    if (this.__indent_size && column >= this.__indent_size) {\n                        indent = Math.floor(column / this.__indent_size);\n                        column -= indent * this.__indent_size;\n                        result = new Array(indent + 1).join(this.__indent_string);\n                    }\n                    if (column) {\n                        result += new Array(column + 1).join(\" \");\n                    }\n                    this.__cache.push(result);\n                };\n                function Output(options, baseIndentString) {\n                    this.__indent_cache = new IndentStringCache(options, baseIndentString);\n                    this.raw = false;\n                    this._end_with_newline = options.end_with_newline;\n                    this.indent_size = options.indent_size;\n                    this.wrap_line_length = options.wrap_line_length;\n                    this.indent_empty_lines = options.indent_empty_lines;\n                    this.__lines = [];\n                    this.previous_line = null;\n                    this.current_line = null;\n                    this.next_line = new OutputLine(this);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                    // initialize\n                    this.__add_outputline();\n                }\n                Output.prototype.__add_outputline = function() {\n                    this.previous_line = this.current_line;\n                    this.current_line = this.next_line.clone_empty();\n                    this.__lines.push(this.current_line);\n                };\n                Output.prototype.get_line_number = function() {\n                    return this.__lines.length;\n                };\n                Output.prototype.get_indent_string = function(indent, column) {\n                    return this.__indent_cache.get_indent_string(indent, column);\n                };\n                Output.prototype.get_indent_size = function(indent, column) {\n                    return this.__indent_cache.get_indent_size(indent, column);\n                };\n                Output.prototype.is_empty = function() {\n                    return !this.previous_line && this.current_line.is_empty();\n                };\n                Output.prototype.add_new_line = function(force_newline) {\n                    // never newline at the start of file\n                    // otherwise, newline only if we didn't just add one or we're forced\n                    if (this.is_empty() || !force_newline && this.just_added_newline()) {\n                        return false;\n                    }\n                    // if raw output is enabled, don't print additional newlines,\n                    // but still return True as though you had\n                    if (!this.raw) {\n                        this.__add_outputline();\n                    }\n                    return true;\n                };\n                Output.prototype.get_code = function(eol) {\n                    this.trim(true);\n                    // handle some edge cases where the last tokens\n                    // has text that ends with newline(s)\n                    var last_item = this.current_line.pop();\n                    if (last_item) {\n                        if (last_item[last_item.length - 1] === \"\\n\") {\n                            last_item = last_item.replace(/\\n+$/g, \"\");\n                        }\n                        this.current_line.push(last_item);\n                    }\n                    if (this._end_with_newline) {\n                        this.__add_outputline();\n                    }\n                    var sweet_code = this.__lines.join(\"\\n\");\n                    if (eol !== \"\\n\") {\n                        sweet_code = sweet_code.replace(/[\\n]/g, eol);\n                    }\n                    return sweet_code;\n                };\n                Output.prototype.set_wrap_point = function() {\n                    this.current_line._set_wrap_point();\n                };\n                Output.prototype.set_indent = function(indent, alignment) {\n                    indent = indent || 0;\n                    alignment = alignment || 0;\n                    // Next line stores alignment values\n                    this.next_line.set_indent(indent, alignment);\n                    // Never indent your first output indent at the start of the file\n                    if (this.__lines.length > 1) {\n                        this.current_line.set_indent(indent, alignment);\n                        return true;\n                    }\n                    this.current_line.set_indent();\n                    return false;\n                };\n                Output.prototype.add_raw_token = function(token) {\n                    for(var x = 0; x < token.newlines; x++){\n                        this.__add_outputline();\n                    }\n                    this.current_line.set_indent(-1);\n                    this.current_line.push(token.whitespace_before);\n                    this.current_line.push(token.text);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = false;\n                };\n                Output.prototype.add_token = function(printable_token) {\n                    this.__add_space_before_token();\n                    this.current_line.push(printable_token);\n                    this.space_before_token = false;\n                    this.non_breaking_space = false;\n                    this.previous_token_wrapped = this.current_line._allow_wrap();\n                };\n                Output.prototype.__add_space_before_token = function() {\n                    if (this.space_before_token && !this.just_added_newline()) {\n                        if (!this.non_breaking_space) {\n                            this.set_wrap_point();\n                        }\n                        this.current_line.push(\" \");\n                    }\n                };\n                Output.prototype.remove_indent = function(index) {\n                    var output_length = this.__lines.length;\n                    while(index < output_length){\n                        this.__lines[index]._remove_indent();\n                        index++;\n                    }\n                    this.current_line._remove_wrap_indent();\n                };\n                Output.prototype.trim = function(eat_newlines) {\n                    eat_newlines = eat_newlines === undefined ? false : eat_newlines;\n                    this.current_line.trim();\n                    while(eat_newlines && this.__lines.length > 1 && this.current_line.is_empty()){\n                        this.__lines.pop();\n                        this.current_line = this.__lines[this.__lines.length - 1];\n                        this.current_line.trim();\n                    }\n                    this.previous_line = this.__lines.length > 1 ? this.__lines[this.__lines.length - 2] : null;\n                };\n                Output.prototype.just_added_newline = function() {\n                    return this.current_line.is_empty();\n                };\n                Output.prototype.just_added_blankline = function() {\n                    return this.is_empty() || this.current_line.is_empty() && this.previous_line.is_empty();\n                };\n                Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {\n                    var index = this.__lines.length - 2;\n                    while(index >= 0){\n                        var potentialEmptyLine = this.__lines[index];\n                        if (potentialEmptyLine.is_empty()) {\n                            break;\n                        } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 && potentialEmptyLine.item(-1) !== ends_with) {\n                            this.__lines.splice(index + 1, 0, new OutputLine(this));\n                            this.previous_line = this.__lines[this.__lines.length - 2];\n                            break;\n                        }\n                        index--;\n                    }\n                };\n                module.exports.Output = Output;\n            /***/ },\n            /* 3 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Token(type, text, newlines, whitespace_before) {\n                    this.type = type;\n                    this.text = text;\n                    // comments_before are\n                    // comments that have a new line before them\n                    // and may or may not have a newline after\n                    // this is a set of comments before\n                    this.comments_before = null; /* inline comment*/ \n                    // this.comments_after =  new TokenStream(); // no new line before and newline after\n                    this.newlines = newlines || 0;\n                    this.whitespace_before = whitespace_before || \"\";\n                    this.parent = null;\n                    this.next = null;\n                    this.previous = null;\n                    this.opened = null;\n                    this.closed = null;\n                    this.directives = null;\n                }\n                module.exports.Token = Token;\n            /***/ },\n            /* 4 */ /***/ function(__unused_webpack_module, exports1) {\n                /* jshint node: true, curly: false */ // Parts of this section of code is taken from acorn.\n                //\n                // Acorn was written by Marijn Haverbeke and released under an MIT\n                // license. The Unicode regexps (for identifiers and whitespace) were\n                // taken from [Esprima](http://esprima.org) by Ariya Hidayat.\n                //\n                // Git repositories for Acorn are available at\n                //\n                //     http://marijnhaverbeke.nl/git/acorn\n                //     https://github.com/marijnh/acorn.git\n                // ## Character categories\n                // acorn used char codes to squeeze the last bit of performance out\n                // Beautifier is okay without that, so we're using regex\n                // permit # (23), $ (36), and @ (64). @ is used in ES7 decorators.\n                // 65 through 91 are uppercase letters.\n                // permit _ (95).\n                // 97 through 123 are lowercase letters.\n                var baseASCIIidentifierStartChars = \"\\\\x23\\\\x24\\\\x40\\\\x41-\\\\x5a\\\\x5f\\\\x61-\\\\x7a\";\n                // inside an identifier @ is not allowed but 0-9 are.\n                var baseASCIIidentifierChars = \"\\\\x24\\\\x30-\\\\x39\\\\x41-\\\\x5a\\\\x5f\\\\x61-\\\\x7a\";\n                // Big ugly regular expressions that match characters in the\n                // whitespace, identifier, and identifier-start categories. These\n                // are only applied when a character is found to actually have a\n                // code point above 128.\n                var nonASCIIidentifierStartChars = \"\\\\xaa\\\\xb5\\\\xba\\\\xc0-\\\\xd6\\\\xd8-\\\\xf6\\\\xf8-\\\\u02c1\\\\u02c6-\\\\u02d1\\\\u02e0-\\\\u02e4\\\\u02ec\\\\u02ee\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037a-\\\\u037d\\\\u0386\\\\u0388-\\\\u038a\\\\u038c\\\\u038e-\\\\u03a1\\\\u03a3-\\\\u03f5\\\\u03f7-\\\\u0481\\\\u048a-\\\\u0527\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05d0-\\\\u05ea\\\\u05f0-\\\\u05f2\\\\u0620-\\\\u064a\\\\u066e\\\\u066f\\\\u0671-\\\\u06d3\\\\u06d5\\\\u06e5\\\\u06e6\\\\u06ee\\\\u06ef\\\\u06fa-\\\\u06fc\\\\u06ff\\\\u0710\\\\u0712-\\\\u072f\\\\u074d-\\\\u07a5\\\\u07b1\\\\u07ca-\\\\u07ea\\\\u07f4\\\\u07f5\\\\u07fa\\\\u0800-\\\\u0815\\\\u081a\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08a0\\\\u08a2-\\\\u08ac\\\\u0904-\\\\u0939\\\\u093d\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0977\\\\u0979-\\\\u097f\\\\u0985-\\\\u098c\\\\u098f\\\\u0990\\\\u0993-\\\\u09a8\\\\u09aa-\\\\u09b0\\\\u09b2\\\\u09b6-\\\\u09b9\\\\u09bd\\\\u09ce\\\\u09dc\\\\u09dd\\\\u09df-\\\\u09e1\\\\u09f0\\\\u09f1\\\\u0a05-\\\\u0a0a\\\\u0a0f\\\\u0a10\\\\u0a13-\\\\u0a28\\\\u0a2a-\\\\u0a30\\\\u0a32\\\\u0a33\\\\u0a35\\\\u0a36\\\\u0a38\\\\u0a39\\\\u0a59-\\\\u0a5c\\\\u0a5e\\\\u0a72-\\\\u0a74\\\\u0a85-\\\\u0a8d\\\\u0a8f-\\\\u0a91\\\\u0a93-\\\\u0aa8\\\\u0aaa-\\\\u0ab0\\\\u0ab2\\\\u0ab3\\\\u0ab5-\\\\u0ab9\\\\u0abd\\\\u0ad0\\\\u0ae0\\\\u0ae1\\\\u0b05-\\\\u0b0c\\\\u0b0f\\\\u0b10\\\\u0b13-\\\\u0b28\\\\u0b2a-\\\\u0b30\\\\u0b32\\\\u0b33\\\\u0b35-\\\\u0b39\\\\u0b3d\\\\u0b5c\\\\u0b5d\\\\u0b5f-\\\\u0b61\\\\u0b71\\\\u0b83\\\\u0b85-\\\\u0b8a\\\\u0b8e-\\\\u0b90\\\\u0b92-\\\\u0b95\\\\u0b99\\\\u0b9a\\\\u0b9c\\\\u0b9e\\\\u0b9f\\\\u0ba3\\\\u0ba4\\\\u0ba8-\\\\u0baa\\\\u0bae-\\\\u0bb9\\\\u0bd0\\\\u0c05-\\\\u0c0c\\\\u0c0e-\\\\u0c10\\\\u0c12-\\\\u0c28\\\\u0c2a-\\\\u0c33\\\\u0c35-\\\\u0c39\\\\u0c3d\\\\u0c58\\\\u0c59\\\\u0c60\\\\u0c61\\\\u0c85-\\\\u0c8c\\\\u0c8e-\\\\u0c90\\\\u0c92-\\\\u0ca8\\\\u0caa-\\\\u0cb3\\\\u0cb5-\\\\u0cb9\\\\u0cbd\\\\u0cde\\\\u0ce0\\\\u0ce1\\\\u0cf1\\\\u0cf2\\\\u0d05-\\\\u0d0c\\\\u0d0e-\\\\u0d10\\\\u0d12-\\\\u0d3a\\\\u0d3d\\\\u0d4e\\\\u0d60\\\\u0d61\\\\u0d7a-\\\\u0d7f\\\\u0d85-\\\\u0d96\\\\u0d9a-\\\\u0db1\\\\u0db3-\\\\u0dbb\\\\u0dbd\\\\u0dc0-\\\\u0dc6\\\\u0e01-\\\\u0e30\\\\u0e32\\\\u0e33\\\\u0e40-\\\\u0e46\\\\u0e81\\\\u0e82\\\\u0e84\\\\u0e87\\\\u0e88\\\\u0e8a\\\\u0e8d\\\\u0e94-\\\\u0e97\\\\u0e99-\\\\u0e9f\\\\u0ea1-\\\\u0ea3\\\\u0ea5\\\\u0ea7\\\\u0eaa\\\\u0eab\\\\u0ead-\\\\u0eb0\\\\u0eb2\\\\u0eb3\\\\u0ebd\\\\u0ec0-\\\\u0ec4\\\\u0ec6\\\\u0edc-\\\\u0edf\\\\u0f00\\\\u0f40-\\\\u0f47\\\\u0f49-\\\\u0f6c\\\\u0f88-\\\\u0f8c\\\\u1000-\\\\u102a\\\\u103f\\\\u1050-\\\\u1055\\\\u105a-\\\\u105d\\\\u1061\\\\u1065\\\\u1066\\\\u106e-\\\\u1070\\\\u1075-\\\\u1081\\\\u108e\\\\u10a0-\\\\u10c5\\\\u10c7\\\\u10cd\\\\u10d0-\\\\u10fa\\\\u10fc-\\\\u1248\\\\u124a-\\\\u124d\\\\u1250-\\\\u1256\\\\u1258\\\\u125a-\\\\u125d\\\\u1260-\\\\u1288\\\\u128a-\\\\u128d\\\\u1290-\\\\u12b0\\\\u12b2-\\\\u12b5\\\\u12b8-\\\\u12be\\\\u12c0\\\\u12c2-\\\\u12c5\\\\u12c8-\\\\u12d6\\\\u12d8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135a\\\\u1380-\\\\u138f\\\\u13a0-\\\\u13f4\\\\u1401-\\\\u166c\\\\u166f-\\\\u167f\\\\u1681-\\\\u169a\\\\u16a0-\\\\u16ea\\\\u16ee-\\\\u16f0\\\\u1700-\\\\u170c\\\\u170e-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176c\\\\u176e-\\\\u1770\\\\u1780-\\\\u17b3\\\\u17d7\\\\u17dc\\\\u1820-\\\\u1877\\\\u1880-\\\\u18a8\\\\u18aa\\\\u18b0-\\\\u18f5\\\\u1900-\\\\u191c\\\\u1950-\\\\u196d\\\\u1970-\\\\u1974\\\\u1980-\\\\u19ab\\\\u19c1-\\\\u19c7\\\\u1a00-\\\\u1a16\\\\u1a20-\\\\u1a54\\\\u1aa7\\\\u1b05-\\\\u1b33\\\\u1b45-\\\\u1b4b\\\\u1b83-\\\\u1ba0\\\\u1bae\\\\u1baf\\\\u1bba-\\\\u1be5\\\\u1c00-\\\\u1c23\\\\u1c4d-\\\\u1c4f\\\\u1c5a-\\\\u1c7d\\\\u1ce9-\\\\u1cec\\\\u1cee-\\\\u1cf1\\\\u1cf5\\\\u1cf6\\\\u1d00-\\\\u1dbf\\\\u1e00-\\\\u1f15\\\\u1f18-\\\\u1f1d\\\\u1f20-\\\\u1f45\\\\u1f48-\\\\u1f4d\\\\u1f50-\\\\u1f57\\\\u1f59\\\\u1f5b\\\\u1f5d\\\\u1f5f-\\\\u1f7d\\\\u1f80-\\\\u1fb4\\\\u1fb6-\\\\u1fbc\\\\u1fbe\\\\u1fc2-\\\\u1fc4\\\\u1fc6-\\\\u1fcc\\\\u1fd0-\\\\u1fd3\\\\u1fd6-\\\\u1fdb\\\\u1fe0-\\\\u1fec\\\\u1ff2-\\\\u1ff4\\\\u1ff6-\\\\u1ffc\\\\u2071\\\\u207f\\\\u2090-\\\\u209c\\\\u2102\\\\u2107\\\\u210a-\\\\u2113\\\\u2115\\\\u2119-\\\\u211d\\\\u2124\\\\u2126\\\\u2128\\\\u212a-\\\\u212d\\\\u212f-\\\\u2139\\\\u213c-\\\\u213f\\\\u2145-\\\\u2149\\\\u214e\\\\u2160-\\\\u2188\\\\u2c00-\\\\u2c2e\\\\u2c30-\\\\u2c5e\\\\u2c60-\\\\u2ce4\\\\u2ceb-\\\\u2cee\\\\u2cf2\\\\u2cf3\\\\u2d00-\\\\u2d25\\\\u2d27\\\\u2d2d\\\\u2d30-\\\\u2d67\\\\u2d6f\\\\u2d80-\\\\u2d96\\\\u2da0-\\\\u2da6\\\\u2da8-\\\\u2dae\\\\u2db0-\\\\u2db6\\\\u2db8-\\\\u2dbe\\\\u2dc0-\\\\u2dc6\\\\u2dc8-\\\\u2dce\\\\u2dd0-\\\\u2dd6\\\\u2dd8-\\\\u2dde\\\\u2e2f\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303c\\\\u3041-\\\\u3096\\\\u309d-\\\\u309f\\\\u30a1-\\\\u30fa\\\\u30fc-\\\\u30ff\\\\u3105-\\\\u312d\\\\u3131-\\\\u318e\\\\u31a0-\\\\u31ba\\\\u31f0-\\\\u31ff\\\\u3400-\\\\u4db5\\\\u4e00-\\\\u9fcc\\\\ua000-\\\\ua48c\\\\ua4d0-\\\\ua4fd\\\\ua500-\\\\ua60c\\\\ua610-\\\\ua61f\\\\ua62a\\\\ua62b\\\\ua640-\\\\ua66e\\\\ua67f-\\\\ua697\\\\ua6a0-\\\\ua6ef\\\\ua717-\\\\ua71f\\\\ua722-\\\\ua788\\\\ua78b-\\\\ua78e\\\\ua790-\\\\ua793\\\\ua7a0-\\\\ua7aa\\\\ua7f8-\\\\ua801\\\\ua803-\\\\ua805\\\\ua807-\\\\ua80a\\\\ua80c-\\\\ua822\\\\ua840-\\\\ua873\\\\ua882-\\\\ua8b3\\\\ua8f2-\\\\ua8f7\\\\ua8fb\\\\ua90a-\\\\ua925\\\\ua930-\\\\ua946\\\\ua960-\\\\ua97c\\\\ua984-\\\\ua9b2\\\\ua9cf\\\\uaa00-\\\\uaa28\\\\uaa40-\\\\uaa42\\\\uaa44-\\\\uaa4b\\\\uaa60-\\\\uaa76\\\\uaa7a\\\\uaa80-\\\\uaaaf\\\\uaab1\\\\uaab5\\\\uaab6\\\\uaab9-\\\\uaabd\\\\uaac0\\\\uaac2\\\\uaadb-\\\\uaadd\\\\uaae0-\\\\uaaea\\\\uaaf2-\\\\uaaf4\\\\uab01-\\\\uab06\\\\uab09-\\\\uab0e\\\\uab11-\\\\uab16\\\\uab20-\\\\uab26\\\\uab28-\\\\uab2e\\\\uabc0-\\\\uabe2\\\\uac00-\\\\ud7a3\\\\ud7b0-\\\\ud7c6\\\\ud7cb-\\\\ud7fb\\\\uf900-\\\\ufa6d\\\\ufa70-\\\\ufad9\\\\ufb00-\\\\ufb06\\\\ufb13-\\\\ufb17\\\\ufb1d\\\\ufb1f-\\\\ufb28\\\\ufb2a-\\\\ufb36\\\\ufb38-\\\\ufb3c\\\\ufb3e\\\\ufb40\\\\ufb41\\\\ufb43\\\\ufb44\\\\ufb46-\\\\ufbb1\\\\ufbd3-\\\\ufd3d\\\\ufd50-\\\\ufd8f\\\\ufd92-\\\\ufdc7\\\\ufdf0-\\\\ufdfb\\\\ufe70-\\\\ufe74\\\\ufe76-\\\\ufefc\\\\uff21-\\\\uff3a\\\\uff41-\\\\uff5a\\\\uff66-\\\\uffbe\\\\uffc2-\\\\uffc7\\\\uffca-\\\\uffcf\\\\uffd2-\\\\uffd7\\\\uffda-\\\\uffdc\";\n                var nonASCIIidentifierChars = \"\\\\u0300-\\\\u036f\\\\u0483-\\\\u0487\\\\u0591-\\\\u05bd\\\\u05bf\\\\u05c1\\\\u05c2\\\\u05c4\\\\u05c5\\\\u05c7\\\\u0610-\\\\u061a\\\\u0620-\\\\u0649\\\\u0672-\\\\u06d3\\\\u06e7-\\\\u06e8\\\\u06fb-\\\\u06fc\\\\u0730-\\\\u074a\\\\u0800-\\\\u0814\\\\u081b-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082d\\\\u0840-\\\\u0857\\\\u08e4-\\\\u08fe\\\\u0900-\\\\u0903\\\\u093a-\\\\u093c\\\\u093e-\\\\u094f\\\\u0951-\\\\u0957\\\\u0962-\\\\u0963\\\\u0966-\\\\u096f\\\\u0981-\\\\u0983\\\\u09bc\\\\u09be-\\\\u09c4\\\\u09c7\\\\u09c8\\\\u09d7\\\\u09df-\\\\u09e0\\\\u0a01-\\\\u0a03\\\\u0a3c\\\\u0a3e-\\\\u0a42\\\\u0a47\\\\u0a48\\\\u0a4b-\\\\u0a4d\\\\u0a51\\\\u0a66-\\\\u0a71\\\\u0a75\\\\u0a81-\\\\u0a83\\\\u0abc\\\\u0abe-\\\\u0ac5\\\\u0ac7-\\\\u0ac9\\\\u0acb-\\\\u0acd\\\\u0ae2-\\\\u0ae3\\\\u0ae6-\\\\u0aef\\\\u0b01-\\\\u0b03\\\\u0b3c\\\\u0b3e-\\\\u0b44\\\\u0b47\\\\u0b48\\\\u0b4b-\\\\u0b4d\\\\u0b56\\\\u0b57\\\\u0b5f-\\\\u0b60\\\\u0b66-\\\\u0b6f\\\\u0b82\\\\u0bbe-\\\\u0bc2\\\\u0bc6-\\\\u0bc8\\\\u0bca-\\\\u0bcd\\\\u0bd7\\\\u0be6-\\\\u0bef\\\\u0c01-\\\\u0c03\\\\u0c46-\\\\u0c48\\\\u0c4a-\\\\u0c4d\\\\u0c55\\\\u0c56\\\\u0c62-\\\\u0c63\\\\u0c66-\\\\u0c6f\\\\u0c82\\\\u0c83\\\\u0cbc\\\\u0cbe-\\\\u0cc4\\\\u0cc6-\\\\u0cc8\\\\u0cca-\\\\u0ccd\\\\u0cd5\\\\u0cd6\\\\u0ce2-\\\\u0ce3\\\\u0ce6-\\\\u0cef\\\\u0d02\\\\u0d03\\\\u0d46-\\\\u0d48\\\\u0d57\\\\u0d62-\\\\u0d63\\\\u0d66-\\\\u0d6f\\\\u0d82\\\\u0d83\\\\u0dca\\\\u0dcf-\\\\u0dd4\\\\u0dd6\\\\u0dd8-\\\\u0ddf\\\\u0df2\\\\u0df3\\\\u0e34-\\\\u0e3a\\\\u0e40-\\\\u0e45\\\\u0e50-\\\\u0e59\\\\u0eb4-\\\\u0eb9\\\\u0ec8-\\\\u0ecd\\\\u0ed0-\\\\u0ed9\\\\u0f18\\\\u0f19\\\\u0f20-\\\\u0f29\\\\u0f35\\\\u0f37\\\\u0f39\\\\u0f41-\\\\u0f47\\\\u0f71-\\\\u0f84\\\\u0f86-\\\\u0f87\\\\u0f8d-\\\\u0f97\\\\u0f99-\\\\u0fbc\\\\u0fc6\\\\u1000-\\\\u1029\\\\u1040-\\\\u1049\\\\u1067-\\\\u106d\\\\u1071-\\\\u1074\\\\u1082-\\\\u108d\\\\u108f-\\\\u109d\\\\u135d-\\\\u135f\\\\u170e-\\\\u1710\\\\u1720-\\\\u1730\\\\u1740-\\\\u1750\\\\u1772\\\\u1773\\\\u1780-\\\\u17b2\\\\u17dd\\\\u17e0-\\\\u17e9\\\\u180b-\\\\u180d\\\\u1810-\\\\u1819\\\\u1920-\\\\u192b\\\\u1930-\\\\u193b\\\\u1951-\\\\u196d\\\\u19b0-\\\\u19c0\\\\u19c8-\\\\u19c9\\\\u19d0-\\\\u19d9\\\\u1a00-\\\\u1a15\\\\u1a20-\\\\u1a53\\\\u1a60-\\\\u1a7c\\\\u1a7f-\\\\u1a89\\\\u1a90-\\\\u1a99\\\\u1b46-\\\\u1b4b\\\\u1b50-\\\\u1b59\\\\u1b6b-\\\\u1b73\\\\u1bb0-\\\\u1bb9\\\\u1be6-\\\\u1bf3\\\\u1c00-\\\\u1c22\\\\u1c40-\\\\u1c49\\\\u1c5b-\\\\u1c7d\\\\u1cd0-\\\\u1cd2\\\\u1d00-\\\\u1dbe\\\\u1e01-\\\\u1f15\\\\u200c\\\\u200d\\\\u203f\\\\u2040\\\\u2054\\\\u20d0-\\\\u20dc\\\\u20e1\\\\u20e5-\\\\u20f0\\\\u2d81-\\\\u2d96\\\\u2de0-\\\\u2dff\\\\u3021-\\\\u3028\\\\u3099\\\\u309a\\\\ua640-\\\\ua66d\\\\ua674-\\\\ua67d\\\\ua69f\\\\ua6f0-\\\\ua6f1\\\\ua7f8-\\\\ua800\\\\ua806\\\\ua80b\\\\ua823-\\\\ua827\\\\ua880-\\\\ua881\\\\ua8b4-\\\\ua8c4\\\\ua8d0-\\\\ua8d9\\\\ua8f3-\\\\ua8f7\\\\ua900-\\\\ua909\\\\ua926-\\\\ua92d\\\\ua930-\\\\ua945\\\\ua980-\\\\ua983\\\\ua9b3-\\\\ua9c0\\\\uaa00-\\\\uaa27\\\\uaa40-\\\\uaa41\\\\uaa4c-\\\\uaa4d\\\\uaa50-\\\\uaa59\\\\uaa7b\\\\uaae0-\\\\uaae9\\\\uaaf2-\\\\uaaf3\\\\uabc0-\\\\uabe1\\\\uabec\\\\uabed\\\\uabf0-\\\\uabf9\\\\ufb20-\\\\ufb28\\\\ufe00-\\\\ufe0f\\\\ufe20-\\\\ufe26\\\\ufe33\\\\ufe34\\\\ufe4d-\\\\ufe4f\\\\uff10-\\\\uff19\\\\uff3f\";\n                //var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\n                //var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n                var unicodeEscapeOrCodePoint = \"\\\\\\\\u[0-9a-fA-F]{4}|\\\\\\\\u\\\\{[0-9a-fA-F]+\\\\}\";\n                var identifierStart = \"(?:\" + unicodeEscapeOrCodePoint + \"|[\" + baseASCIIidentifierStartChars + nonASCIIidentifierStartChars + \"])\";\n                var identifierChars = \"(?:\" + unicodeEscapeOrCodePoint + \"|[\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"])*\";\n                exports1.identifier = new RegExp(identifierStart + identifierChars, \"g\");\n                exports1.identifierStart = new RegExp(identifierStart);\n                exports1.identifierMatch = new RegExp(\"(?:\" + unicodeEscapeOrCodePoint + \"|[\" + baseASCIIidentifierChars + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"])+\");\n                var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/; // jshint ignore:line\n                // Whether a single character denotes a newline.\n                exports1.newline = /[\\n\\r\\u2028\\u2029]/;\n                // Matches a whole line break (where CRLF is considered a single\n                // line break). Used to count lines.\n                // in javascript, these two differ\n                // in python they are the same, different methods are called on them\n                exports1.lineBreak = new RegExp(\"\\r\\n|\" + exports1.newline.source);\n                exports1.allLineBreaks = new RegExp(exports1.lineBreak.source, \"g\");\n            /***/ },\n            /* 5 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_122906__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var BaseOptions = __nested_webpack_require_122906__(6).Options;\n                var validPositionValues = [\n                    \"before-newline\",\n                    \"after-newline\",\n                    \"preserve-newline\"\n                ];\n                function Options(options) {\n                    BaseOptions.call(this, options, \"js\");\n                    // compatibility, re\n                    var raw_brace_style = this.raw_options.brace_style || null;\n                    if (raw_brace_style === \"expand-strict\") {\n                        this.raw_options.brace_style = \"expand\";\n                    } else if (raw_brace_style === \"collapse-preserve-inline\") {\n                        this.raw_options.brace_style = \"collapse,preserve-inline\";\n                    } else if (this.raw_options.braces_on_own_line !== undefined) {\n                        this.raw_options.brace_style = this.raw_options.braces_on_own_line ? \"expand\" : \"collapse\";\n                    // } else if (!raw_brace_style) { //Nothing exists to set it\n                    //   raw_brace_style = \"collapse\";\n                    }\n                    //preserve-inline in delimited string will trigger brace_preserve_inline, everything\n                    //else is considered a brace_style and the last one only will have an effect\n                    var brace_style_split = this._get_selection_list(\"brace_style\", [\n                        \"collapse\",\n                        \"expand\",\n                        \"end-expand\",\n                        \"none\",\n                        \"preserve-inline\"\n                    ]);\n                    this.brace_preserve_inline = false; //Defaults in case one or other was not specified in meta-option\n                    this.brace_style = \"collapse\";\n                    for(var bs = 0; bs < brace_style_split.length; bs++){\n                        if (brace_style_split[bs] === \"preserve-inline\") {\n                            this.brace_preserve_inline = true;\n                        } else {\n                            this.brace_style = brace_style_split[bs];\n                        }\n                    }\n                    this.unindent_chained_methods = this._get_boolean(\"unindent_chained_methods\");\n                    this.break_chained_methods = this._get_boolean(\"break_chained_methods\");\n                    this.space_in_paren = this._get_boolean(\"space_in_paren\");\n                    this.space_in_empty_paren = this._get_boolean(\"space_in_empty_paren\");\n                    this.jslint_happy = this._get_boolean(\"jslint_happy\");\n                    this.space_after_anon_function = this._get_boolean(\"space_after_anon_function\");\n                    this.space_after_named_function = this._get_boolean(\"space_after_named_function\");\n                    this.keep_array_indentation = this._get_boolean(\"keep_array_indentation\");\n                    this.space_before_conditional = this._get_boolean(\"space_before_conditional\", true);\n                    this.unescape_strings = this._get_boolean(\"unescape_strings\");\n                    this.e4x = this._get_boolean(\"e4x\");\n                    this.comma_first = this._get_boolean(\"comma_first\");\n                    this.operator_position = this._get_selection(\"operator_position\", validPositionValues);\n                    // For testing of beautify preserve:start directive\n                    this.test_output_raw = this._get_boolean(\"test_output_raw\");\n                    // force this._options.space_after_anon_function to true if this._options.jslint_happy\n                    if (this.jslint_happy) {\n                        this.space_after_anon_function = true;\n                    }\n                }\n                Options.prototype = new BaseOptions();\n                module.exports.Options = Options;\n            /***/ },\n            /* 6 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Options(options, merge_child_field) {\n                    this.raw_options = _mergeOpts(options, merge_child_field);\n                    // Support passing the source text back with no change\n                    this.disabled = this._get_boolean(\"disabled\");\n                    this.eol = this._get_characters(\"eol\", \"auto\");\n                    this.end_with_newline = this._get_boolean(\"end_with_newline\");\n                    this.indent_size = this._get_number(\"indent_size\", 4);\n                    this.indent_char = this._get_characters(\"indent_char\", \" \");\n                    this.indent_level = this._get_number(\"indent_level\");\n                    this.preserve_newlines = this._get_boolean(\"preserve_newlines\", true);\n                    this.max_preserve_newlines = this._get_number(\"max_preserve_newlines\", 32786);\n                    if (!this.preserve_newlines) {\n                        this.max_preserve_newlines = 0;\n                    }\n                    this.indent_with_tabs = this._get_boolean(\"indent_with_tabs\", this.indent_char === \"\t\");\n                    if (this.indent_with_tabs) {\n                        this.indent_char = \"\t\";\n                        // indent_size behavior changed after 1.8.6\n                        // It used to be that indent_size would be\n                        // set to 1 for indent_with_tabs. That is no longer needed and\n                        // actually doesn't make sense - why not use spaces? Further,\n                        // that might produce unexpected behavior - tabs being used\n                        // for single-column alignment. So, when indent_with_tabs is true\n                        // and indent_size is 1, reset indent_size to 4.\n                        if (this.indent_size === 1) {\n                            this.indent_size = 4;\n                        }\n                    }\n                    // Backwards compat with 1.3.x\n                    this.wrap_line_length = this._get_number(\"wrap_line_length\", this._get_number(\"max_char\"));\n                    this.indent_empty_lines = this._get_boolean(\"indent_empty_lines\");\n                    // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']\n                    // For now, 'auto' = all off for javascript, all on for html (and inline javascript).\n                    // other values ignored\n                    this.templating = this._get_selection_list(\"templating\", [\n                        \"auto\",\n                        \"none\",\n                        \"django\",\n                        \"erb\",\n                        \"handlebars\",\n                        \"php\",\n                        \"smarty\"\n                    ], [\n                        \"auto\"\n                    ]);\n                }\n                Options.prototype._get_array = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || [];\n                    if (typeof option_value === \"object\") {\n                        if (option_value !== null && typeof option_value.concat === \"function\") {\n                            result = option_value.concat();\n                        }\n                    } else if (typeof option_value === \"string\") {\n                        result = option_value.split(/[^a-zA-Z0-9_\\/\\-]+/);\n                    }\n                    return result;\n                };\n                Options.prototype._get_boolean = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = option_value === undefined ? !!default_value : !!option_value;\n                    return result;\n                };\n                Options.prototype._get_characters = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    var result = default_value || \"\";\n                    if (typeof option_value === \"string\") {\n                        result = option_value.replace(/\\\\r/, \"\\r\").replace(/\\\\n/, \"\\n\").replace(/\\\\t/, \"\t\");\n                    }\n                    return result;\n                };\n                Options.prototype._get_number = function(name, default_value) {\n                    var option_value = this.raw_options[name];\n                    default_value = parseInt(default_value, 10);\n                    if (isNaN(default_value)) {\n                        default_value = 0;\n                    }\n                    var result = parseInt(option_value, 10);\n                    if (isNaN(result)) {\n                        result = default_value;\n                    }\n                    return result;\n                };\n                Options.prototype._get_selection = function(name, selection_list, default_value) {\n                    var result = this._get_selection_list(name, selection_list, default_value);\n                    if (result.length !== 1) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can only be one of the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result[0];\n                };\n                Options.prototype._get_selection_list = function(name, selection_list, default_value) {\n                    if (!selection_list || selection_list.length === 0) {\n                        throw new Error(\"Selection list cannot be empty.\");\n                    }\n                    default_value = default_value || [\n                        selection_list[0]\n                    ];\n                    if (!this._is_valid_selection(default_value, selection_list)) {\n                        throw new Error(\"Invalid Default Value!\");\n                    }\n                    var result = this._get_array(name, default_value);\n                    if (!this._is_valid_selection(result, selection_list)) {\n                        throw new Error(\"Invalid Option Value: The option '\" + name + \"' can contain only the following values:\\n\" + selection_list + \"\\nYou passed in: '\" + this.raw_options[name] + \"'\");\n                    }\n                    return result;\n                };\n                Options.prototype._is_valid_selection = function(result, selection_list) {\n                    return result.length && selection_list.length && !result.some(function(item) {\n                        return selection_list.indexOf(item) === -1;\n                    });\n                };\n                // merges child options up with the parent options object\n                // Example: obj = {a: 1, b: {a: 2}}\n                //          mergeOpts(obj, 'b')\n                //\n                //          Returns: {a: 2}\n                function _mergeOpts(allOptions, childFieldName) {\n                    var finalOpts = {};\n                    allOptions = _normalizeOpts(allOptions);\n                    var name;\n                    for(name in allOptions){\n                        if (name !== childFieldName) {\n                            finalOpts[name] = allOptions[name];\n                        }\n                    }\n                    //merge in the per type settings for the childFieldName\n                    if (childFieldName && allOptions[childFieldName]) {\n                        for(name in allOptions[childFieldName]){\n                            finalOpts[name] = allOptions[childFieldName][name];\n                        }\n                    }\n                    return finalOpts;\n                }\n                function _normalizeOpts(options) {\n                    var convertedOpts = {};\n                    var key;\n                    for(key in options){\n                        var newKey = key.replace(/-/g, \"_\");\n                        convertedOpts[newKey] = options[key];\n                    }\n                    return convertedOpts;\n                }\n                module.exports.Options = Options;\n                module.exports.normalizeOpts = _normalizeOpts;\n                module.exports.mergeOpts = _mergeOpts;\n            /***/ },\n            /* 7 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_137433__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var InputScanner = __nested_webpack_require_137433__(8).InputScanner;\n                var BaseTokenizer = __nested_webpack_require_137433__(9).Tokenizer;\n                var BASETOKEN = __nested_webpack_require_137433__(9).TOKEN;\n                var Directives = __nested_webpack_require_137433__(13).Directives;\n                var acorn = __nested_webpack_require_137433__(4);\n                var Pattern = __nested_webpack_require_137433__(12).Pattern;\n                var TemplatablePattern = __nested_webpack_require_137433__(14).TemplatablePattern;\n                function in_array(what, arr) {\n                    return arr.indexOf(what) !== -1;\n                }\n                var TOKEN = {\n                    START_EXPR: \"TK_START_EXPR\",\n                    END_EXPR: \"TK_END_EXPR\",\n                    START_BLOCK: \"TK_START_BLOCK\",\n                    END_BLOCK: \"TK_END_BLOCK\",\n                    WORD: \"TK_WORD\",\n                    RESERVED: \"TK_RESERVED\",\n                    SEMICOLON: \"TK_SEMICOLON\",\n                    STRING: \"TK_STRING\",\n                    EQUALS: \"TK_EQUALS\",\n                    OPERATOR: \"TK_OPERATOR\",\n                    COMMA: \"TK_COMMA\",\n                    BLOCK_COMMENT: \"TK_BLOCK_COMMENT\",\n                    COMMENT: \"TK_COMMENT\",\n                    DOT: \"TK_DOT\",\n                    UNKNOWN: \"TK_UNKNOWN\",\n                    START: BASETOKEN.START,\n                    RAW: BASETOKEN.RAW,\n                    EOF: BASETOKEN.EOF\n                };\n                var directives_core = new Directives(/\\/\\*/, /\\*\\//);\n                var number_pattern = /0[xX][0123456789abcdefABCDEF_]*n?|0[oO][01234567_]*n?|0[bB][01_]*n?|\\d[\\d_]*n|(?:\\.\\d[\\d_]*|\\d[\\d_]*\\.?[\\d_]*)(?:[eE][+-]?[\\d_]+)?/;\n                var digit = /[0-9]/;\n                // Dot \".\" must be distinguished from \"...\" and decimal\n                var dot_pattern = /[^\\d\\.]/;\n                var positionable_operators = (\">>> === !== &&= ??= ||= \" + \"<< && >= ** != == <= >> || ?? |> \" + \"< / - + > : & % ? ^ | *\").split(\" \");\n                // IMPORTANT: this must be sorted longest to shortest or tokenizing many not work.\n                // Also, you must update possitionable operators separately from punct\n                var punct = \">>>= \" + \"... >>= <<= === >>> !== **= &&= ??= ||= \" + \"=> ^= :: /= << <= == && -= >= >> != -- += ** || ?? ++ %= &= *= |= |> \" + \"= ! ? > < : / ^ - + * & % ~ |\";\n                punct = punct.replace(/[-[\\]{}()*+?.,\\\\^$|#]/g, \"\\\\$&\");\n                // ?. but not if followed by a number \n                punct = \"\\\\?\\\\.(?!\\\\d) \" + punct;\n                punct = punct.replace(/ /g, \"|\");\n                var punct_pattern = new RegExp(punct);\n                // words which should always start on new line.\n                var line_starters = \"continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export\".split(\",\");\n                var reserved_words = line_starters.concat([\n                    \"do\",\n                    \"in\",\n                    \"of\",\n                    \"else\",\n                    \"get\",\n                    \"set\",\n                    \"new\",\n                    \"catch\",\n                    \"finally\",\n                    \"typeof\",\n                    \"yield\",\n                    \"async\",\n                    \"await\",\n                    \"from\",\n                    \"as\",\n                    \"class\",\n                    \"extends\"\n                ]);\n                var reserved_word_pattern = new RegExp(\"^(?:\" + reserved_words.join(\"|\") + \")$\");\n                // var template_pattern = /(?:(?:<\\?php|<\\?=)[\\s\\S]*?\\?>)|(?:<%[\\s\\S]*?%>)/g;\n                var in_html_comment;\n                var Tokenizer = function(input_string, options) {\n                    BaseTokenizer.call(this, input_string, options);\n                    this._patterns.whitespace = this._patterns.whitespace.matching(/\\u00A0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff/.source, /\\u2028\\u2029/.source);\n                    var pattern_reader = new Pattern(this._input);\n                    var templatable = new TemplatablePattern(this._input).read_options(this._options);\n                    this.__patterns = {\n                        template: templatable,\n                        identifier: templatable.starting_with(acorn.identifier).matching(acorn.identifierMatch),\n                        number: pattern_reader.matching(number_pattern),\n                        punct: pattern_reader.matching(punct_pattern),\n                        // comment ends just before nearest linefeed or end of file\n                        comment: pattern_reader.starting_with(/\\/\\//).until(/[\\n\\r\\u2028\\u2029]/),\n                        //  /* ... */ comment ends with nearest */ or end of file\n                        block_comment: pattern_reader.starting_with(/\\/\\*/).until_after(/\\*\\//),\n                        html_comment_start: pattern_reader.matching(/<!--/),\n                        html_comment_end: pattern_reader.matching(/-->/),\n                        include: pattern_reader.starting_with(/#include/).until_after(acorn.lineBreak),\n                        shebang: pattern_reader.starting_with(/#!/).until_after(acorn.lineBreak),\n                        xml: pattern_reader.matching(/[\\s\\S]*?<(\\/?)([-a-zA-Z:0-9_.]+|{[^}]+?}|!\\[CDATA\\[[^\\]]*?\\]\\]|)(\\s*{[^}]+?}|\\s+[-a-zA-Z:0-9_.]+|\\s+[-a-zA-Z:0-9_.]+\\s*=\\s*('[^']*'|\"[^\"]*\"|{([^{}]|{[^}]+?})+?}))*\\s*(\\/?)\\s*>/),\n                        single_quote: templatable.until(/['\\\\\\n\\r\\u2028\\u2029]/),\n                        double_quote: templatable.until(/[\"\\\\\\n\\r\\u2028\\u2029]/),\n                        template_text: templatable.until(/[`\\\\$]/),\n                        template_expression: templatable.until(/[`}\\\\]/)\n                    };\n                };\n                Tokenizer.prototype = new BaseTokenizer();\n                Tokenizer.prototype._is_comment = function(current_token) {\n                    return current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.BLOCK_COMMENT || current_token.type === TOKEN.UNKNOWN;\n                };\n                Tokenizer.prototype._is_opening = function(current_token) {\n                    return current_token.type === TOKEN.START_BLOCK || current_token.type === TOKEN.START_EXPR;\n                };\n                Tokenizer.prototype._is_closing = function(current_token, open_token) {\n                    return (current_token.type === TOKEN.END_BLOCK || current_token.type === TOKEN.END_EXPR) && open_token && (current_token.text === \"]\" && open_token.text === \"[\" || current_token.text === \")\" && open_token.text === \"(\" || current_token.text === \"}\" && open_token.text === \"{\");\n                };\n                Tokenizer.prototype._reset = function() {\n                    in_html_comment = false;\n                };\n                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n                    var token = null;\n                    this._readWhitespace();\n                    var c = this._input.peek();\n                    if (c === null) {\n                        return this._create_token(TOKEN.EOF, \"\");\n                    }\n                    token = token || this._read_non_javascript(c);\n                    token = token || this._read_string(c);\n                    token = token || this._read_pair(c, this._input.peek(1)); // Issue #2062 hack for record type '#{'\n                    token = token || this._read_word(previous_token);\n                    token = token || this._read_singles(c);\n                    token = token || this._read_comment(c);\n                    token = token || this._read_regexp(c, previous_token);\n                    token = token || this._read_xml(c, previous_token);\n                    token = token || this._read_punctuation();\n                    token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());\n                    return token;\n                };\n                Tokenizer.prototype._read_word = function(previous_token) {\n                    var resulting_string;\n                    resulting_string = this.__patterns.identifier.read();\n                    if (resulting_string !== \"\") {\n                        resulting_string = resulting_string.replace(acorn.allLineBreaks, \"\\n\");\n                        if (!(previous_token.type === TOKEN.DOT || previous_token.type === TOKEN.RESERVED && (previous_token.text === \"set\" || previous_token.text === \"get\")) && reserved_word_pattern.test(resulting_string)) {\n                            if ((resulting_string === \"in\" || resulting_string === \"of\") && (previous_token.type === TOKEN.WORD || previous_token.type === TOKEN.STRING)) {\n                                return this._create_token(TOKEN.OPERATOR, resulting_string);\n                            }\n                            return this._create_token(TOKEN.RESERVED, resulting_string);\n                        }\n                        return this._create_token(TOKEN.WORD, resulting_string);\n                    }\n                    resulting_string = this.__patterns.number.read();\n                    if (resulting_string !== \"\") {\n                        return this._create_token(TOKEN.WORD, resulting_string);\n                    }\n                };\n                Tokenizer.prototype._read_singles = function(c) {\n                    var token = null;\n                    if (c === \"(\" || c === \"[\") {\n                        token = this._create_token(TOKEN.START_EXPR, c);\n                    } else if (c === \")\" || c === \"]\") {\n                        token = this._create_token(TOKEN.END_EXPR, c);\n                    } else if (c === \"{\") {\n                        token = this._create_token(TOKEN.START_BLOCK, c);\n                    } else if (c === \"}\") {\n                        token = this._create_token(TOKEN.END_BLOCK, c);\n                    } else if (c === \";\") {\n                        token = this._create_token(TOKEN.SEMICOLON, c);\n                    } else if (c === \".\" && dot_pattern.test(this._input.peek(1))) {\n                        token = this._create_token(TOKEN.DOT, c);\n                    } else if (c === \",\") {\n                        token = this._create_token(TOKEN.COMMA, c);\n                    }\n                    if (token) {\n                        this._input.next();\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_pair = function(c, d) {\n                    var token = null;\n                    if (c === \"#\" && d === \"{\") {\n                        token = this._create_token(TOKEN.START_BLOCK, c + d);\n                    }\n                    if (token) {\n                        this._input.next();\n                        this._input.next();\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_punctuation = function() {\n                    var resulting_string = this.__patterns.punct.read();\n                    if (resulting_string !== \"\") {\n                        if (resulting_string === \"=\") {\n                            return this._create_token(TOKEN.EQUALS, resulting_string);\n                        } else if (resulting_string === \"?.\") {\n                            return this._create_token(TOKEN.DOT, resulting_string);\n                        } else {\n                            return this._create_token(TOKEN.OPERATOR, resulting_string);\n                        }\n                    }\n                };\n                Tokenizer.prototype._read_non_javascript = function(c) {\n                    var resulting_string = \"\";\n                    if (c === \"#\") {\n                        if (this._is_first_token()) {\n                            resulting_string = this.__patterns.shebang.read();\n                            if (resulting_string) {\n                                return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + \"\\n\");\n                            }\n                        }\n                        // handles extendscript #includes\n                        resulting_string = this.__patterns.include.read();\n                        if (resulting_string) {\n                            return this._create_token(TOKEN.UNKNOWN, resulting_string.trim() + \"\\n\");\n                        }\n                        c = this._input.next();\n                        // Spidermonkey-specific sharp variables for circular references. Considered obsolete.\n                        var sharp = \"#\";\n                        if (this._input.hasNext() && this._input.testChar(digit)) {\n                            do {\n                                c = this._input.next();\n                                sharp += c;\n                            }while (this._input.hasNext() && c !== \"#\" && c !== \"=\");\n                            if (c === \"#\") {\n                            //\n                            } else if (this._input.peek() === \"[\" && this._input.peek(1) === \"]\") {\n                                sharp += \"[]\";\n                                this._input.next();\n                                this._input.next();\n                            } else if (this._input.peek() === \"{\" && this._input.peek(1) === \"}\") {\n                                sharp += \"{}\";\n                                this._input.next();\n                                this._input.next();\n                            }\n                            return this._create_token(TOKEN.WORD, sharp);\n                        }\n                        this._input.back();\n                    } else if (c === \"<\" && this._is_first_token()) {\n                        resulting_string = this.__patterns.html_comment_start.read();\n                        if (resulting_string) {\n                            while(this._input.hasNext() && !this._input.testChar(acorn.newline)){\n                                resulting_string += this._input.next();\n                            }\n                            in_html_comment = true;\n                            return this._create_token(TOKEN.COMMENT, resulting_string);\n                        }\n                    } else if (in_html_comment && c === \"-\") {\n                        resulting_string = this.__patterns.html_comment_end.read();\n                        if (resulting_string) {\n                            in_html_comment = false;\n                            return this._create_token(TOKEN.COMMENT, resulting_string);\n                        }\n                    }\n                    return null;\n                };\n                Tokenizer.prototype._read_comment = function(c) {\n                    var token = null;\n                    if (c === \"/\") {\n                        var comment = \"\";\n                        if (this._input.peek(1) === \"*\") {\n                            // peek for comment /* ... */\n                            comment = this.__patterns.block_comment.read();\n                            var directives = directives_core.get_directives(comment);\n                            if (directives && directives.ignore === \"start\") {\n                                comment += directives_core.readIgnored(this._input);\n                            }\n                            comment = comment.replace(acorn.allLineBreaks, \"\\n\");\n                            token = this._create_token(TOKEN.BLOCK_COMMENT, comment);\n                            token.directives = directives;\n                        } else if (this._input.peek(1) === \"/\") {\n                            // peek for comment // ...\n                            comment = this.__patterns.comment.read();\n                            token = this._create_token(TOKEN.COMMENT, comment);\n                        }\n                    }\n                    return token;\n                };\n                Tokenizer.prototype._read_string = function(c) {\n                    if (c === \"`\" || c === \"'\" || c === '\"') {\n                        var resulting_string = this._input.next();\n                        this.has_char_escapes = false;\n                        if (c === \"`\") {\n                            resulting_string += this._read_string_recursive(\"`\", true, \"${\");\n                        } else {\n                            resulting_string += this._read_string_recursive(c);\n                        }\n                        if (this.has_char_escapes && this._options.unescape_strings) {\n                            resulting_string = unescape_string(resulting_string);\n                        }\n                        if (this._input.peek() === c) {\n                            resulting_string += this._input.next();\n                        }\n                        resulting_string = resulting_string.replace(acorn.allLineBreaks, \"\\n\");\n                        return this._create_token(TOKEN.STRING, resulting_string);\n                    }\n                    return null;\n                };\n                Tokenizer.prototype._allow_regexp_or_xml = function(previous_token) {\n                    // regex and xml can only appear in specific locations during parsing\n                    return previous_token.type === TOKEN.RESERVED && in_array(previous_token.text, [\n                        \"return\",\n                        \"case\",\n                        \"throw\",\n                        \"else\",\n                        \"do\",\n                        \"typeof\",\n                        \"yield\"\n                    ]) || previous_token.type === TOKEN.END_EXPR && previous_token.text === \")\" && previous_token.opened.previous.type === TOKEN.RESERVED && in_array(previous_token.opened.previous.text, [\n                        \"if\",\n                        \"while\",\n                        \"for\"\n                    ]) || in_array(previous_token.type, [\n                        TOKEN.COMMENT,\n                        TOKEN.START_EXPR,\n                        TOKEN.START_BLOCK,\n                        TOKEN.START,\n                        TOKEN.END_BLOCK,\n                        TOKEN.OPERATOR,\n                        TOKEN.EQUALS,\n                        TOKEN.EOF,\n                        TOKEN.SEMICOLON,\n                        TOKEN.COMMA\n                    ]);\n                };\n                Tokenizer.prototype._read_regexp = function(c, previous_token) {\n                    if (c === \"/\" && this._allow_regexp_or_xml(previous_token)) {\n                        // handle regexp\n                        //\n                        var resulting_string = this._input.next();\n                        var esc = false;\n                        var in_char_class = false;\n                        while(this._input.hasNext() && (esc || in_char_class || this._input.peek() !== c) && !this._input.testChar(acorn.newline)){\n                            resulting_string += this._input.peek();\n                            if (!esc) {\n                                esc = this._input.peek() === \"\\\\\";\n                                if (this._input.peek() === \"[\") {\n                                    in_char_class = true;\n                                } else if (this._input.peek() === \"]\") {\n                                    in_char_class = false;\n                                }\n                            } else {\n                                esc = false;\n                            }\n                            this._input.next();\n                        }\n                        if (this._input.peek() === c) {\n                            resulting_string += this._input.next();\n                            // regexps may have modifiers /regexp/MOD , so fetch those, too\n                            // Only [gim] are valid, but if the user puts in garbage, do what we can to take it.\n                            resulting_string += this._input.read(acorn.identifier);\n                        }\n                        return this._create_token(TOKEN.STRING, resulting_string);\n                    }\n                    return null;\n                };\n                Tokenizer.prototype._read_xml = function(c, previous_token) {\n                    if (this._options.e4x && c === \"<\" && this._allow_regexp_or_xml(previous_token)) {\n                        var xmlStr = \"\";\n                        var match = this.__patterns.xml.read_match();\n                        // handle e4x xml literals\n                        //\n                        if (match) {\n                            // Trim root tag to attempt to\n                            var rootTag = match[2].replace(/^{\\s+/, \"{\").replace(/\\s+}$/, \"}\");\n                            var isCurlyRoot = rootTag.indexOf(\"{\") === 0;\n                            var depth = 0;\n                            while(match){\n                                var isEndTag = !!match[1];\n                                var tagName = match[2];\n                                var isSingletonTag = !!match[match.length - 1] || tagName.slice(0, 8) === \"![CDATA[\";\n                                if (!isSingletonTag && (tagName === rootTag || isCurlyRoot && tagName.replace(/^{\\s+/, \"{\").replace(/\\s+}$/, \"}\"))) {\n                                    if (isEndTag) {\n                                        --depth;\n                                    } else {\n                                        ++depth;\n                                    }\n                                }\n                                xmlStr += match[0];\n                                if (depth <= 0) {\n                                    break;\n                                }\n                                match = this.__patterns.xml.read_match();\n                            }\n                            // if we didn't close correctly, keep unformatted.\n                            if (!match) {\n                                xmlStr += this._input.match(/[\\s\\S]*/g)[0];\n                            }\n                            xmlStr = xmlStr.replace(acorn.allLineBreaks, \"\\n\");\n                            return this._create_token(TOKEN.STRING, xmlStr);\n                        }\n                    }\n                    return null;\n                };\n                function unescape_string(s) {\n                    // You think that a regex would work for this\n                    // return s.replace(/\\\\x([0-9a-f]{2})/gi, function(match, val) {\n                    //         return String.fromCharCode(parseInt(val, 16));\n                    //     })\n                    // However, dealing with '\\xff', '\\\\xff', '\\\\\\xff' makes this more fun.\n                    var out = \"\", escaped = 0;\n                    var input_scan = new InputScanner(s);\n                    var matched = null;\n                    while(input_scan.hasNext()){\n                        // Keep any whitespace, non-slash characters\n                        // also keep slash pairs.\n                        matched = input_scan.match(/([\\s]|[^\\\\]|\\\\\\\\)+/g);\n                        if (matched) {\n                            out += matched[0];\n                        }\n                        if (input_scan.peek() === \"\\\\\") {\n                            input_scan.next();\n                            if (input_scan.peek() === \"x\") {\n                                matched = input_scan.match(/x([0-9A-Fa-f]{2})/g);\n                            } else if (input_scan.peek() === \"u\") {\n                                matched = input_scan.match(/u([0-9A-Fa-f]{4})/g);\n                                if (!matched) {\n                                    matched = input_scan.match(/u\\{([0-9A-Fa-f]+)\\}/g);\n                                }\n                            } else {\n                                out += \"\\\\\";\n                                if (input_scan.hasNext()) {\n                                    out += input_scan.next();\n                                }\n                                continue;\n                            }\n                            // If there's some error decoding, return the original string\n                            if (!matched) {\n                                return s;\n                            }\n                            escaped = parseInt(matched[1], 16);\n                            if (escaped > 0x7e && escaped <= 0xff && matched[0].indexOf(\"x\") === 0) {\n                                // we bail out on \\x7f..\\xff,\n                                // leaving whole string escaped,\n                                // as it's probably completely binary\n                                return s;\n                            } else if (escaped >= 0x00 && escaped < 0x20) {\n                                // leave 0x00...0x1f escaped\n                                out += \"\\\\\" + matched[0];\n                            } else if (escaped > 0x10FFFF) {\n                                // If the escape sequence is out of bounds, keep the original sequence and continue conversion\n                                out += \"\\\\\" + matched[0];\n                            } else if (escaped === 0x22 || escaped === 0x27 || escaped === 0x5c) {\n                                // single-quote, apostrophe, backslash - escape these\n                                out += \"\\\\\" + String.fromCharCode(escaped);\n                            } else {\n                                out += String.fromCharCode(escaped);\n                            }\n                        }\n                    }\n                    return out;\n                }\n                // handle string\n                //\n                Tokenizer.prototype._read_string_recursive = function(delimiter, allow_unescaped_newlines, start_sub) {\n                    var current_char;\n                    var pattern;\n                    if (delimiter === \"'\") {\n                        pattern = this.__patterns.single_quote;\n                    } else if (delimiter === '\"') {\n                        pattern = this.__patterns.double_quote;\n                    } else if (delimiter === \"`\") {\n                        pattern = this.__patterns.template_text;\n                    } else if (delimiter === \"}\") {\n                        pattern = this.__patterns.template_expression;\n                    }\n                    var resulting_string = pattern.read();\n                    var next = \"\";\n                    while(this._input.hasNext()){\n                        next = this._input.next();\n                        if (next === delimiter || !allow_unescaped_newlines && acorn.newline.test(next)) {\n                            this._input.back();\n                            break;\n                        } else if (next === \"\\\\\" && this._input.hasNext()) {\n                            current_char = this._input.peek();\n                            if (current_char === \"x\" || current_char === \"u\") {\n                                this.has_char_escapes = true;\n                            } else if (current_char === \"\\r\" && this._input.peek(1) === \"\\n\") {\n                                this._input.next();\n                            }\n                            next += this._input.next();\n                        } else if (start_sub) {\n                            if (start_sub === \"${\" && next === \"$\" && this._input.peek() === \"{\") {\n                                next += this._input.next();\n                            }\n                            if (start_sub === next) {\n                                if (delimiter === \"`\") {\n                                    next += this._read_string_recursive(\"}\", allow_unescaped_newlines, \"`\");\n                                } else {\n                                    next += this._read_string_recursive(\"`\", allow_unescaped_newlines, \"${\");\n                                }\n                                if (this._input.hasNext()) {\n                                    next += this._input.next();\n                                }\n                            }\n                        }\n                        next += pattern.read();\n                        resulting_string += next;\n                    }\n                    return resulting_string;\n                };\n                module.exports.Tokenizer = Tokenizer;\n                module.exports.TOKEN = TOKEN;\n                module.exports.positionable_operators = positionable_operators.slice();\n                module.exports.line_starters = line_starters.slice();\n            /***/ },\n            /* 8 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var regexp_has_sticky = RegExp.prototype.hasOwnProperty(\"sticky\");\n                function InputScanner(input_string) {\n                    this.__input = input_string || \"\";\n                    this.__input_length = this.__input.length;\n                    this.__position = 0;\n                }\n                InputScanner.prototype.restart = function() {\n                    this.__position = 0;\n                };\n                InputScanner.prototype.back = function() {\n                    if (this.__position > 0) {\n                        this.__position -= 1;\n                    }\n                };\n                InputScanner.prototype.hasNext = function() {\n                    return this.__position < this.__input_length;\n                };\n                InputScanner.prototype.next = function() {\n                    var val = null;\n                    if (this.hasNext()) {\n                        val = this.__input.charAt(this.__position);\n                        this.__position += 1;\n                    }\n                    return val;\n                };\n                InputScanner.prototype.peek = function(index) {\n                    var val = null;\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        val = this.__input.charAt(index);\n                    }\n                    return val;\n                };\n                // This is a JavaScript only helper function (not in python)\n                // Javascript doesn't have a match method\n                // and not all implementation support \"sticky\" flag.\n                // If they do not support sticky then both this.match() and this.test() method\n                // must get the match and check the index of the match.\n                // If sticky is supported and set, this method will use it.\n                // Otherwise it will check that global is set, and fall back to the slower method.\n                InputScanner.prototype.__match = function(pattern, index) {\n                    pattern.lastIndex = index;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {\n                        if (pattern_match.index !== index) {\n                            pattern_match = null;\n                        }\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.test = function(pattern, index) {\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__input_length) {\n                        return !!this.__match(pattern, index);\n                    } else {\n                        return false;\n                    }\n                };\n                InputScanner.prototype.testChar = function(pattern, index) {\n                    // test one character regex match\n                    var val = this.peek(index);\n                    pattern.lastIndex = 0;\n                    return val !== null && pattern.test(val);\n                };\n                InputScanner.prototype.match = function(pattern) {\n                    var pattern_match = this.__match(pattern, this.__position);\n                    if (pattern_match) {\n                        this.__position += pattern_match[0].length;\n                    } else {\n                        pattern_match = null;\n                    }\n                    return pattern_match;\n                };\n                InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {\n                    var val = \"\";\n                    var match;\n                    if (starting_pattern) {\n                        match = this.match(starting_pattern);\n                        if (match) {\n                            val += match[0];\n                        }\n                    }\n                    if (until_pattern && (match || !starting_pattern)) {\n                        val += this.readUntil(until_pattern, until_after);\n                    }\n                    return val;\n                };\n                InputScanner.prototype.readUntil = function(pattern, until_after) {\n                    var val = \"\";\n                    var match_index = this.__position;\n                    pattern.lastIndex = this.__position;\n                    var pattern_match = pattern.exec(this.__input);\n                    if (pattern_match) {\n                        match_index = pattern_match.index;\n                        if (until_after) {\n                            match_index += pattern_match[0].length;\n                        }\n                    } else {\n                        match_index = this.__input_length;\n                    }\n                    val = this.__input.substring(this.__position, match_index);\n                    this.__position = match_index;\n                    return val;\n                };\n                InputScanner.prototype.readUntilAfter = function(pattern) {\n                    return this.readUntil(pattern, true);\n                };\n                InputScanner.prototype.get_regexp = function(pattern, match_from) {\n                    var result = null;\n                    var flags = \"g\";\n                    if (match_from && regexp_has_sticky) {\n                        flags = \"y\";\n                    }\n                    // strings are converted to regexp\n                    if (typeof pattern === \"string\" && pattern !== \"\") {\n                        // result = new RegExp(pattern.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), flags);\n                        result = new RegExp(pattern, flags);\n                    } else if (pattern) {\n                        result = new RegExp(pattern.source, flags);\n                    }\n                    return result;\n                };\n                InputScanner.prototype.get_literal_regexp = function(literal_string) {\n                    return RegExp(literal_string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n                };\n                /* css beautifier legacy helpers */ InputScanner.prototype.peekUntilAfter = function(pattern) {\n                    var start = this.__position;\n                    var val = this.readUntilAfter(pattern);\n                    this.__position = start;\n                    return val;\n                };\n                InputScanner.prototype.lookBack = function(testVal) {\n                    var start = this.__position - 1;\n                    return start >= testVal.length && this.__input.substring(start - testVal.length, start).toLowerCase() === testVal;\n                };\n                module.exports.InputScanner = InputScanner;\n            /***/ },\n            /* 9 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_175279__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var InputScanner = __nested_webpack_require_175279__(8).InputScanner;\n                var Token = __nested_webpack_require_175279__(3).Token;\n                var TokenStream = __nested_webpack_require_175279__(10).TokenStream;\n                var WhitespacePattern = __nested_webpack_require_175279__(11).WhitespacePattern;\n                var TOKEN = {\n                    START: \"TK_START\",\n                    RAW: \"TK_RAW\",\n                    EOF: \"TK_EOF\"\n                };\n                var Tokenizer = function(input_string, options) {\n                    this._input = new InputScanner(input_string);\n                    this._options = options || {};\n                    this.__tokens = null;\n                    this._patterns = {};\n                    this._patterns.whitespace = new WhitespacePattern(this._input);\n                };\n                Tokenizer.prototype.tokenize = function() {\n                    this._input.restart();\n                    this.__tokens = new TokenStream();\n                    this._reset();\n                    var current;\n                    var previous = new Token(TOKEN.START, \"\");\n                    var open_token = null;\n                    var open_stack = [];\n                    var comments = new TokenStream();\n                    while(previous.type !== TOKEN.EOF){\n                        current = this._get_next_token(previous, open_token);\n                        while(this._is_comment(current)){\n                            comments.add(current);\n                            current = this._get_next_token(previous, open_token);\n                        }\n                        if (!comments.isEmpty()) {\n                            current.comments_before = comments;\n                            comments = new TokenStream();\n                        }\n                        current.parent = open_token;\n                        if (this._is_opening(current)) {\n                            open_stack.push(open_token);\n                            open_token = current;\n                        } else if (open_token && this._is_closing(current, open_token)) {\n                            current.opened = open_token;\n                            open_token.closed = current;\n                            open_token = open_stack.pop();\n                            current.parent = open_token;\n                        }\n                        current.previous = previous;\n                        previous.next = current;\n                        this.__tokens.add(current);\n                        previous = current;\n                    }\n                    return this.__tokens;\n                };\n                Tokenizer.prototype._is_first_token = function() {\n                    return this.__tokens.isEmpty();\n                };\n                Tokenizer.prototype._reset = function() {};\n                Tokenizer.prototype._get_next_token = function(previous_token, open_token) {\n                    this._readWhitespace();\n                    var resulting_string = this._input.read(/.+/g);\n                    if (resulting_string) {\n                        return this._create_token(TOKEN.RAW, resulting_string);\n                    } else {\n                        return this._create_token(TOKEN.EOF, \"\");\n                    }\n                };\n                Tokenizer.prototype._is_comment = function(current_token) {\n                    return false;\n                };\n                Tokenizer.prototype._is_opening = function(current_token) {\n                    return false;\n                };\n                Tokenizer.prototype._is_closing = function(current_token, open_token) {\n                    return false;\n                };\n                Tokenizer.prototype._create_token = function(type, text) {\n                    var token = new Token(type, text, this._patterns.whitespace.newline_count, this._patterns.whitespace.whitespace_before_token);\n                    return token;\n                };\n                Tokenizer.prototype._readWhitespace = function() {\n                    return this._patterns.whitespace.read();\n                };\n                module.exports.Tokenizer = Tokenizer;\n                module.exports.TOKEN = TOKEN;\n            /***/ },\n            /* 10 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function TokenStream(parent_token) {\n                    // private\n                    this.__tokens = [];\n                    this.__tokens_length = this.__tokens.length;\n                    this.__position = 0;\n                    this.__parent_token = parent_token;\n                }\n                TokenStream.prototype.restart = function() {\n                    this.__position = 0;\n                };\n                TokenStream.prototype.isEmpty = function() {\n                    return this.__tokens_length === 0;\n                };\n                TokenStream.prototype.hasNext = function() {\n                    return this.__position < this.__tokens_length;\n                };\n                TokenStream.prototype.next = function() {\n                    var val = null;\n                    if (this.hasNext()) {\n                        val = this.__tokens[this.__position];\n                        this.__position += 1;\n                    }\n                    return val;\n                };\n                TokenStream.prototype.peek = function(index) {\n                    var val = null;\n                    index = index || 0;\n                    index += this.__position;\n                    if (index >= 0 && index < this.__tokens_length) {\n                        val = this.__tokens[index];\n                    }\n                    return val;\n                };\n                TokenStream.prototype.add = function(token) {\n                    if (this.__parent_token) {\n                        token.parent = this.__parent_token;\n                    }\n                    this.__tokens.push(token);\n                    this.__tokens_length += 1;\n                };\n                module.exports.TokenStream = TokenStream;\n            /***/ },\n            /* 11 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_183813__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Pattern = __nested_webpack_require_183813__(12).Pattern;\n                function WhitespacePattern(input_scanner, parent) {\n                    Pattern.call(this, input_scanner, parent);\n                    if (parent) {\n                        this._line_regexp = this._input.get_regexp(parent._line_regexp);\n                    } else {\n                        this.__set_whitespace_patterns(\"\", \"\");\n                    }\n                    this.newline_count = 0;\n                    this.whitespace_before_token = \"\";\n                }\n                WhitespacePattern.prototype = new Pattern();\n                WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {\n                    whitespace_chars += \"\\\\t \";\n                    newline_chars += \"\\\\n\\\\r\";\n                    this._match_pattern = this._input.get_regexp(\"[\" + whitespace_chars + newline_chars + \"]+\", true);\n                    this._newline_regexp = this._input.get_regexp(\"\\\\r\\\\n|[\" + newline_chars + \"]\");\n                };\n                WhitespacePattern.prototype.read = function() {\n                    this.newline_count = 0;\n                    this.whitespace_before_token = \"\";\n                    var resulting_string = this._input.read(this._match_pattern);\n                    if (resulting_string === \" \") {\n                        this.whitespace_before_token = \" \";\n                    } else if (resulting_string) {\n                        var matches = this.__split(this._newline_regexp, resulting_string);\n                        this.newline_count = matches.length - 1;\n                        this.whitespace_before_token = matches[this.newline_count];\n                    }\n                    return resulting_string;\n                };\n                WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {\n                    var result = this._create();\n                    result.__set_whitespace_patterns(whitespace_chars, newline_chars);\n                    result._update();\n                    return result;\n                };\n                WhitespacePattern.prototype._create = function() {\n                    return new WhitespacePattern(this._input, this);\n                };\n                WhitespacePattern.prototype.__split = function(regexp, input_string) {\n                    regexp.lastIndex = 0;\n                    var start_index = 0;\n                    var result = [];\n                    var next_match = regexp.exec(input_string);\n                    while(next_match){\n                        result.push(input_string.substring(start_index, next_match.index));\n                        start_index = next_match.index + next_match[0].length;\n                        next_match = regexp.exec(input_string);\n                    }\n                    if (start_index < input_string.length) {\n                        result.push(input_string.substring(start_index, input_string.length));\n                    } else {\n                        result.push(\"\");\n                    }\n                    return result;\n                };\n                module.exports.WhitespacePattern = WhitespacePattern;\n            /***/ },\n            /* 12 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Pattern(input_scanner, parent) {\n                    this._input = input_scanner;\n                    this._starting_pattern = null;\n                    this._match_pattern = null;\n                    this._until_pattern = null;\n                    this._until_after = false;\n                    if (parent) {\n                        this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);\n                        this._match_pattern = this._input.get_regexp(parent._match_pattern, true);\n                        this._until_pattern = this._input.get_regexp(parent._until_pattern);\n                        this._until_after = parent._until_after;\n                    }\n                }\n                Pattern.prototype.read = function() {\n                    var result = this._input.read(this._starting_pattern);\n                    if (!this._starting_pattern || result) {\n                        result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);\n                    }\n                    return result;\n                };\n                Pattern.prototype.read_match = function() {\n                    return this._input.match(this._match_pattern);\n                };\n                Pattern.prototype.until_after = function(pattern) {\n                    var result = this._create();\n                    result._until_after = true;\n                    result._until_pattern = this._input.get_regexp(pattern);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.until = function(pattern) {\n                    var result = this._create();\n                    result._until_after = false;\n                    result._until_pattern = this._input.get_regexp(pattern);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.starting_with = function(pattern) {\n                    var result = this._create();\n                    result._starting_pattern = this._input.get_regexp(pattern, true);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype.matching = function(pattern) {\n                    var result = this._create();\n                    result._match_pattern = this._input.get_regexp(pattern, true);\n                    result._update();\n                    return result;\n                };\n                Pattern.prototype._create = function() {\n                    return new Pattern(this._input, this);\n                };\n                Pattern.prototype._update = function() {};\n                module.exports.Pattern = Pattern;\n            /***/ },\n            /* 13 */ /***/ function(module) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ function Directives(start_block_pattern, end_block_pattern) {\n                    start_block_pattern = typeof start_block_pattern === \"string\" ? start_block_pattern : start_block_pattern.source;\n                    end_block_pattern = typeof end_block_pattern === \"string\" ? end_block_pattern : end_block_pattern.source;\n                    this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \\w+[:]\\w+)+ /.source + end_block_pattern, \"g\");\n                    this.__directive_pattern = / (\\w+)[:](\\w+)/g;\n                    this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\\sbeautify\\signore:end\\s/.source + end_block_pattern, \"g\");\n                }\n                Directives.prototype.get_directives = function(text) {\n                    if (!text.match(this.__directives_block_pattern)) {\n                        return null;\n                    }\n                    var directives = {};\n                    this.__directive_pattern.lastIndex = 0;\n                    var directive_match = this.__directive_pattern.exec(text);\n                    while(directive_match){\n                        directives[directive_match[1]] = directive_match[2];\n                        directive_match = this.__directive_pattern.exec(text);\n                    }\n                    return directives;\n                };\n                Directives.prototype.readIgnored = function(input) {\n                    return input.readUntilAfter(this.__directives_end_ignore_pattern);\n                };\n                module.exports.Directives = Directives;\n            /***/ },\n            /* 14 */ /***/ function(module, __unused_webpack_exports, __nested_webpack_require_195205__) {\n                /*jshint node:true */ /*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/ var Pattern = __nested_webpack_require_195205__(12).Pattern;\n                var template_names = {\n                    django: false,\n                    erb: false,\n                    handlebars: false,\n                    php: false,\n                    smarty: false\n                };\n                // This lets templates appear anywhere we would do a readUntil\n                // The cost is higher but it is pay to play.\n                function TemplatablePattern(input_scanner, parent) {\n                    Pattern.call(this, input_scanner, parent);\n                    this.__template_pattern = null;\n                    this._disabled = Object.assign({}, template_names);\n                    this._excluded = Object.assign({}, template_names);\n                    if (parent) {\n                        this.__template_pattern = this._input.get_regexp(parent.__template_pattern);\n                        this._excluded = Object.assign(this._excluded, parent._excluded);\n                        this._disabled = Object.assign(this._disabled, parent._disabled);\n                    }\n                    var pattern = new Pattern(input_scanner);\n                    this.__patterns = {\n                        handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),\n                        handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),\n                        handlebars: pattern.starting_with(/{{/).until_after(/}}/),\n                        php: pattern.starting_with(/<\\?(?:[= ]|php)/).until_after(/\\?>/),\n                        erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),\n                        // django coflicts with handlebars a bit.\n                        django: pattern.starting_with(/{%/).until_after(/%}/),\n                        django_value: pattern.starting_with(/{{/).until_after(/}}/),\n                        django_comment: pattern.starting_with(/{#/).until_after(/#}/),\n                        smarty: pattern.starting_with(/{(?=[^}{\\s\\n])/).until_after(/[^\\s\\n]}/),\n                        smarty_comment: pattern.starting_with(/{\\*/).until_after(/\\*}/),\n                        smarty_literal: pattern.starting_with(/{literal}/).until_after(/{\\/literal}/)\n                    };\n                }\n                TemplatablePattern.prototype = new Pattern();\n                TemplatablePattern.prototype._create = function() {\n                    return new TemplatablePattern(this._input, this);\n                };\n                TemplatablePattern.prototype._update = function() {\n                    this.__set_templated_pattern();\n                };\n                TemplatablePattern.prototype.disable = function(language) {\n                    var result = this._create();\n                    result._disabled[language] = true;\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.read_options = function(options) {\n                    var result = this._create();\n                    for(var language in template_names){\n                        result._disabled[language] = options.templating.indexOf(language) === -1;\n                    }\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.exclude = function(language) {\n                    var result = this._create();\n                    result._excluded[language] = true;\n                    result._update();\n                    return result;\n                };\n                TemplatablePattern.prototype.read = function() {\n                    var result = \"\";\n                    if (this._match_pattern) {\n                        result = this._input.read(this._starting_pattern);\n                    } else {\n                        result = this._input.read(this._starting_pattern, this.__template_pattern);\n                    }\n                    var next = this._read_template();\n                    while(next){\n                        if (this._match_pattern) {\n                            next += this._input.read(this._match_pattern);\n                        } else {\n                            next += this._input.readUntil(this.__template_pattern);\n                        }\n                        result += next;\n                        next = this._read_template();\n                    }\n                    if (this._until_after) {\n                        result += this._input.readUntilAfter(this._until_pattern);\n                    }\n                    return result;\n                };\n                TemplatablePattern.prototype.__set_templated_pattern = function() {\n                    var items = [];\n                    if (!this._disabled.php) {\n                        items.push(this.__patterns.php._starting_pattern.source);\n                    }\n                    if (!this._disabled.handlebars) {\n                        items.push(this.__patterns.handlebars._starting_pattern.source);\n                    }\n                    if (!this._disabled.erb) {\n                        items.push(this.__patterns.erb._starting_pattern.source);\n                    }\n                    if (!this._disabled.django) {\n                        items.push(this.__patterns.django._starting_pattern.source);\n                        // The starting pattern for django is more complex because it has different\n                        // patterns for value, comment, and other sections\n                        items.push(this.__patterns.django_value._starting_pattern.source);\n                        items.push(this.__patterns.django_comment._starting_pattern.source);\n                    }\n                    if (!this._disabled.smarty) {\n                        items.push(this.__patterns.smarty._starting_pattern.source);\n                    }\n                    if (this._until_pattern) {\n                        items.push(this._until_pattern.source);\n                    }\n                    this.__template_pattern = this._input.get_regexp(\"(?:\" + items.join(\"|\") + \")\");\n                };\n                TemplatablePattern.prototype._read_template = function() {\n                    var resulting_string = \"\";\n                    var c = this._input.peek();\n                    if (c === \"<\") {\n                        var peek1 = this._input.peek(1);\n                        //if we're in a comment, do something special\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we just look for the appropriate close tag\n                        if (!this._disabled.php && !this._excluded.php && peek1 === \"?\") {\n                            resulting_string = resulting_string || this.__patterns.php.read();\n                        }\n                        if (!this._disabled.erb && !this._excluded.erb && peek1 === \"%\") {\n                            resulting_string = resulting_string || this.__patterns.erb.read();\n                        }\n                    } else if (c === \"{\") {\n                        if (!this._disabled.handlebars && !this._excluded.handlebars) {\n                            resulting_string = resulting_string || this.__patterns.handlebars_comment.read();\n                            resulting_string = resulting_string || this.__patterns.handlebars_unescaped.read();\n                            resulting_string = resulting_string || this.__patterns.handlebars.read();\n                        }\n                        if (!this._disabled.django) {\n                            // django coflicts with handlebars a bit.\n                            if (!this._excluded.django && !this._excluded.handlebars) {\n                                resulting_string = resulting_string || this.__patterns.django_value.read();\n                            }\n                            if (!this._excluded.django) {\n                                resulting_string = resulting_string || this.__patterns.django_comment.read();\n                                resulting_string = resulting_string || this.__patterns.django.read();\n                            }\n                        }\n                        if (!this._disabled.smarty) {\n                            // smarty cannot be enabled with django or handlebars enabled\n                            if (this._disabled.django && this._disabled.handlebars) {\n                                resulting_string = resulting_string || this.__patterns.smarty_comment.read();\n                                resulting_string = resulting_string || this.__patterns.smarty_literal.read();\n                                resulting_string = resulting_string || this.__patterns.smarty.read();\n                            }\n                        }\n                    }\n                    return resulting_string;\n                };\n                module.exports.TemplatablePattern = TemplatablePattern;\n            /***/ }\n        ];\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_205681__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_205681__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ // This entry module is referenced by other modules so it can't be inlined\n        /******/ var __nested_webpack_exports__ = __nested_webpack_require_205681__(0);\n        /******/ legacy_beautify_js = __nested_webpack_exports__;\n    /******/ /******/ })();\n    var js_beautify = legacy_beautify_js;\n    /* Footer */ if (true) {\n        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return {\n                js_beautify: js_beautify\n            };\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/js-beautify/js/lib/beautify.js\n");

/***/ })

};
;